

HI-TECH Software PIC PRO Macro Assembler V9.80 build 6738 
                                                                                               Mon Nov 09 09:34:30 2015

HI-TECH Software Omniscient Code Generator (PRO mode) build 6738
     1                           	processor	16F1934
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	config,global,class=CONFIG,delta=2
     5                           	psect	idataBANK0,global,class=CODE,delta=2
     6                           	psect	idataBANK1,global,class=CODE,delta=2
     7                           	psect	bitnvCOMMON,global,bit,class=COMMON,space=1,delta=1
     8                           	psect	strings,global,class=STRING,delta=2
     9                           	psect	cinit,global,class=CODE,delta=2
    10                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
    11                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	clrtext,global,class=CODE,delta=2
    17                           	psect	inittext,global,class=CODE,delta=2
    18                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    19                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    21                           	psect	intentry,global,class=CODE,delta=2
    22                           	psect	text1130,local,class=CODE,delta=2
    23                           	psect	text1133,local,class=CODE,delta=2
    24                           	psect	text1134,local,class=CODE,delta=2
    25                           	psect	pa_nodes,global,class=CODE,delta=2
    26                           	dabs	1,0x7E,2
    27  000A                     	;#
    28                           
    29                           	psect	config
    30  8007  061C               	dw	1564	;#
    31  8008  0233               	dw	563	;#
    32                           
    33                           	psect	idataBANK0
    34  0000                     __pidataBANK0:	
    35                           
    36                           	psect	idataBANK1
    37  006F                     __pidataBANK1:	
    38                           
    39                           ;initializer for _Battery_12V
    40  006F  3400               	retlw	0
    41  0070  3401               	retlw	1
    42  0071  342F               	retlw	47
    43  0072  3401               	retlw	1
    44  0073  341C               	retlw	28
    45  0074  3401               	retlw	1
    46  0075  3439               	retlw	57
    47  0076  3401               	retlw	1
    48  0077  3487               	retlw	135
    49  0078  3401               	retlw	1
    50  0079  3463               	retlw	99
    51  007A  3401               	retlw	1
    52  007B  345F               	retlw	95
    53  007C  3401               	retlw	1
    54  007D  3455               	retlw	85
    55  007E  3401               	retlw	1
    56  007F  3447               	retlw	71
    57  0080  3401               	retlw	1
    58  0081  347D               	retlw	125
    59  0082  340F               	retlw	15
    60  0083  3484               	retlw	132
    61  0084  3403               	retlw	3
    62                           
    63                           ;initializer for _Battery_24V
    64  0085  3400               	retlw	0
    65  0086  3402               	retlw	2
    66  0087  345E               	retlw	94
    67  0088  3402               	retlw	2
    68  0089  3438               	retlw	56
    69  008A  3402               	retlw	2
    70  008B  3472               	retlw	114
    71  008C  3402               	retlw	2
    72  008D  340E               	retlw	14
    73  008E  3403               	retlw	3
    74  008F  34C6               	retlw	198
    75  0090  3402               	retlw	2
    76  0091  34BE               	retlw	190
    77  0092  3402               	retlw	2
    78  0093  34AA               	retlw	170
    79  0094  3402               	retlw	2
    80  0095  348E               	retlw	142
    81  0096  3402               	retlw	2
    82  0097  3427               	retlw	39
    83  0098  3420               	retlw	32
    84  0099  3405               	retlw	5
    85  009A  340D               	retlw	13
    86                           
    87                           	psect	bitnvCOMMON
    88  03C0                     __pbitnvCOMMON:	
    89  03C0                     _LoadFlag:	
    90  03C0                     	ds	1
    91  03C1                     _LoadState:	
    92  03C1                     	ds	1
    93  000C                     _PORTA	set	12
    94  000D                     _PORTB	set	13
    95  000F                     _PORTD	set	15
    96  0010                     _PORTE	set	16
    97  001B                     _PR2	set	27
    98  0018                     _T1CON	set	24
    99  001C                     _T2CON	set	28
   100  0017                     _TMR1H	set	23
   101  0016                     _TMR1L	set	22
   102  005F                     _GIE	set	95
   103  005E                     _PEIE	set	94
   104  006B                     _RB3	set	107
   105  006C                     _RB4	set	108
   106  006D                     _RB5	set	109
   107  006E                     _RB6	set	110
   108  0071                     _RC1	set	113
   109  0072                     _RC2	set	114
   110  0073                     _RC3	set	115
   111  0082                     _RE2	set	130
   112  005D                     _TMR0IE	set	93
   113  0088                     _TMR1IF	set	136
   114  0089                     _TMR2IF	set	137
   115  0099                     _TMR4IF	set	153
   116  009B                     _TMR6IF	set	155
   117  009D                     _ADCON0	set	157
   118  009E                     _ADCON1	set	158
   119  009C                     _ADRESH	set	156
   120  009B                     _ADRESL	set	155
   121  0099                     _OSCCON	set	153
   122  008C                     _TRISA	set	140
   123  008D                     _TRISB	set	141
   124  008E                     _TRISC	set	142
   125  008F                     _TRISD	set	143
   126  0090                     _TRISE	set	144
   127  0097                     _WDTCON	set	151
   128  04E9                     _ADGO	set	1257
   129  0488                     _TMR1IE	set	1160
   130  0489                     _TMR2IE	set	1161
   131  0499                     _TMR4IE	set	1177
   132  0117                     _FVRCON	set	279
   133  010D                     _LATB	set	269
   134  010E                     _LATC	set	270
   135  018C                     _ANSELA	set	396
   136  018D                     _ANSELB	set	397
   137  0190                     _ANSELE	set	400
   138  0191                     _EEADRL	set	401
   139  0196                     _EECON2	set	406
   140  0193                     _EEDATL	set	403
   141  0CAE                     _CFGS	set	3246
   142  0CAF                     _EEPGD	set	3247
   143  0CA8                     _RD	set	3240
   144  0CA9                     _WR	set	3241
   145  0CAA                     _WREN	set	3242
   146  0395                     _IOCBN	set	917
   147  0394                     _IOCBP	set	916
   148  1CB3                     _IOCBF3	set	7347
   149  1CB4                     _IOCBF4	set	7348
   150  1CB5                     _IOCBF5	set	7349
   151  0416                     _PR4	set	1046
   152  0417                     _T4CON	set	1047
   153                           
   154                           	psect	strings
   155  005E                     __pstrings:	
   156  005E                     __stringtab:	
   157  005E  3400               	retlw	0
   158  005F                     STR_1:	
   159  005F  3442               	retlw	66	;'B'
   160  0060  3476               	retlw	118	;'v'
   161  0061  3431               	retlw	49	;'1'
   162  0062  3433               	retlw	51	;'3'
   163  0063  342E               	retlw	46	;'.'
   164  0064  3432               	retlw	50	;'2'
   165  0065  3456               	retlw	86	;'V'
   166  0066  3420               	retlw	32	;' '
   167  0067  3453               	retlw	83	;'S'
   168  0068  346F               	retlw	111	;'o'
   169  0069  3463               	retlw	99	;'c'
   170  006A  3430               	retlw	48	;'0'
   171  006B  3430               	retlw	48	;'0'
   172  006C  3430               	retlw	48	;'0'
   173  006D  3430               	retlw	48	;'0'
   174  006E  3400               	retlw	0
   175                           
   176                           	psect	cinit
   177  083D                     start_initialization:	
   178                           
   179                           ; Clear objects allocated to BITCOMMON
   180  083D  01F0               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   181  083E  01F1               	clrf	((__pbitbssCOMMON/(0+8)+1))& (0+127)
   182                           
   183                           ; Clear objects allocated to COMMON
   184  083F  01F9               	clrf	__pbssCOMMON& (0+127)
   185                           
   186                           ; Clear objects allocated to BANK0
   187  0840  304E               	movlw	low __pbssBANK0
   188  0841  0084               	movwf	4
   189  0842  3000               	movlw	high __pbssBANK0
   190  0843  0085               	movwf	5
   191  0844  3020               	movlw	32
   192  0845  3180  20D1  3188   	fcall	clear_ram
   193                           
   194                           ; Clear objects allocated to BANK1
   195  0848  30CC               	movlw	low __pbssBANK1
   196  0849  0084               	movwf	4
   197  084A  3000               	movlw	high __pbssBANK1
   198  084B  0085               	movwf	5
   199  084C  301C               	movlw	28
   200  084D  3180  20D1  3188   	fcall	clear_ram
   201                           
   202                           ;initializer for _KeyEvent_PendKeyCode
   203  0850  3001               	movlw	1
   204  0851  00EE               	movwf	__pdataBANK0& (0+127)
   205                           
   206                           ;initializer for _SystemModeType
   207  0852  3003               	movlw	3
   208  0853  00EF               	movwf	(__pdataBANK0+1)& (0+127)
   209                           
   210                           ; Initialize objects allocated to BANK1
   211  0854  306F               	movlw	low __pidataBANK1
   212  0855  0084               	movwf	4
   213  0856  3080               	movlw	(high __pidataBANK1)| (0+128)
   214  0857  0085               	movwf	5
   215  0858  30A0               	movlw	low __pdataBANK1
   216  0859  0086               	movwf	6
   217  085A  3000               	movlw	high __pdataBANK1
   218  085B  0087               	movwf	7
   219  085C  302C               	movlw	44
   220  085D  3180  20D7  3188   	fcall	init_ram
   221  0860                     end_of_initialization:	
   222                           ;End of C runtime variable initialization code
   223                           
   224  0860  0020               	movlb	0
   225  0861  2862               	ljmp	_main	;jump to C main() function
   226  0862                     __pmaintext:	
   227 ;;Data sizes: Strings 16, constant 0, data 46, bss 61, persistent 0 stack 0
   228 ;;Auto spaces:   Size  Autos    Used
   229 ;; COMMON          14      6      10
   230 ;; BANK0           80     46      80
   231 ;; BANK1           80      5      77
   232 ;; BANK2           80      0       0
   233 ;;
   234 ;; Pointer list with targets:
   235 ;; ?___ftpack	float  size(1) Largest target is 0
   236 ;;
   237 ;; ?___wmul	unsigned int  size(1) Largest target is 0
   238 ;;
   239 ;; ?_GetLoadCurrentVoltage	unsigned int  size(1) Largest target is 0
   240 ;;
   241 ;; ?_GetSolarPanelVoltage	unsigned int  size(1) Largest target is 0
   242 ;;
   243 ;; ?_GetBatteryVoltage	unsigned int  size(1) Largest target is 0
   244 ;;
   245 ;; ?_getADValue	unsigned int  size(1) Largest target is 0
   246 ;;
   247 ;; ?_getADValueOneTime	unsigned int  size(1) Largest target is 0
   248 ;;
   249 ;; ?___ftmul	float  size(1) Largest target is 0
   250 ;;
   251 ;; ?___fttol	long  size(1) Largest target is 0
   252 ;;
   253 ;; ?_readIntParam	unsigned int  size(1) Largest target is 0
   254 ;;
   255 ;; ?___ftdiv	float  size(1) Largest target is 0
   256 ;;
   257 ;; ?___lwtoft	float  size(1) Largest target is 0
   258 ;;
   259 ;; charPointer	PTR const unsigned char  size(1) Largest target is 4096
   260 ;;		 -> ROM(CODE[4096]), 
   261 ;;
   262 ;; SystemConfig	PTR struct _SystemConfig size(1) Largest target is 0
   263 ;;		 -> NULL(NULL[0]), 
   264 ;;
   265 ;; S10538$_cp	PTR const unsigned char  size(1) Largest target is 0
   266 ;;
   267 ;; _val._str._cp	PTR const unsigned char  size(1) Largest target is 0
   268 ;;
   269 ;; BatteryStandard	PTR unsigned int  size(1) Largest target is 22
   270 ;;		 -> Battery_24V(BANK1[22]), Battery_12V(BANK1[22]), NULL(NULL[0]), 
   271 ;;
   272 ;;
   273 ;; Critical Paths under _main in COMMON
   274 ;;
   275 ;;   _SolarPanelDealWith->_CTKSoftDelay
   276 ;;   _SolarPanelDealWith->___wmul
   277 ;;   _SwitchBatteryState->_BatteryStateSwitch
   278 ;;   _SwitchBatteryState->_CTKSoftDelay
   279 ;;   _KaiJi->___wmul
   280 ;;   _writeIntParam->_WriteEE
   281 ;;   _readIntParam->_ReadEE
   282 ;;   _API_LCD_CLEAR->_CTKSoftDelay
   283 ;;   _API_LCD_INIT->_CTKSoftDelay
   284 ;;   _getADValueOneTime->_CTKSoftDelay
   285 ;;   _lcd_write_data->_CTKSoftDelay
   286 ;;   _lcd_write_command->_CTKSoftDelay
   287 ;;   _system_state_init->_CTKSoftDelay
   288 ;;
   289 ;; Critical Paths under _ISR_Timer in COMMON
   290 ;;
   291 ;;   _ISR_Timer->_handlerKeyEventInput
   292 ;;   _handlerPWMInterrupt->_openOrClosePWM
   293 ;;   _openOrClosePWM->_setPWM
   294 ;;
   295 ;; Critical Paths under _main in BANK0
   296 ;;
   297 ;;   _PWMCharge->_GetBatteryVoltage
   298 ;;   _SolarPanelDealWith->_GetSolarPanelVoltage
   299 ;;   _SwitchBatteryState->_GetBatteryVoltage
   300 ;;   _LoadCurrentDealWith->_GetLoadCurrentVoltage
   301 ;;   _KaiJi->_GetBatteryVoltage
   302 ;;   _KaiJi->_GetSolarPanelVoltage
   303 ;;   _KaiJi->_GetLoadCurrentVoltage
   304 ;;   _GetLoadCurrentVoltage->_getADValue
   305 ;;   _GetSolarPanelVoltage->_getADValue
   306 ;;   _GetBatteryVoltage->_getADValue
   307 ;;   _ReadOrWriteEE->_readIntParam
   308 ;;   _lcd_move_char->_API_LCD_MOVE_POINT
   309 ;;   _getADValue->_getADValueOneTime
   310 ;;   _writeIntParam->___ftmul
   311 ;;   _readIntParam->___ftdiv
   312 ;;   _API_LCD_MOVE_POINT->_lcd_write_command
   313 ;;   _API_LCD_CLEAR->_lcd_write_command
   314 ;;   _API_LCD_INIT->_lcd_write_command
   315 ;;   ___lwtoft->___fttol
   316 ;;   ___ftmul->___lwtoft
   317 ;;   ___ftdiv->___lwtoft
   318 ;;   _getADValueOneTime->_CTKSoftDelay
   319 ;;   _lcd_write_data->_CTKSoftDelay
   320 ;;   _lcd_write_command->_CTKSoftDelay
   321 ;;   _system_state_init->_CTKSoftDelay
   322 ;;   ___fttol->___ftpack
   323 ;;
   324 ;; Critical Paths under _ISR_Timer in BANK0
   325 ;;
   326 ;;   None.
   327 ;;
   328 ;; Critical Paths under _main in BANK1
   329 ;;
   330 ;;   _LoadParamFromEPPROM->_ReadOrWriteEE
   331 ;;
   332 ;; Critical Paths under _ISR_Timer in BANK1
   333 ;;
   334 ;;   None.
   335 ;;
   336 ;; Critical Paths under _main in BANK2
   337 ;;
   338 ;;   None.
   339 ;;
   340 ;; Critical Paths under _ISR_Timer in BANK2
   341 ;;
   342 ;;   None.
   343 ;;
   344 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   345 ;;
   346 ;;
   347 ;;Call Graph Tables:
   348 ;;
   349 ;; ---------------------------------------------------------------------------------
   350 ;; (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
   351 ;; ---------------------------------------------------------------------------------
   352 ;; (0) _main                                                 0     0      0   11575
   353 ;;                  _system_state_init
   354 ;;                _LoadParamFromEPPROM
   355 ;;                       _API_LCD_INIT
   356 ;;                      _API_LCD_CLEAR
   357 ;;                              _KaiJi
   358 ;;                         _SelectMode
   359 ;;                _LoadCurrentDealWith
   360 ;;                 _SwitchBatteryState
   361 ;;                         _LedDisplay
   362 ;;                 _SolarPanelDealWith
   363 ;;                          _PWMCharge
   364 ;;                  _lcd_write_command
   365 ;; ---------------------------------------------------------------------------------
   366 ;; (1) _PWMCharge                                            2     2      0     767
   367 ;;                                             29 BANK0      2     2      0
   368 ;;                  _GetBatteryVoltage
   369 ;; ---------------------------------------------------------------------------------
   370 ;; (1) _SolarPanelDealWith                                   8     8      0    1141
   371 ;;                                             29 BANK0      8     8      0
   372 ;;                       _CTKSoftDelay
   373 ;;               _GetSolarPanelVoltage
   374 ;;                             ___wmul
   375 ;; ---------------------------------------------------------------------------------
   376 ;; (1) _SwitchBatteryState                                   6     6      0    1925
   377 ;;                                             29 BANK0      6     6      0
   378 ;;                  _GetBatteryVoltage
   379 ;;                 _BatteryStateSwitch
   380 ;;                      _lcd_move_char
   381 ;;                     _lcd_write_data
   382 ;;                       _CTKSoftDelay
   383 ;; ---------------------------------------------------------------------------------
   384 ;; (1) _LoadCurrentDealWith                                  2     2      0     801
   385 ;;                                             29 BANK0      2     2      0
   386 ;;              _GetLoadCurrentVoltage
   387 ;; ---------------------------------------------------------------------------------
   388 ;; (1) _KaiJi                                                2     2      0    2242
   389 ;;                                             29 BANK0      2     2      0
   390 ;;                  _GetBatteryVoltage
   391 ;;               _GetSolarPanelVoltage
   392 ;;                             ___wmul
   393 ;;              _GetLoadCurrentVoltage
   394 ;; ---------------------------------------------------------------------------------
   395 ;; (1) _LoadParamFromEPPROM                                  0     0      0    3604
   396 ;;                      _ReadOrWriteEE
   397 ;; ---------------------------------------------------------------------------------
   398 ;; (2) _GetLoadCurrentVoltage                                3     1      2     702
   399 ;;                                             26 BANK0      3     1      2
   400 ;;                         _getADValue
   401 ;; ---------------------------------------------------------------------------------
   402 ;; (2) _GetSolarPanelVoltage                                 3     1      2     702
   403 ;;                                             26 BANK0      3     1      2
   404 ;;                         _getADValue
   405 ;; ---------------------------------------------------------------------------------
   406 ;; (2) _GetBatteryVoltage                                    3     1      2     702
   407 ;;                                             26 BANK0      3     1      2
   408 ;;                         _getADValue
   409 ;; ---------------------------------------------------------------------------------
   410 ;; (2) _ReadOrWriteEE                                        5     3      2    3604
   411 ;;                                              0 BANK1      5     3      2
   412 ;;                       _readIntParam
   413 ;;                      _writeIntParam
   414 ;; ---------------------------------------------------------------------------------
   415 ;; (2) _lcd_move_char                                        1     1      0     294
   416 ;;                                              8 BANK0      1     1      0
   417 ;;                 _API_LCD_MOVE_POINT
   418 ;; ---------------------------------------------------------------------------------
   419 ;; (3) _getADValue                                          15    13      2     668
   420 ;;                                             11 BANK0     15    13      2
   421 ;;                  _getADValueOneTime
   422 ;; ---------------------------------------------------------------------------------
   423 ;; (3) _writeIntParam                                        5     2      3    1734
   424 ;;                                             39 BANK0      5     2      3
   425 ;;                           ___lwtoft
   426 ;;                            ___ftmul
   427 ;;                            ___fttol
   428 ;;                            _WriteEE
   429 ;; ---------------------------------------------------------------------------------
   430 ;; (3) _readIntParam                                         7     5      2    1579
   431 ;;                                             39 BANK0      7     5      2
   432 ;;                             _ReadEE
   433 ;;                           ___lwtoft
   434 ;;                            ___ftdiv
   435 ;;                            ___fttol
   436 ;; ---------------------------------------------------------------------------------
   437 ;; (3) _API_LCD_MOVE_POINT                                   3     3      0     263
   438 ;;                                              5 BANK0      3     3      0
   439 ;;                  _lcd_write_command
   440 ;; ---------------------------------------------------------------------------------
   441 ;; (1) _API_LCD_CLEAR                                        0     0      0     365
   442 ;;                  _lcd_write_command
   443 ;;                       _CTKSoftDelay
   444 ;; ---------------------------------------------------------------------------------
   445 ;; (1) _API_LCD_INIT                                         0     0      0     365
   446 ;;                  _lcd_write_command
   447 ;;                       _CTKSoftDelay
   448 ;; ---------------------------------------------------------------------------------
   449 ;; (4) ___lwtoft                                             3     0      3     343
   450 ;;                                             21 BANK0      3     0      3
   451 ;;                           ___ftpack
   452 ;;                            ___fttol (ARG)
   453 ;; ---------------------------------------------------------------------------------
   454 ;; (4) ___ftmul                                             15     9      6     800
   455 ;;                                             24 BANK0     15     9      6
   456 ;;                           ___ftpack
   457 ;;                           ___lwtoft (ARG)
   458 ;;                            ___fttol (ARG)
   459 ;; ---------------------------------------------------------------------------------
   460 ;; (4) ___ftdiv                                             15     9      6     732
   461 ;;                                             24 BANK0     15     9      6
   462 ;;                           ___ftpack
   463 ;;                           ___lwtoft (ARG)
   464 ;;                            ___fttol (ARG)
   465 ;; ---------------------------------------------------------------------------------
   466 ;; (4) _getADValueOneTime                                    7     5      2     238
   467 ;;                                              4 BANK0      7     5      2
   468 ;;                       _CTKSoftDelay
   469 ;; ---------------------------------------------------------------------------------
   470 ;; (2) _lcd_write_data                                       1     1      0     198
   471 ;;                                              4 BANK0      1     1      0
   472 ;;                       _CTKSoftDelay
   473 ;; ---------------------------------------------------------------------------------
   474 ;; (1) _lcd_write_command                                    1     1      0     198
   475 ;;                                              4 BANK0      1     1      0
   476 ;;                       _CTKSoftDelay
   477 ;; ---------------------------------------------------------------------------------
   478 ;; (1) _system_state_init                                    0     0      0     167
   479 ;;                       _CTKSoftDelay
   480 ;; ---------------------------------------------------------------------------------
   481 ;; (4) ___fttol                                             13     9      4     371
   482 ;;                                              8 BANK0     13     9      4
   483 ;;                           ___ftpack (ARG)
   484 ;; ---------------------------------------------------------------------------------
   485 ;; (5) ___ftpack                                             8     3      5     312
   486 ;;                                              0 BANK0      8     3      5
   487 ;; ---------------------------------------------------------------------------------
   488 ;; (2) ___wmul                                               6     2      4     136
   489 ;;                                              4 COMMON     2     2      0
   490 ;;                                              0 BANK0      4     0      4
   491 ;; ---------------------------------------------------------------------------------
   492 ;; (2) _BatteryStateSwitch                                   8     6      2     564
   493 ;;                                              4 COMMON     2     0      2
   494 ;;                                              0 BANK0      6     6      0
   495 ;; ---------------------------------------------------------------------------------
   496 ;; (4) _WriteEE                                              2     1      1      62
   497 ;;                                              4 COMMON     2     1      1
   498 ;; ---------------------------------------------------------------------------------
   499 ;; (4) _ReadEE                                               1     1      0      31
   500 ;;                                              4 COMMON     1     1      0
   501 ;; ---------------------------------------------------------------------------------
   502 ;; (2) _CTKSoftDelay                                         6     4      2     167
   503 ;;                                              4 COMMON     2     0      2
   504 ;;                                              0 BANK0      4     4      0
   505 ;; ---------------------------------------------------------------------------------
   506 ;; (1) _LedDisplay                                           0     0      0       0
   507 ;; ---------------------------------------------------------------------------------
   508 ;; (1) _SelectMode                                           0     0      0       0
   509 ;; ---------------------------------------------------------------------------------
   510 ;; Estimated maximum stack depth 5
   511 ;; ---------------------------------------------------------------------------------
   512 ;; (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
   513 ;; ---------------------------------------------------------------------------------
   514 ;; (6) _ISR_Timer                                            0     0      0     198
   515 ;;               _handlerKeyEventInput
   516 ;;                _handlerPWMInterrupt
   517 ;; ---------------------------------------------------------------------------------
   518 ;; (7) _handlerPWMInterrupt                                  0     0      0      88
   519 ;;                     _openOrClosePWM
   520 ;; ---------------------------------------------------------------------------------
   521 ;; (8) _openOrClosePWM                                       1     1      0      88
   522 ;;                                              1 COMMON     1     1      0
   523 ;;                             _setPWM
   524 ;; ---------------------------------------------------------------------------------
   525 ;; (9) _setPWM                                               1     1      0      22
   526 ;;                                              0 COMMON     1     1      0
   527 ;; ---------------------------------------------------------------------------------
   528 ;; (7) _handlerKeyEventInput                                 4     2      2     110
   529 ;;                                              0 COMMON     4     2      2
   530 ;; ---------------------------------------------------------------------------------
   531 ;; Estimated maximum stack depth 9
   532 ;; ---------------------------------------------------------------------------------
   533 ;; Call Graph Graphs:
   534 ;; _main (ROOT)
   535 ;;   _system_state_init
   536 ;;     _CTKSoftDelay
   537 ;;   _LoadParamFromEPPROM
   538 ;;     _ReadOrWriteEE
   539 ;;       _readIntParam
   540 ;;         _ReadEE
   541 ;;         ___lwtoft
   542 ;;           ___ftpack
   543 ;;           ___fttol (ARG)
   544 ;;             ___ftpack (ARG)
   545 ;;         ___ftdiv
   546 ;;           ___ftpack
   547 ;;           ___lwtoft (ARG)
   548 ;;             ___ftpack
   549 ;;             ___fttol (ARG)
   550 ;;               ___ftpack (ARG)
   551 ;;           ___fttol (ARG)
   552 ;;             ___ftpack (ARG)
   553 ;;         ___fttol
   554 ;;           ___ftpack (ARG)
   555 ;;       _writeIntParam
   556 ;;         ___lwtoft
   557 ;;           ___ftpack
   558 ;;           ___fttol (ARG)
   559 ;;             ___ftpack (ARG)
   560 ;;         ___ftmul
   561 ;;           ___ftpack
   562 ;;           ___lwtoft (ARG)
   563 ;;             ___ftpack
   564 ;;             ___fttol (ARG)
   565 ;;               ___ftpack (ARG)
   566 ;;           ___fttol (ARG)
   567 ;;             ___ftpack (ARG)
   568 ;;         ___fttol
   569 ;;           ___ftpack (ARG)
   570 ;;         _WriteEE
   571 ;;   _API_LCD_INIT
   572 ;;     _lcd_write_command
   573 ;;       _CTKSoftDelay
   574 ;;     _CTKSoftDelay
   575 ;;   _API_LCD_CLEAR
   576 ;;     _lcd_write_command
   577 ;;       _CTKSoftDelay
   578 ;;     _CTKSoftDelay
   579 ;;   _KaiJi
   580 ;;     _GetBatteryVoltage
   581 ;;       _getADValue
   582 ;;         _getADValueOneTime
   583 ;;           _CTKSoftDelay
   584 ;;     _GetSolarPanelVoltage
   585 ;;       _getADValue
   586 ;;         _getADValueOneTime
   587 ;;           _CTKSoftDelay
   588 ;;     ___wmul
   589 ;;     _GetLoadCurrentVoltage
   590 ;;       _getADValue
   591 ;;         _getADValueOneTime
   592 ;;           _CTKSoftDelay
   593 ;;   _SelectMode
   594 ;;   _LoadCurrentDealWith
   595 ;;     _GetLoadCurrentVoltage
   596 ;;       _getADValue
   597 ;;         _getADValueOneTime
   598 ;;           _CTKSoftDelay
   599 ;;   _SwitchBatteryState
   600 ;;     _GetBatteryVoltage
   601 ;;       _getADValue
   602 ;;         _getADValueOneTime
   603 ;;           _CTKSoftDelay
   604 ;;     _BatteryStateSwitch
   605 ;;     _lcd_move_char
   606 ;;       _API_LCD_MOVE_POINT
   607 ;;         _lcd_write_command
   608 ;;           _CTKSoftDelay
   609 ;;     _lcd_write_data
   610 ;;       _CTKSoftDelay
   611 ;;     _CTKSoftDelay
   612 ;;   _LedDisplay
   613 ;;   _SolarPanelDealWith
   614 ;;     _CTKSoftDelay
   615 ;;     _GetSolarPanelVoltage
   616 ;;       _getADValue
   617 ;;         _getADValueOneTime
   618 ;;           _CTKSoftDelay
   619 ;;     ___wmul
   620 ;;   _PWMCharge
   621 ;;     _GetBatteryVoltage
   622 ;;       _getADValue
   623 ;;         _getADValueOneTime
   624 ;;           _CTKSoftDelay
   625 ;;   _lcd_write_command
   626 ;;     _CTKSoftDelay
   627 ;;
   628 ;; _ISR_Timer (ROOT)
   629 ;;   _handlerKeyEventInput
   630 ;;   _handlerPWMInterrupt
   631 ;;     _openOrClosePWM
   632 ;;       _setPWM
   633 ;;
   634 ;; Address spaces:
   635 ;;Name               Size   Autos  Total    Cost      Usage
   636 ;;BIGRAM              F0      0       0       0        0.0%
   637 ;;EEDATA             100      0       0       0        0.0%
   638 ;;NULL                 0      0       0       0        0.0%
   639 ;;CODE                 0      0       0       0        0.0%
   640 ;;BITCOMMON            E      0       3       1       21.4%
   641 ;;BITSFR0              0      0       0       1        0.0%
   642 ;;SFR0                 0      0       0       1        0.0%
   643 ;;COMMON               E      6       A       2       71.4%
   644 ;;BITSFR1              0      0       0       2        0.0%
   645 ;;SFR1                 0      0       0       2        0.0%
   646 ;;BITSFR2              0      0       0       3        0.0%
   647 ;;SFR2                 0      0       0       3        0.0%
   648 ;;STACK                0      0       D       3        0.0%
   649 ;;BITSFR3              0      0       0       4        0.0%
   650 ;;SFR3                 0      0       0       4        0.0%
   651 ;;ABS                  0      0      A7       4        0.0%
   652 ;;BITBANK0            50      0       0       5        0.0%
   653 ;;BITSFR4              0      0       0       5        0.0%
   654 ;;SFR4                 0      0       0       5        0.0%
   655 ;;BANK0               50     2E      50       6      100.0%
   656 ;;BITSFR5              0      0       0       6        0.0%
   657 ;;SFR5                 0      0       0       6        0.0%
   658 ;;BITBANK1            50      0       0       7        0.0%
   659 ;;BITSFR6              0      0       0       7        0.0%
   660 ;;SFR6                 0      0       0       7        0.0%
   661 ;;BANK1               50      5      4D       8       96.3%
   662 ;;BITSFR7              0      0       0       8        0.0%
   663 ;;SFR7                 0      0       0       8        0.0%
   664 ;;BITBANK2            50      0       0       9        0.0%
   665 ;;BITSFR8              0      0       0       9        0.0%
   666 ;;SFR8                 0      0       0       9        0.0%
   667 ;;BANK2               50      0       0      10        0.0%
   668 ;;BITSFR9              0      0       0      10        0.0%
   669 ;;SFR9                 0      0       0      10        0.0%
   670 ;;BITSFR10             0      0       0      11        0.0%
   671 ;;SFR10                0      0       0      11        0.0%
   672 ;;DATA                 0      0      B4      11        0.0%
   673 ;;BITSFR11             0      0       0      12        0.0%
   674 ;;SFR11                0      0       0      12        0.0%
   675 ;;BITSFR12             0      0       0      13        0.0%
   676 ;;SFR12                0      0       0      13        0.0%
   677 ;;BITSFR13             0      0       0      14        0.0%
   678 ;;SFR13                0      0       0      14        0.0%
   679 ;;BITSFR14             0      0       0      15        0.0%
   680 ;;SFR14                0      0       0      15        0.0%
   681 ;;BITSFR15             0      0       0      16        0.0%
   682 ;;SFR15                0      0       0      16        0.0%
   683 ;;BITSFR16             0      0       0      17        0.0%
   684 ;;SFR16                0      0       0      17        0.0%
   685 ;;BITSFR17             0      0       0      18        0.0%
   686 ;;SFR17                0      0       0      18        0.0%
   687 ;;BITSFR18             0      0       0      19        0.0%
   688 ;;SFR18                0      0       0      19        0.0%
   689 ;;BITSFR19             0      0       0      20        0.0%
   690 ;;SFR19                0      0       0      20        0.0%
   691 ;;BITSFR20             0      0       0      21        0.0%
   692 ;;SFR20                0      0       0      21        0.0%
   693 ;;BITSFR21             0      0       0      22        0.0%
   694 ;;SFR21                0      0       0      22        0.0%
   695 ;;BITSFR22             0      0       0      23        0.0%
   696 ;;SFR22                0      0       0      23        0.0%
   697 ;;BITSFR23             0      0       0      24        0.0%
   698 ;;SFR23                0      0       0      24        0.0%
   699 ;;BITSFR24             0      0       0      25        0.0%
   700 ;;SFR24                0      0       0      25        0.0%
   701 ;;BITSFR25             0      0       0      26        0.0%
   702 ;;SFR25                0      0       0      26        0.0%
   703 ;;BITSFR26             0      0       0      27        0.0%
   704 ;;SFR26                0      0       0      27        0.0%
   705 ;;BITSFR27             0      0       0      28        0.0%
   706 ;;SFR27                0      0       0      28        0.0%
   707 ;;BITSFR28             0      0       0      29        0.0%
   708 ;;SFR28                0      0       0      29        0.0%
   709 ;;BITSFR29             0      0       0      30        0.0%
   710 ;;SFR29                0      0       0      30        0.0%
   711 ;;BITSFR30             0      0       0      31        0.0%
   712 ;;SFR30                0      0       0      31        0.0%
   713 ;;BITSFR31             0      0       0      32        0.0%
   714 ;;SFR31                0      0       0      32        0.0%
   715                           
   716                           
   717 ;; *************** function _main *****************
   718 ;; Defined at:
   719 ;;		line 193 in file "C:\CTK\CTK80A 150928\CTK80A_Jas\main.c"
   720 ;; Parameters:    Size  Location     Type
   721 ;;		None
   722 ;; Auto vars:     Size  Location     Type
   723 ;;		None
   724 ;; Return value:  Size  Location     Type
   725 ;;		None               void
   726 ;; Registers used:
   727 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
   728 ;; Tracked objects:
   729 ;;		On entry : 17F/0
   730 ;;		On exit  : 1F/0
   731 ;;		Unchanged: FFE00/0
   732 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   733 ;;      Params:         0       0       0       0
   734 ;;      Locals:         0       0       0       0
   735 ;;      Temps:          0       0       0       0
   736 ;;      Totals:         0       0       0       0
   737 ;;Total ram usage:        0 bytes
   738 ;; Hardware stack levels required when called:    9
   739 ;; This function calls:
   740 ;;		_system_state_init
   741 ;;		_LoadParamFromEPPROM
   742 ;;		_API_LCD_INIT
   743 ;;		_API_LCD_CLEAR
   744 ;;		_KaiJi
   745 ;;		_SelectMode
   746 ;;		_LoadCurrentDealWith
   747 ;;		_SwitchBatteryState
   748 ;;		_LedDisplay
   749 ;;		_SolarPanelDealWith
   750 ;;		_PWMCharge
   751 ;;		_lcd_write_command
   752 ;; This function is called by:
   753 ;;		Startup code after reset
   754 ;; This function uses a non-reentrant model
   755 ;;
   756  0862                     _main:	
   757                           
   758                           ;main.c: 194: system_state_init();
   759                           
   760                           ; Regs used in _main: [allreg]
   761  0862  234C  3188         	fcall	_system_state_init
   762                           
   763                           ;main.c: 195: LoadParamFromEPPROM();
   764  0864  2307  3188         	fcall	_LoadParamFromEPPROM
   765                           
   766                           ;main.c: 197: API_LCD_INIT();
   767  0866  223F  3188         	fcall	_API_LCD_INIT
   768                           
   769                           ;main.c: 198: API_LCD_CLEAR();
   770  0868  24EB  3188         	fcall	_API_LCD_CLEAR
   771                           
   772                           ;main.c: 199: (LATC |= (1 << 4));
   773  086A  0022               	movlb	2	; select bank2
   774  086B  160E               	bsf	14,4	;volatile
   775                           
   776                           ;main.c: 200: KaiJi();
   777  086C  2394  3188         	fcall	_KaiJi
   778  086E                     l12836:	
   779  086E  0064               	clrwdt	;#
   780                           
   781                           ;main.c: 205: SelectMode();
   782  086F  22D8  3188         	fcall	_SelectMode
   783                           
   784                           ;main.c: 206: SystemModeType = 0x01;
   785  0871  01EF               	clrf	_SystemModeType
   786  0872  0AEF               	incf	_SystemModeType,f
   787                           
   788                           ;main.c: 207: LoadCurrentDealWith();
   789  0873  230B  3188         	fcall	_LoadCurrentDealWith
   790                           
   791                           ;main.c: 208: SwitchBatteryState();
   792  0875  209C  3188         	fcall	_SwitchBatteryState
   793                           
   794                           ;main.c: 209: LedDisplay();
   795  0877  24DA  3188         	fcall	_LedDisplay
   796                           
   797                           ;main.c: 210: if(PVCount > 50)
   798  0879  3033               	movlw	51
   799  087A  0020               	movlb	0	; select bank0
   800  087B  0269               	subwf	_PVCount,w
   801  087C  1C03               	skipc
   802  087D  2881               	goto	l12854
   803                           
   804                           ;main.c: 211: {
   805                           ;main.c: 212: PVCount = 0;
   806  087E  01E9               	clrf	_PVCount
   807                           
   808                           ;main.c: 213: SolarPanelDealWith();
   809  087F  23EE  3188         	fcall	_SolarPanelDealWith
   810  0881                     l12854:	
   811                           
   812                           ;main.c: 214: }
   813                           ;main.c: 215: if(PWMChargeFlag == 1)
   814  0881  1CF1               	btfss	_PWMChargeFlag/(0+8),_PWMChargeFlag& (0+7)
   815  0882  2886               	goto	l12860
   816                           
   817                           ;main.c: 216: {
   818                           ;main.c: 217: PWMChargeFlag = 0;
   819  0883  10F1               	bcf	_PWMChargeFlag/(0+8),_PWMChargeFlag& (0+7)
   820                           
   821                           ;main.c: 218: PWMCharge();
   822  0884  24F1  3188         	fcall	_PWMCharge
   823  0886                     l12860:	
   824                           
   825                           ;main.c: 219: }
   826                           ;main.c: 223: if (lcd_extinguwish_timer == 70) {
   827  0886  0020               	movlb	0	; select bank0
   828  0887  086C               	movf	_lcd_extinguwish_timer,w
   829  0888  3A46               	xorlw	70
   830  0889  1D03               	skipz
   831  088A  288F               	goto	l12866
   832                           
   833                           ;main.c: 225: lcd_extinguwish_timer++;
   834  088B  0AEC               	incf	_lcd_extinguwish_timer,f
   835                           
   836                           ;main.c: 227: lcd_write_command(0x08);
   837  088C  3008               	movlw	8
   838  088D  224E  3188         	fcall	_lcd_write_command
   839  088F                     l12866:	
   840                           
   841                           ;main.c: 228: }
   842                           ;main.c: 230: if (isSaveSettings) {
   843  088F  1E71               	btfss	_isSaveSettings/(0+8),_isSaveSettings& (0+7)
   844  0890  2895               	goto	l12874
   845                           
   846                           ;main.c: 232: isNeedChange = 1;
   847  0891  1271               	bcf	_isSaveSettings/(0+8),_isSaveSettings& (0+7)
   848                           
   849                           ;main.c: 233: lcd_state = 2;
   850  0892  3002               	movlw	2
   851  0893  00ED               	movwf	_lcd_state
   852                           
   853                           ;main.c: 234: isSettingMode = 0;
   854  0894  12F1               	bcf	_isSettingMode/(0+8),_isSettingMode& (0+7)
   855  0895                     l12874:	
   856                           
   857                           ;main.c: 236: }
   858                           ;main.c: 238: if (isSettingMode && needInitSetting) {
   859  0895  1AF1               	btfsc	_isSettingMode/(0+8),_isSettingMode& (0+7)
   860  0896  1F71               	btfss	_needInitSetting/(0+8),_needInitSetting& (0+7)
   861  0897  286E               	goto	l12836
   862                           
   863                           ;main.c: 240: isNeedChange = 1;
   864  0898  1371               	bcf	_needInitSetting/(0+8),_needInitSetting& (0+7)
   865                           
   866                           ;main.c: 242: is_second_setting = 0;
   867  0899  3003               	movlw	3
   868  089A  00ED               	movwf	_lcd_state
   869  089B  286E               	goto	l12836
   870  089C                     __end_of_main:	
   871  089C                     __ptext1098:	
   872 ;; =============== function _SolarPanelDealWith ends ============
   873                           
   874                           
   875 ;; *************** function _SwitchBatteryState *****************
   876 ;; Defined at:
   877 ;;		line 512 in file "C:\CTK\CTK80A 150928\CTK80A_Jas\mypic.c"
   878 ;; Parameters:    Size  Location     Type
   879 ;;		None
   880 ;; Auto vars:     Size  Location     Type
   881 ;;		None
   882 ;; Return value:  Size  Location     Type
   883 ;;		None               void
   884 ;; Registers used:
   885 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   886 ;; Tracked objects:
   887 ;;		On entry : 1F/0
   888 ;;		On exit  : 1F/0
   889 ;;		Unchanged: FFFE0/0
   890 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   891 ;;      Params:         0       0       0       0
   892 ;;      Locals:         0       0       0       0
   893 ;;      Temps:          0       6       0       0
   894 ;;      Totals:         0       6       0       0
   895 ;;Total ram usage:        6 bytes
   896 ;; Hardware stack levels used:    1
   897 ;; Hardware stack levels required when called:    8
   898 ;; This function calls:
   899 ;;		_GetBatteryVoltage
   900 ;;		_BatteryStateSwitch
   901 ;;		_lcd_move_char
   902 ;;		_lcd_write_data
   903 ;;		_CTKSoftDelay
   904 ;; This function is called by:
   905 ;;		_main
   906 ;; This function uses a non-reentrant model
   907 ;;
   908  089C                     _SwitchBatteryState:	
   909                           
   910                           ;mypic.c: 513: switch(BatteryState)
   911                           
   912                           ; Regs used in _SwitchBatteryState: [wreg-status,0+pclath+cstack]
   913  089C  29BE               	goto	l12702
   914  089D                     l12428:	
   915                           
   916                           ;mypic.c: 516: {
   917                           ;mypic.c: 517: lcd_state = 0;
   918  089D  01ED               	clrf	_lcd_state
   919                           
   920                           ;mypic.c: 518: gBatteryVoltage = GetBatteryVoltage();
   921  089E  21D6  3188         	fcall	_GetBatteryVoltage
   922  08A0  083B               	movf	?_GetBatteryVoltage+1,w
   923  08A1  00E1               	movwf	_gBatteryVoltage+1
   924  08A2  083A               	movf	?_GetBatteryVoltage,w
   925  08A3  00E0               	movwf	_gBatteryVoltage
   926                           
   927                           ;mypic.c: 519: BatteryState = BatteryStateSwitch(gBatteryVoltage);
   928  08A4  26F5  3188         	fcall	PL19	;call to abstracted procedure
   929  08A6  21DD  3188         	fcall	_BatteryStateSwitch
   930  08A8  00E6               	movwf	_BatteryState
   931                           
   932                           ;mypic.c: 520: EnhanceChargeFlag = 0;
   933  08A9  10F0               	bcf	_EnhanceChargeFlag/(0+8),_EnhanceChargeFlag& (0+7)
   934                           
   935                           ;mypic.c: 521: EnhanceCharge_Time = 0;
   936                           
   937                           ;mypic.c: 522: EqualizingChargeFlag = 0;
   938                           
   939                           ;mypic.c: 523: EqualizingCharge_Time = 0;
   940                           
   941                           ;mypic.c: 524: FloatingChargeFlag = 0;
   942  08AA  26A8               	fcall	PL6	;call to abstracted procedure
   943                           
   944                           ;mypic.c: 525: BatteryLastState = 0;
   945  08AB  01E4               	clrf	_BatteryLastState
   946                           
   947                           ;mypic.c: 526: break;
   948  08AC  0008               	return
   949  08AD                     l12446:	
   950                           
   951                           ;mypic.c: 529: {
   952                           ;mypic.c: 531: if (lcd_state == 2) {
   953  08AD  086D               	movf	_lcd_state,w
   954  08AE  3A02               	xorlw	2
   955  08AF  1D03               	skipz
   956  08B0  28B7               	goto	l12450
   957                           
   958                           ;mypic.c: 533: lcd_move_char(11);
   959  08B1  300B               	movlw	11
   960  08B2  222C  3188         	fcall	_lcd_move_char
   961                           
   962                           ;mypic.c: 534: lcd_write_data(0xff);
   963  08B4  30FF               	movlw	255
   964  08B5  2221  3188         	fcall	_lcd_write_data
   965  08B7                     l12450:	
   966                           
   967                           ;mypic.c: 536: }
   968                           ;mypic.c: 537: if(BatteryLastState != 1)
   969  08B7  0364               	decf	_BatteryLastState,w
   970  08B8  1903               	skipnz
   971  08B9  28BF               	goto	l12462
   972                           
   973                           ;mypic.c: 538: {
   974                           ;mypic.c: 540: EnhanceChargeFlag = 0;
   975  08BA  10F0               	bcf	_EnhanceChargeFlag/(0+8),_EnhanceChargeFlag& (0+7)
   976                           
   977                           ;mypic.c: 541: EnhanceCharge_Time = 0;
   978                           
   979                           ;mypic.c: 542: EqualizingChargeFlag = 0;
   980                           
   981                           ;mypic.c: 543: EqualizingCharge_Time = 0;
   982                           
   983                           ;mypic.c: 544: FloatingChargeFlag = 0;
   984  08BB  26A8  3188         	fcall	PL6	;call to abstracted procedure
   985                           
   986                           ;mypic.c: 545: BatteryLastState = 1;
   987  08BD  01E4               	clrf	_BatteryLastState
   988  08BE  0AE4               	incf	_BatteryLastState,f
   989  08BF                     l12462:	
   990                           
   991                           ;mypic.c: 546: }
   992                           ;mypic.c: 547: if(PVState == 1)
   993  08BF  1C71               	btfss	_PVState/(0+8),_PVState& (0+7)
   994  08C0  28CB               	goto	l8838
   995                           
   996                           ;mypic.c: 548: {
   997                           ;mypic.c: 549: ClampVoltage = *(BatteryStandard + 6) - TemBase + TemVoltage - ADBase + A
      +                          DVoltage;
   998  08C1  0865               	movf	_BatteryStandard,w
   999  08C2  3E0C               	addlw	12
  1000  08C3  2694  3188         	fcall	PL4	;call to abstracted procedure
  1001                           
  1002                           ;mypic.c: 550: if(EnhanceChargeFlag == 0)
  1003  08C5  18F0               	btfsc	_EnhanceChargeFlag/(0+8),_EnhanceChargeFlag& (0+7)
  1004  08C6  28E5               	goto	l12484
  1005                           
  1006                           ;mypic.c: 551: {
  1007                           ;mypic.c: 552: EnhanceChargeFlag = 1;
  1008  08C7  14F0               	bsf	_EnhanceChargeFlag/(0+8),_EnhanceChargeFlag& (0+7)
  1009                           
  1010                           ;mypic.c: 553: EnhanceCharge_Time = 0;
  1011  08C8  01D4               	clrf	_EnhanceCharge_Time
  1012  08C9  01D5               	clrf	_EnhanceCharge_Time+1
  1013  08CA  28E5               	goto	l12484
  1014  08CB                     l8838:	
  1015                           
  1016                           ;mypic.c: 556: else
  1017                           ;mypic.c: 557: {
  1018                           ;mypic.c: 558: EnhanceChargeFlag = 0;
  1019  08CB  10F0               	bcf	_EnhanceChargeFlag/(0+8),_EnhanceChargeFlag& (0+7)
  1020                           
  1021                           ;mypic.c: 559: EnhanceCharge_Time = 0;
  1022  08CC  01D4               	clrf	_EnhanceCharge_Time
  1023  08CD  01D5               	clrf	_EnhanceCharge_Time+1
  1024                           
  1025                           ;mypic.c: 560: gBatteryVoltage = GetBatteryVoltage();
  1026  08CE  21D6  3188         	fcall	_GetBatteryVoltage
  1027  08D0  083B               	movf	?_GetBatteryVoltage+1,w
  1028  08D1  00E1               	movwf	_gBatteryVoltage+1
  1029                           
  1030                           ;mypic.c: 561: if(gBatteryVoltage > *(BatteryStandard + 1) - TemBase + TemVoltage - ADBa
      +                          se + ADVoltage)
  1031  08D2  26A3  3188         	fcall	PL5	;call to abstracted procedure
  1032  08D4  2681  3188         	fcall	PL3	;call to abstracted procedure
  1033  08D6  0861               	movf	_gBatteryVoltage+1,w
  1034  08D7  0242               	subwf	??_SwitchBatteryState+5,w
  1035  08D8  1D03               	skipz
  1036  08D9  28DC               	goto	u3835
  1037  08DA  0860               	movf	_gBatteryVoltage,w
  1038  08DB  0241               	subwf	??_SwitchBatteryState+4,w
  1039  08DC                     u3835:	
  1040  08DC  1803               	skipnc
  1041  08DD  28E5               	goto	l12484
  1042                           
  1043                           ;mypic.c: 562: {
  1044                           ;mypic.c: 563: BatteryState = BatteryStateSwitch(gBatteryVoltage);
  1045  08DE  0861               	movf	_gBatteryVoltage+1,w
  1046  08DF  00F7               	movwf	?_BatteryStateSwitch+1
  1047  08E0  0860               	movf	_gBatteryVoltage,w
  1048  08E1  00F6               	movwf	?_BatteryStateSwitch
  1049  08E2  21DD  3188         	fcall	_BatteryStateSwitch
  1050  08E4  00E6               	movwf	_BatteryState
  1051  08E5                     l12484:	
  1052                           
  1053                           ;mypic.c: 564: }
  1054                           ;mypic.c: 565: }
  1055                           ;mypic.c: 567: if(EnhanceCharge_Time >= 36000)
  1056  08E5  308C               	movlw	140
  1057  08E6  0255               	subwf	_EnhanceCharge_Time+1,w
  1058  08E7  30A0               	movlw	160
  1059  08E8  1903               	skipnz
  1060  08E9  0254               	subwf	_EnhanceCharge_Time,w
  1061  08EA  1C03               	skipc
  1062  08EB  0008               	return
  1063                           
  1064                           ;mypic.c: 568: {
  1065                           ;mypic.c: 569: EnhanceChargeFlag = 0;
  1066  08EC  10F0               	bcf	_EnhanceChargeFlag/(0+8),_EnhanceChargeFlag& (0+7)
  1067                           
  1068                           ;mypic.c: 570: EnhanceCharge_Time = 0;
  1069  08ED  01D4               	clrf	_EnhanceCharge_Time
  1070  08EE  01D5               	clrf	_EnhanceCharge_Time+1
  1071                           
  1072                           ;mypic.c: 571: CTKSoftDelay(100);
  1073  08EF  3064               	movlw	100
  1074  08F0  00F6               	movwf	?_CTKSoftDelay
  1075  08F1  01F7               	clrf	?_CTKSoftDelay+1
  1076  08F2  24BA  3188         	fcall	_CTKSoftDelay
  1077                           
  1078                           ;mypic.c: 572: gBatteryVoltage = GetBatteryVoltage();
  1079  08F4  21D6  3188         	fcall	_GetBatteryVoltage
  1080  08F6  083B               	movf	?_GetBatteryVoltage+1,w
  1081  08F7  00E1               	movwf	_gBatteryVoltage+1
  1082                           
  1083                           ;mypic.c: 573: if(gBatteryVoltage > *(BatteryStandard + 1) - TemBase + TemVoltage - ADBa
      +                          se + ADVoltage)
  1084  08F8  26A3  3188         	fcall	PL5	;call to abstracted procedure
  1085  08FA  2681  3188         	fcall	PL3	;call to abstracted procedure
  1086  08FC  0861               	movf	_gBatteryVoltage+1,w
  1087  08FD  0242               	subwf	??_SwitchBatteryState+5,w
  1088  08FE  1D03               	skipz
  1089  08FF  2902               	goto	u3855
  1090  0900  0860               	movf	_gBatteryVoltage,w
  1091  0901  0241               	subwf	??_SwitchBatteryState+4,w
  1092  0902                     u3855:	
  1093  0902  1803               	skipnc
  1094  0903  0008               	return
  1095  0904                     l12496:	
  1096                           
  1097                           ;mypic.c: 574: {
  1098                           ;mypic.c: 575: BatteryState = BatteryStateSwitch(gBatteryVoltage);
  1099  0904  0861               	movf	_gBatteryVoltage+1,w
  1100  0905  00F7               	movwf	?_BatteryStateSwitch+1
  1101  0906  0860               	movf	_gBatteryVoltage,w
  1102  0907  00F6               	movwf	?_BatteryStateSwitch
  1103  0908  21DD               	fcall	_BatteryStateSwitch
  1104  0909  00E6               	movwf	_BatteryState
  1105  090A  0008               	return
  1106  090B                     l12498:	
  1107                           
  1108                           ;mypic.c: 581: {
  1109                           ;mypic.c: 583: if(BatteryLastState != 2)
  1110  090B  0864               	movf	_BatteryLastState,w
  1111  090C  3A02               	xorlw	2
  1112  090D  1903               	skipnz
  1113  090E  2914               	goto	l12510
  1114                           
  1115                           ;mypic.c: 584: {
  1116                           ;mypic.c: 586: EnhanceChargeFlag = 0;
  1117  090F  10F0               	bcf	_EnhanceChargeFlag/(0+8),_EnhanceChargeFlag& (0+7)
  1118                           
  1119                           ;mypic.c: 587: EnhanceCharge_Time = 0;
  1120                           
  1121                           ;mypic.c: 588: EqualizingChargeFlag = 0;
  1122                           
  1123                           ;mypic.c: 589: EqualizingCharge_Time = 0;
  1124                           
  1125                           ;mypic.c: 590: FloatingChargeFlag = 0;
  1126  0910  26A8  3188         	fcall	PL6	;call to abstracted procedure
  1127                           
  1128                           ;mypic.c: 591: BatteryLastState = 2;
  1129  0912  3002               	movlw	2
  1130  0913  00E4               	movwf	_BatteryLastState
  1131  0914                     l12510:	
  1132                           
  1133                           ;mypic.c: 592: }
  1134                           ;mypic.c: 593: if(PVState == 1)
  1135  0914  1C71               	btfss	_PVState/(0+8),_PVState& (0+7)
  1136  0915  292F               	goto	l8846
  1137                           
  1138                           ;mypic.c: 594: {
  1139                           ;mypic.c: 595: ClampVoltage = *(BatteryStandard + 7) - TemBase + TemVoltage - ADBase + A
      +                          DVoltage;
  1140  0916  0865               	movf	_BatteryStandard,w
  1141  0917  3E0E               	addlw	14
  1142  0918  2694  3188         	fcall	PL4	;call to abstracted procedure
  1143                           
  1144                           ;mypic.c: 596: if(EqualizingChargeFlag == 0)
  1145  091A  1970               	btfsc	_EqualizingChargeFlag/(0+8),_EqualizingChargeFlag& (0+7)
  1146  091B  291F               	goto	l12524
  1147                           
  1148                           ;mypic.c: 597: {
  1149                           ;mypic.c: 598: EqualizingChargeFlag = 1;
  1150  091C  1570               	bsf	_EqualizingChargeFlag/(0+8),_EqualizingChargeFlag& (0+7)
  1151                           
  1152                           ;mypic.c: 599: EqualizingCharge_Time = 0;
  1153  091D  01D6               	clrf	_EqualizingCharge_Time
  1154  091E  01D7               	clrf	_EqualizingCharge_Time+1
  1155  091F                     l12524:	
  1156                           
  1157                           ;mypic.c: 600: }
  1158                           ;mypic.c: 601: gBatteryVoltage = GetBatteryVoltage();
  1159  091F  21D6  3188         	fcall	_GetBatteryVoltage
  1160                           
  1161                           ;mypic.c: 602: if(gBatteryVoltage < *(BatteryStandard + 0) - TemBase + TemVoltage - ADBa
      +                          se + ADVoltage)
  1162  0921  26C7  3188         	fcall	PL10	;call to abstracted procedure
  1163  0923  2681  3188         	fcall	PL3	;call to abstracted procedure
  1164  0925  0261               	subwf	_gBatteryVoltage+1,w
  1165  0926  1D03               	skipz
  1166  0927  292A               	goto	u3895
  1167  0928  0841               	movf	??_SwitchBatteryState+4,w
  1168  0929  0260               	subwf	_gBatteryVoltage,w
  1169  092A                     u3895:	
  1170  092A  1803               	skipnc
  1171  092B  293B               	goto	l12536
  1172                           
  1173                           ;mypic.c: 603: {
  1174                           ;mypic.c: 604: BatteryState = 1;
  1175  092C  01E6               	clrf	_BatteryState
  1176  092D  0AE6               	incf	_BatteryState,f
  1177  092E  293B               	goto	l12536
  1178  092F                     l8846:	
  1179                           
  1180                           ;mypic.c: 607: else
  1181                           ;mypic.c: 608: {
  1182                           ;mypic.c: 609: EqualizingChargeFlag = 0;
  1183  092F  1170               	bcf	_EqualizingChargeFlag/(0+8),_EqualizingChargeFlag& (0+7)
  1184                           
  1185                           ;mypic.c: 610: EqualizingCharge_Time = 0;
  1186  0930  01D6               	clrf	_EqualizingCharge_Time
  1187  0931  01D7               	clrf	_EqualizingCharge_Time+1
  1188                           
  1189                           ;mypic.c: 611: gBatteryVoltage = GetBatteryVoltage();
  1190  0932  21D6  3188         	fcall	_GetBatteryVoltage
  1191  0934  26F0  3188         	fcall	PL18	;call to abstracted procedure
  1192  0936                     L1:	
  1193                           
  1194                           ;mypic.c: 612: BatteryState = BatteryStateSwitch(gBatteryVoltage);
  1195  0936  26F5  3188         	fcall	PL19	;call to abstracted procedure
  1196  0938  21DD  3188         	fcall	_BatteryStateSwitch
  1197  093A  00E6               	movwf	_BatteryState
  1198  093B                     l12536:	
  1199                           
  1200                           ;mypic.c: 613: }
  1201                           ;mypic.c: 615: if(EqualizingCharge_Time >= 36000)
  1202  093B  308C               	movlw	140
  1203  093C  0257               	subwf	_EqualizingCharge_Time+1,w
  1204  093D  30A0               	movlw	160
  1205  093E  1903               	skipnz
  1206  093F  0256               	subwf	_EqualizingCharge_Time,w
  1207  0940  1C03               	skipc
  1208  0941  0008               	return
  1209                           
  1210                           ;mypic.c: 616: {
  1211                           ;mypic.c: 617: EqualizingChargeFlag = 0;
  1212  0942  1170               	bcf	_EqualizingChargeFlag/(0+8),_EqualizingChargeFlag& (0+7)
  1213                           
  1214                           ;mypic.c: 618: EqualizingCharge_Time = 0;
  1215  0943  01D6               	clrf	_EqualizingCharge_Time
  1216  0944  01D7               	clrf	_EqualizingCharge_Time+1
  1217                           
  1218                           ;mypic.c: 619: CTKSoftDelay(100);
  1219  0945  3064               	movlw	100
  1220  0946  00F6               	movwf	?_CTKSoftDelay
  1221  0947  01F7               	clrf	?_CTKSoftDelay+1
  1222  0948  24BA  3188         	fcall	_CTKSoftDelay
  1223  094A                     l12544:	
  1224                           
  1225                           ;mypic.c: 620: gBatteryVoltage = GetBatteryVoltage();
  1226  094A  21D6  3188         	fcall	_GetBatteryVoltage
  1227  094C  26F0  3188         	fcall	PL18	;call to abstracted procedure
  1228  094E  2904               	goto	l12496
  1229  094F                     l12548:	
  1230                           
  1231                           ;mypic.c: 627: {
  1232                           ;mypic.c: 628: if(BatteryLastState != 3)
  1233  094F  0864               	movf	_BatteryLastState,w
  1234  0950  3A03               	xorlw	3
  1235  0951  1903               	skipnz
  1236  0952  2958               	goto	l12560
  1237                           
  1238                           ;mypic.c: 629: {
  1239                           ;mypic.c: 631: EnhanceChargeFlag = 0;
  1240  0953  10F0               	bcf	_EnhanceChargeFlag/(0+8),_EnhanceChargeFlag& (0+7)
  1241                           
  1242                           ;mypic.c: 632: EnhanceCharge_Time = 0;
  1243                           
  1244                           ;mypic.c: 633: EqualizingChargeFlag = 0;
  1245                           
  1246                           ;mypic.c: 634: EqualizingCharge_Time = 0;
  1247                           
  1248                           ;mypic.c: 635: FloatingChargeFlag = 0;
  1249  0954  26A8  3188         	fcall	PL6	;call to abstracted procedure
  1250                           
  1251                           ;mypic.c: 636: BatteryLastState = 3;
  1252  0956  3003               	movlw	3
  1253  0957  00E4               	movwf	_BatteryLastState
  1254  0958                     l12560:	
  1255                           
  1256                           ;mypic.c: 638: }
  1257                           ;mypic.c: 639: if(PVState == 1)
  1258  0958  1C71               	btfss	_PVState/(0+8),_PVState& (0+7)
  1259  0959  292F               	goto	l8846
  1260                           
  1261                           ;mypic.c: 640: {
  1262                           ;mypic.c: 641: ClampVoltage = *(BatteryStandard + 7) - TemBase + TemVoltage - ADBase + A
      +                          DVoltage;
  1263  095A  0865               	movf	_BatteryStandard,w
  1264  095B  3E0E               	addlw	14
  1265  095C  2694  3188         	fcall	PL4	;call to abstracted procedure
  1266                           
  1267                           ;mypic.c: 642: if(EqualizingChargeFlag == 0)
  1268  095E  1970               	btfsc	_EqualizingChargeFlag/(0+8),_EqualizingChargeFlag& (0+7)
  1269  095F  2963               	goto	l12574
  1270                           
  1271                           ;mypic.c: 643: {
  1272                           ;mypic.c: 644: EqualizingChargeFlag = 1;
  1273  0960  1570               	bsf	_EqualizingChargeFlag/(0+8),_EqualizingChargeFlag& (0+7)
  1274                           
  1275                           ;mypic.c: 645: EqualizingCharge_Time = 0;
  1276  0961  01D6               	clrf	_EqualizingCharge_Time
  1277  0962  01D7               	clrf	_EqualizingCharge_Time+1
  1278  0963                     l12574:	
  1279                           
  1280                           ;mypic.c: 646: }
  1281                           ;mypic.c: 647: gBatteryVoltage = GetBatteryVoltage();
  1282  0963  21D6  3188         	fcall	_GetBatteryVoltage
  1283                           
  1284                           ;mypic.c: 648: if(gBatteryVoltage < *(BatteryStandard + 1) - TemBase + TemVoltage - ADBa
      +                          se + ADVoltage)
  1285  0965  26C7  3188         	fcall	PL10	;call to abstracted procedure
  1286  0967  3E02               	addlw	2
  1287  0968  2982               	goto	L2
  1288  0969                     l12598:	
  1289                           ;mypic.c: 659: }
  1290                           ;mypic.c: 661: if(EqualizingCharge_Time >= 36000)
  1291                           
  1292                           ;mypic.c: 649: {
  1293                           ;mypic.c: 650: BatteryState = BatteryStateSwitch(gBatteryVoltage);
  1294                           
  1295                           ;mypic.c: 657: gBatteryVoltage = GetBatteryVoltage();
  1296                           
  1297                           ;mypic.c: 656: EqualizingCharge_Time = 0;
  1298                           
  1299                           ;mypic.c: 653: else
  1300                           ;mypic.c: 654: {
  1301                           ;mypic.c: 655: EqualizingChargeFlag = 0;
  1302                           
  1303                           
  1304                           ;mypic.c: 673: {
  1305                           ;mypic.c: 674: if(BatteryLastState != 4)
  1306  0969  0864               	movf	_BatteryLastState,w
  1307  096A  3A04               	xorlw	4
  1308  096B  1903               	skipnz
  1309  096C  2972               	goto	l12610
  1310                           
  1311                           ;mypic.c: 675: {
  1312                           ;mypic.c: 677: EnhanceChargeFlag = 0;
  1313  096D  10F0               	bcf	_EnhanceChargeFlag/(0+8),_EnhanceChargeFlag& (0+7)
  1314                           
  1315                           ;mypic.c: 678: EnhanceCharge_Time = 0;
  1316                           
  1317                           ;mypic.c: 679: EqualizingChargeFlag = 0;
  1318                           
  1319                           ;mypic.c: 680: EqualizingCharge_Time = 0;
  1320                           
  1321                           ;mypic.c: 681: FloatingChargeFlag = 0;
  1322  096E  26A8  3188         	fcall	PL6	;call to abstracted procedure
  1323                           
  1324                           ;mypic.c: 682: BatteryLastState = 4;
  1325  0970  3004               	movlw	4
  1326  0971  00E4               	movwf	_BatteryLastState
  1327  0972                     l12610:	
  1328                           
  1329                           ;mypic.c: 684: }
  1330                           ;mypic.c: 685: if(PVState == 1)
  1331  0972  1C71               	btfss	_PVState/(0+8),_PVState& (0+7)
  1332  0973  292F               	goto	l8846
  1333                           
  1334                           ;mypic.c: 686: {
  1335                           ;mypic.c: 687: ClampVoltage = *(BatteryStandard + 7) - TemBase + TemVoltage - ADBase + A
      +                          DVoltage;
  1336  0974  0865               	movf	_BatteryStandard,w
  1337  0975  3E0E               	addlw	14
  1338  0976  2694  3188         	fcall	PL4	;call to abstracted procedure
  1339                           
  1340                           ;mypic.c: 688: if(EqualizingChargeFlag == 0)
  1341  0978  1970               	btfsc	_EqualizingChargeFlag/(0+8),_EqualizingChargeFlag& (0+7)
  1342  0979  297D               	goto	l12624
  1343                           
  1344                           ;mypic.c: 689: {
  1345                           ;mypic.c: 690: EqualizingChargeFlag = 1;
  1346  097A  1570               	bsf	_EqualizingChargeFlag/(0+8),_EqualizingChargeFlag& (0+7)
  1347                           
  1348                           ;mypic.c: 691: EqualizingCharge_Time = 0;
  1349  097B  01D6               	clrf	_EqualizingCharge_Time
  1350  097C  01D7               	clrf	_EqualizingCharge_Time+1
  1351  097D                     l12624:	
  1352                           
  1353                           ;mypic.c: 692: }
  1354                           ;mypic.c: 693: gBatteryVoltage = GetBatteryVoltage();
  1355  097D  21D6  3188         	fcall	_GetBatteryVoltage
  1356                           
  1357                           ;mypic.c: 694: if(gBatteryVoltage < *(BatteryStandard + 3) - TemBase + TemVoltage - ADBa
      +                          se + ADVoltage)
  1358  097F  26C7  3188         	fcall	PL10	;call to abstracted procedure
  1359  0981  3E06               	addlw	6
  1360  0982                     L2:	
  1361  0982  2681  3188         	fcall	PL3	;call to abstracted procedure
  1362  0984  0261               	subwf	_gBatteryVoltage+1,w
  1363  0985  1D03               	skipz
  1364  0986  2989               	goto	u3995
  1365  0987  0841               	movf	??_SwitchBatteryState+4,w
  1366  0988  0260               	subwf	_gBatteryVoltage,w
  1367  0989                     u3995:	
  1368  0989  1C03               	btfss	3,0
  1369  098A  2936               	goto	L1
  1370  098B  293B               	goto	l12536
  1371  098C                     l12648:	
  1372                           ;mypic.c: 705: }
  1373                           ;mypic.c: 707: if(EqualizingCharge_Time >= 36000)
  1374                           
  1375                           ;mypic.c: 695: {
  1376                           ;mypic.c: 696: BatteryState = BatteryStateSwitch(gBatteryVoltage);
  1377                           
  1378                           ;mypic.c: 703: gBatteryVoltage = GetBatteryVoltage();
  1379                           
  1380                           ;mypic.c: 702: EqualizingCharge_Time = 0;
  1381                           
  1382                           ;mypic.c: 699: else
  1383                           ;mypic.c: 700: {
  1384                           ;mypic.c: 701: EqualizingChargeFlag = 0;
  1385                           
  1386                           
  1387                           ;mypic.c: 719: {
  1388                           ;mypic.c: 720: if(BatteryLastState != 5)
  1389  098C  0864               	movf	_BatteryLastState,w
  1390  098D  3A05               	xorlw	5
  1391  098E  1903               	skipnz
  1392  098F  2995               	goto	l12660
  1393                           
  1394                           ;mypic.c: 721: {
  1395                           ;mypic.c: 723: EnhanceChargeFlag = 0;
  1396  0990  10F0               	bcf	_EnhanceChargeFlag/(0+8),_EnhanceChargeFlag& (0+7)
  1397                           
  1398                           ;mypic.c: 724: EnhanceCharge_Time = 0;
  1399                           
  1400                           ;mypic.c: 725: EqualizingChargeFlag = 0;
  1401                           
  1402                           ;mypic.c: 726: EqualizingCharge_Time = 0;
  1403                           
  1404                           ;mypic.c: 727: FloatingChargeFlag = 0;
  1405  0991  26A8  3188         	fcall	PL6	;call to abstracted procedure
  1406                           
  1407                           ;mypic.c: 728: BatteryLastState = 5;
  1408  0993  3005               	movlw	5
  1409  0994  00E4               	movwf	_BatteryLastState
  1410  0995                     l12660:	
  1411                           
  1412                           ;mypic.c: 729: }
  1413                           ;mypic.c: 730: if(PVState == 1)
  1414  0995  1C71               	btfss	_PVState/(0+8),_PVState& (0+7)
  1415  0996  299D               	goto	l8867
  1416                           
  1417                           ;mypic.c: 731: {
  1418                           ;mypic.c: 732: ClampVoltage = *(BatteryStandard + 8) - TemBase + TemVoltage - ADBase + A
      +                          DVoltage;
  1419  0997  0865               	movf	_BatteryStandard,w
  1420  0998  3E10               	addlw	16
  1421  0999  2694  3188         	fcall	PL4	;call to abstracted procedure
  1422                           
  1423                           ;mypic.c: 733: FloatingChargeFlag = 1;
  1424  099B  15F0               	bsf	_FloatingChargeFlag/(0+8),_FloatingChargeFlag& (0+7)
  1425                           
  1426                           ;mypic.c: 734: }
  1427  099C  294A               	goto	l12544
  1428  099D                     l8867:	
  1429                           
  1430                           ;mypic.c: 735: else
  1431                           ;mypic.c: 736: {
  1432                           ;mypic.c: 737: FloatingChargeFlag = 0;
  1433  099D  11F0               	bcf	_FloatingChargeFlag/(0+8),_FloatingChargeFlag& (0+7)
  1434  099E  294A               	goto	l12544
  1435  099F                     l12674:	
  1436                           
  1437                           ;mypic.c: 745: {
  1438                           ;mypic.c: 746: if(BatteryLastState != 6)
  1439  099F  0864               	movf	_BatteryLastState,w
  1440  09A0  3A06               	xorlw	6
  1441  09A1  1903               	skipnz
  1442  09A2  29B1               	goto	l12696
  1443                           
  1444                           ;mypic.c: 747: {
  1445                           ;mypic.c: 748: ClampVoltage = 0;
  1446  09A3  01D2               	clrf	_ClampVoltage
  1447  09A4  01D3               	clrf	_ClampVoltage+1
  1448                           
  1449                           ;mypic.c: 749: TMR2IE = 0;
  1450  09A5  0021               	movlb	1	; select bank1
  1451  09A6  1091               	bcf	17,1
  1452                           
  1453                           ;mypic.c: 750: T2Flag = 0;
  1454  09A7  11F1               	bcf	_T2Flag/(0+8),_T2Flag& (0+7)
  1455                           
  1456                           ;mypic.c: 751: PWMFlag = 0;
  1457  09A8  1171               	bcf	_PWMFlag/(0+8),_PWMFlag& (0+7)
  1458                           
  1459                           ;mypic.c: 752: (PORTB |= (1 << 0));
  1460  09A9  0020               	movlb	0	; select bank0
  1461  09AA  140D               	bsf	13,0	;volatile
  1462                           
  1463                           ;mypic.c: 753: (PORTA |= (1 << 0));
  1464  09AB  140C               	bsf	12,0	;volatile
  1465                           
  1466                           ;mypic.c: 755: EnhanceChargeFlag = 0;
  1467  09AC  10F0               	bcf	_EnhanceChargeFlag/(0+8),_EnhanceChargeFlag& (0+7)
  1468                           
  1469                           ;mypic.c: 756: EnhanceCharge_Time = 0;
  1470                           
  1471                           ;mypic.c: 757: EqualizingChargeFlag = 0;
  1472                           
  1473                           ;mypic.c: 758: EqualizingCharge_Time = 0;
  1474                           
  1475                           ;mypic.c: 759: FloatingChargeFlag = 0;
  1476  09AD  26A8  3188         	fcall	PL6	;call to abstracted procedure
  1477                           
  1478                           ;mypic.c: 760: BatteryLastState = 6;
  1479  09AF  3006               	movlw	6
  1480  09B0  00E4               	movwf	_BatteryLastState
  1481  09B1                     l12696:	
  1482                           
  1483                           ;mypic.c: 761: }
  1484                           ;mypic.c: 762: gBatteryVoltage = GetBatteryVoltage();
  1485  09B1  21D6  3188         	fcall	_GetBatteryVoltage
  1486                           
  1487                           ;mypic.c: 763: if(gBatteryVoltage < *(BatteryStandard + 5) - TemBase + TemVoltage - ADBa
      +                          se + ADVoltage)
  1488  09B3  26C7  3188         	fcall	PL10	;call to abstracted procedure
  1489  09B5  3E0A               	addlw	10
  1490  09B6  2681  3188         	fcall	PL3	;call to abstracted procedure
  1491  09B8  0261               	subwf	_gBatteryVoltage+1,w
  1492  09B9  1D03               	skipz
  1493  09BA  2902               	goto	u3855
  1494  09BB  0841               	movf	??_SwitchBatteryState+4,w
  1495  09BC  0260               	subwf	_gBatteryVoltage,w
  1496  09BD  2902               	goto	u3855
  1497  09BE                     l12702:	
  1498  09BE  0866               	movf	_BatteryState,w
  1499                           
  1500                           ; Switch size 1, requested type "space"
  1501                           ; Number of cases is 8, Range of values is 0 to 7
  1502                           ; switch strategies available:
  1503                           ; Name         Bytes Cycles
  1504                           ; simple_byte    25    13 (average)
  1505                           ; direct_byte    32    16 (fixed)
  1506                           ;	Chosen strategy is simple_byte
  1507  09BF  3A00               	xorlw	0	; case 0
  1508  09C0  1903               	skipnz
  1509  09C1  289D               	goto	l12428
  1510  09C2  3A01               	xorlw	1	; case 1
  1511  09C3  1903               	skipnz
  1512  09C4  28AD               	goto	l12446
  1513  09C5  3A03               	xorlw	3	; case 2
  1514  09C6  1903               	skipnz
  1515  09C7  290B               	goto	l12498
  1516  09C8  3A01               	xorlw	1	; case 3
  1517  09C9  1903               	skipnz
  1518  09CA  294F               	goto	l12548
  1519  09CB  3A07               	xorlw	7	; case 4
  1520  09CC  1903               	skipnz
  1521  09CD  2969               	goto	l12598
  1522  09CE  3A01               	xorlw	1	; case 5
  1523  09CF  1903               	skipnz
  1524  09D0  298C               	goto	l12648
  1525  09D1  3A03               	xorlw	3	; case 6
  1526  09D2  1903               	skipnz
  1527  09D3  299F               	goto	l12674
  1528  09D4  3A01               	xorlw	1	; case 7
  1529  09D5  0008               	return
  1530  09D6                     __end_of_SwitchBatteryState:	
  1531  09D6                     __ptext1104:	
  1532 ;; =============== function _GetSolarPanelVoltage ends ============
  1533                           
  1534                           
  1535 ;; *************** function _GetBatteryVoltage *****************
  1536 ;; Defined at:
  1537 ;;		line 157 in file "C:\CTK\CTK80A 150928\CTK80A_Jas\mypic.c"
  1538 ;; Parameters:    Size  Location     Type
  1539 ;;		None
  1540 ;; Auto vars:     Size  Location     Type
  1541 ;;  channel         1    0        unsigned char 
  1542 ;; Return value:  Size  Location     Type
  1543 ;;                  2   26[BANK0 ] unsigned int 
  1544 ;; Registers used:
  1545 ;;		wreg, status,2, status,0, pclath, cstack
  1546 ;; Tracked objects:
  1547 ;;		On entry : 1D/0
  1548 ;;		On exit  : 1F/0
  1549 ;;		Unchanged: FFFE0/0
  1550 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1551 ;;      Params:         0       2       0       0
  1552 ;;      Locals:         0       1       0       0
  1553 ;;      Temps:          0       0       0       0
  1554 ;;      Totals:         0       3       0       0
  1555 ;;Total ram usage:        3 bytes
  1556 ;; Hardware stack levels used:    1
  1557 ;; Hardware stack levels required when called:    7
  1558 ;; This function calls:
  1559 ;;		_getADValue
  1560 ;; This function is called by:
  1561 ;;		_PWMCharge
  1562 ;;		_SwitchBatteryState
  1563 ;;		_KaiJi
  1564 ;; This function uses a non-reentrant model
  1565 ;;
  1566  09D6                     _GetBatteryVoltage:	
  1567                           
  1568                           ;mypic.c: 159: return getADValue(channel);
  1569                           
  1570                           ; Regs used in _GetBatteryVoltage: [wreg+status,2+status,0+pclath+cstack]
  1571  09D6  3029               	movlw	41
  1572  09D7  225A               	fcall	_getADValue
  1573  09D8  082C               	movf	?_getADValue+1,w
  1574  09D9  00BB               	movwf	?_GetBatteryVoltage+1
  1575  09DA  082B               	movf	?_getADValue,w
  1576  09DB  00BA               	movwf	?_GetBatteryVoltage
  1577  09DC  0008               	return
  1578  09DD                     __end_of_GetBatteryVoltage:	
  1579  09DD                     __ptext1123:	
  1580 ;; =============== function ___wmul ends ============
  1581                           
  1582                           
  1583 ;; *************** function _BatteryStateSwitch *****************
  1584 ;; Defined at:
  1585 ;;		line 472 in file "C:\CTK\CTK80A 150928\CTK80A_Jas\mypic.c"
  1586 ;; Parameters:    Size  Location     Type
  1587 ;;  BatteryVolta    2    4[COMMON] unsigned int 
  1588 ;; Auto vars:     Size  Location     Type
  1589 ;;  adjust          2    4[BANK0 ] unsigned int 
  1590 ;; Return value:  Size  Location     Type
  1591 ;;                  1    wreg      unsigned char 
  1592 ;; Registers used:
  1593 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  1594 ;; Tracked objects:
  1595 ;;		On entry : 1F/0
  1596 ;;		On exit  : 1F/0
  1597 ;;		Unchanged: FFFE0/0
  1598 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1599 ;;      Params:         2       0       0       0
  1600 ;;      Locals:         0       2       0       0
  1601 ;;      Temps:          0       4       0       0
  1602 ;;      Totals:         2       6       0       0
  1603 ;;Total ram usage:        8 bytes
  1604 ;; Hardware stack levels used:    1
  1605 ;; Hardware stack levels required when called:    4
  1606 ;; This function calls:
  1607 ;;		Nothing
  1608 ;; This function is called by:
  1609 ;;		_SwitchBatteryState
  1610 ;; This function uses a non-reentrant model
  1611 ;;
  1612  09DD                     _BatteryStateSwitch:	
  1613                           
  1614                           ;mypic.c: 473: unsigned int adjust = (TemVoltage + ADVoltage - TemBase - ADBase );
  1615                           
  1616                           ; Regs used in _BatteryStateSwitch: [wreg+fsr1l-status,0]
  1617  09DD  094E               	comf	_ADBase,w
  1618  09DE  00A0               	movwf	??_BatteryStateSwitch
  1619  09DF  094F               	comf	_ADBase+1,w
  1620  09E0  00A1               	movwf	??_BatteryStateSwitch+1
  1621  09E1  0AA0               	incf	??_BatteryStateSwitch,f
  1622  09E2  1903               	skipnz
  1623  09E3  0AA1               	incf	??_BatteryStateSwitch+1,f
  1624  09E4  0820               	movf	??_BatteryStateSwitch,w
  1625  09E5  00A4               	movwf	BatteryStateSwitch@adjust
  1626  09E6  0821               	movf	??_BatteryStateSwitch+1,w
  1627  09E7  00A5               	movwf	BatteryStateSwitch@adjust+1
  1628  09E8  0850               	movf	_ADVoltage,w
  1629  09E9  07A4               	addwf	BatteryStateSwitch@adjust,f
  1630  09EA  0851               	movf	_ADVoltage+1,w
  1631  09EB  3DA5               	addwfc	BatteryStateSwitch@adjust+1,f
  1632                           
  1633                           ;mypic.c: 474: if(BatteryVoltage < *(BatteryStandard + 0) + adjust){
  1634  09EC  0865               	movf	_BatteryStandard,w
  1635  09ED  266F  3188         	fcall	PL2	;call to abstracted procedure
  1636  09EF  1C03               	btfss	3,0
  1637                           
  1638                           ;mypic.c: 475: return 1;
  1639  09F0  3401               	retlw	1
  1640                           
  1641                           ;mypic.c: 477: && BatteryVoltage < (*(BatteryStandard + 2) + adjust)){
  1642  09F1  0865               	movf	_BatteryStandard,w
  1643  09F2  266F  3188         	fcall	PL2	;call to abstracted procedure
  1644  09F4  0865               	movf	_BatteryStandard,w
  1645  09F5  1C03               	skipc
  1646  09F6  29FD               	goto	L6
  1647  09F7  3E04               	addlw	4
  1648  09F8  266F  3188         	fcall	PL2	;call to abstracted procedure
  1649  09FA  1C03               	btfss	3,0
  1650                           
  1651                           ;mypic.c: 478: return 2;
  1652  09FB  3402               	retlw	2
  1653                           
  1654                           ;mypic.c: 480: && BatteryVoltage <( *(BatteryStandard + 1) + adjust)){
  1655  09FC  0865               	movf	_BatteryStandard,w
  1656  09FD                     L6:	
  1657  09FD  3E04               	addlw	4
  1658  09FE  266F  3188         	fcall	PL2	;call to abstracted procedure
  1659  0A00  0865               	movf	_BatteryStandard,w
  1660  0A01  1C03               	skipc
  1661  0A02  2A09               	goto	L7
  1662  0A03  3E02               	addlw	2
  1663  0A04  266F  3188         	fcall	PL2	;call to abstracted procedure
  1664  0A06  1C03               	btfss	3,0
  1665                           
  1666                           ;mypic.c: 481: return 3;
  1667  0A07  3403               	retlw	3
  1668                           
  1669                           ;mypic.c: 483: && BatteryVoltage < (*(BatteryStandard + 3) + adjust)){
  1670  0A08  0865               	movf	_BatteryStandard,w
  1671  0A09                     L7:	
  1672  0A09  3E02               	addlw	2
  1673  0A0A  266F  3188         	fcall	PL2	;call to abstracted procedure
  1674  0A0C  0865               	movf	_BatteryStandard,w
  1675  0A0D  1C03               	skipc
  1676  0A0E  2A15               	goto	L8
  1677  0A0F  3E06               	addlw	6
  1678  0A10  266F  3188         	fcall	PL2	;call to abstracted procedure
  1679  0A12  1C03               	btfss	3,0
  1680                           
  1681                           ;mypic.c: 484: return 4;
  1682  0A13  3404               	retlw	4
  1683                           
  1684                           ;mypic.c: 486: && BatteryVoltage < (*(BatteryStandard + 4) + adjust)){
  1685  0A14  0865               	movf	_BatteryStandard,w
  1686  0A15                     L8:	
  1687  0A15  3E06               	addlw	6
  1688  0A16  266F  3188         	fcall	PL2	;call to abstracted procedure
  1689  0A18  1C03               	skipc
  1690  0A19  3406               	retlw	6
  1691  0A1A  0865               	movf	_BatteryStandard,w
  1692  0A1B  3E08               	addlw	8
  1693  0A1C  266F  3188         	fcall	PL2	;call to abstracted procedure
  1694  0A1E  1C03               	btfss	3,0
  1695                           
  1696                           ;mypic.c: 487: return 5;
  1697  0A1F  3405               	retlw	5
  1698                           
  1699                           ;mypic.c: 489: return 6;
  1700  0A20  3406               	retlw	6
  1701  0A21                     __end_of_BatteryStateSwitch:	
  1702  0A21                     __ptext1117:	
  1703 ;; =============== function _getADValueOneTime ends ============
  1704                           
  1705                           
  1706 ;; *************** function _lcd_write_data *****************
  1707 ;; Defined at:
  1708 ;;		line 27 in file "C:\CTK\CTK80A 150928\CTK80A_Jas\LM016.c"
  1709 ;; Parameters:    Size  Location     Type
  1710 ;;  data            1    wreg     unsigned char 
  1711 ;; Auto vars:     Size  Location     Type
  1712 ;;  data            1    4[BANK0 ] unsigned char 
  1713 ;; Return value:  Size  Location     Type
  1714 ;;		None               void
  1715 ;; Registers used:
  1716 ;;		wreg, status,2, status,0, pclath, cstack
  1717 ;; Tracked objects:
  1718 ;;		On entry : 1F/0
  1719 ;;		On exit  : 1F/0
  1720 ;;		Unchanged: FFFE0/0
  1721 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1722 ;;      Params:         0       0       0       0
  1723 ;;      Locals:         0       1       0       0
  1724 ;;      Temps:          0       0       0       0
  1725 ;;      Totals:         0       1       0       0
  1726 ;;Total ram usage:        1 bytes
  1727 ;; Hardware stack levels used:    1
  1728 ;; Hardware stack levels required when called:    5
  1729 ;; This function calls:
  1730 ;;		_CTKSoftDelay
  1731 ;; This function is called by:
  1732 ;;		_SwitchBatteryState
  1733 ;; This function uses a non-reentrant model
  1734 ;;
  1735  0A21                     _lcd_write_data:	
  1736                           
  1737                           ; Regs used in _lcd_write_data: [wreg+status,2+status,0+pclath+cstack]
  1738                           ;lcd_write_data@data stored from wreg
  1739  0A21  00A4               	movwf	lcd_write_data@data
  1740                           
  1741                           ;LM016.c: 28: RC1 = 1;
  1742  0A22  148E               	bsf	14,1
  1743                           
  1744                           ;LM016.c: 29: RC2 = 0;
  1745  0A23  110E               	bcf	14,2
  1746                           
  1747                           ;LM016.c: 30: PORTD = data;
  1748  0A24  008F               	movwf	15	;volatile
  1749                           
  1750                           ;LM016.c: 34: CTKSoftDelay(30);
  1751  0A25  301E               	movlw	30
  1752  0A26  00F6               	movwf	?_CTKSoftDelay
  1753  0A27  01F7               	clrf	?_CTKSoftDelay+1
  1754  0A28  24BA               	fcall	_CTKSoftDelay
  1755                           
  1756                           ;LM016.c: 35: RC3 = 1;
  1757  0A29  158E               	bsf	14,3
  1758                           
  1759                           ;LM016.c: 36: RC3 = 0;
  1760  0A2A  118E               	bcf	14,3
  1761  0A2B  0008               	return
  1762  0A2C                     __end_of_lcd_write_data:	
  1763  0A2C                     __ptext1106:	
  1764 ;; =============== function _ReadOrWriteEE ends ============
  1765                           
  1766                           
  1767 ;; *************** function _lcd_move_char *****************
  1768 ;; Defined at:
  1769 ;;		line 99 in file "C:\CTK\CTK80A 150928\CTK80A_Jas\LM016.c"
  1770 ;; Parameters:    Size  Location     Type
  1771 ;;  postion         1    wreg     unsigned char 
  1772 ;; Auto vars:     Size  Location     Type
  1773 ;;  postion         1    8[BANK0 ] unsigned char 
  1774 ;; Return value:  Size  Location     Type
  1775 ;;		None               void
  1776 ;; Registers used:
  1777 ;;		wreg, status,2, status,0, pclath, cstack
  1778 ;; Tracked objects:
  1779 ;;		On entry : 1F/0
  1780 ;;		On exit  : 1F/0
  1781 ;;		Unchanged: FFFE0/0
  1782 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1783 ;;      Params:         0       0       0       0
  1784 ;;      Locals:         0       1       0       0
  1785 ;;      Temps:          0       0       0       0
  1786 ;;      Totals:         0       1       0       0
  1787 ;;Total ram usage:        1 bytes
  1788 ;; Hardware stack levels used:    1
  1789 ;; Hardware stack levels required when called:    7
  1790 ;; This function calls:
  1791 ;;		_API_LCD_MOVE_POINT
  1792 ;; This function is called by:
  1793 ;;		_SwitchBatteryState
  1794 ;; This function uses a non-reentrant model
  1795 ;;
  1796  0A2C                     _lcd_move_char:	
  1797                           
  1798                           ; Regs used in _lcd_move_char: [wreg+status,2+status,0+pclath+cstack]
  1799                           ;lcd_move_char@postion stored from wreg
  1800  0A2C  00A8               	movwf	lcd_move_char@postion
  1801                           
  1802                           ;LM016.c: 100: API_LCD_MOVE_POINT(postion);
  1803  0A2D  2A2E               	ljmp	_API_LCD_MOVE_POINT
  1804  0A2E                     __end_of_lcd_move_char:	
  1805  0A2E                     __ptext1110:	
  1806 ;; =============== function _readIntParam ends ============
  1807                           
  1808                           
  1809 ;; *************** function _API_LCD_MOVE_POINT *****************
  1810 ;; Defined at:
  1811 ;;		line 80 in file "C:\CTK\CTK80A 150928\CTK80A_Jas\LM016.c"
  1812 ;; Parameters:    Size  Location     Type
  1813 ;;  position        1    wreg     unsigned char 
  1814 ;; Auto vars:     Size  Location     Type
  1815 ;;  position        1    6[BANK0 ] unsigned char 
  1816 ;;  i               1    7[BANK0 ] unsigned char 
  1817 ;; Return value:  Size  Location     Type
  1818 ;;		None               void
  1819 ;; Registers used:
  1820 ;;		wreg, status,2, status,0, pclath, cstack
  1821 ;; Tracked objects:
  1822 ;;		On entry : 1F/0
  1823 ;;		On exit  : 1F/0
  1824 ;;		Unchanged: FFFE0/0
  1825 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1826 ;;      Params:         0       0       0       0
  1827 ;;      Locals:         0       2       0       0
  1828 ;;      Temps:          0       1       0       0
  1829 ;;      Totals:         0       3       0       0
  1830 ;;Total ram usage:        3 bytes
  1831 ;; Hardware stack levels used:    1
  1832 ;; Hardware stack levels required when called:    6
  1833 ;; This function calls:
  1834 ;;		_lcd_write_command
  1835 ;; This function is called by:
  1836 ;;		_lcd_move_char
  1837 ;; This function uses a non-reentrant model
  1838 ;;
  1839  0A2E                     _API_LCD_MOVE_POINT:	
  1840                           
  1841                           ; Regs used in _API_LCD_MOVE_POINT: [wreg+status,2+status,0+pclath+cstack]
  1842                           ;API_LCD_MOVE_POINT@position stored from wreg
  1843  0A2E  00A6               	movwf	API_LCD_MOVE_POINT@position
  1844                           
  1845                           ;LM016.c: 81: unsigned char i = 0;
  1846  0A2F  01A7               	clrf	API_LCD_MOVE_POINT@i
  1847                           
  1848                           ;LM016.c: 82: lcd_write_command(0x0f);
  1849  0A30  300F               	movlw	15
  1850  0A31  224E  3188         	fcall	_lcd_write_command
  1851                           
  1852                           ;LM016.c: 83: lcd_write_command(0x02);
  1853  0A33  3002               	movlw	2
  1854  0A34                     L5:	
  1855  0A34  224E  3188         	fcall	_lcd_write_command
  1856  0A36  0827               	movf	API_LCD_MOVE_POINT@i,w
  1857  0A37  0AA7               	incf	API_LCD_MOVE_POINT@i,f
  1858  0A38  00A5               	movwf	??_API_LCD_MOVE_POINT
  1859  0A39  0826               	movf	API_LCD_MOVE_POINT@position,w
  1860  0A3A  0225               	subwf	??_API_LCD_MOVE_POINT,w
  1861  0A3B  1803               	btfsc	3,0
  1862  0A3C  0008               	return
  1863                           
  1864                           ;LM016.c: 85: lcd_write_command(0x14);
  1865                           
  1866                           ;LM016.c: 84: while(i++ < position) {
  1867  0A3D  3014               	movlw	20
  1868  0A3E  2A34               	goto	L5
  1869  0A3F                     __end_of_API_LCD_MOVE_POINT:	
  1870  0A3F                     __ptext1112:	
  1871 ;; =============== function _API_LCD_CLEAR ends ============
  1872                           
  1873                           
  1874 ;; *************** function _API_LCD_INIT *****************
  1875 ;; Defined at:
  1876 ;;		line 53 in file "C:\CTK\CTK80A 150928\CTK80A_Jas\LM016.c"
  1877 ;; Parameters:    Size  Location     Type
  1878 ;;		None
  1879 ;; Auto vars:     Size  Location     Type
  1880 ;;		None
  1881 ;; Return value:  Size  Location     Type
  1882 ;;		None               void
  1883 ;; Registers used:
  1884 ;;		wreg, status,2, status,0, pclath, cstack
  1885 ;; Tracked objects:
  1886 ;;		On entry : 0/0
  1887 ;;		On exit  : 1F/0
  1888 ;;		Unchanged: FFFE0/0
  1889 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1890 ;;      Params:         0       0       0       0
  1891 ;;      Locals:         0       0       0       0
  1892 ;;      Temps:          0       0       0       0
  1893 ;;      Totals:         0       0       0       0
  1894 ;;Total ram usage:        0 bytes
  1895 ;; Hardware stack levels used:    1
  1896 ;; Hardware stack levels required when called:    6
  1897 ;; This function calls:
  1898 ;;		_lcd_write_command
  1899 ;;		_CTKSoftDelay
  1900 ;; This function is called by:
  1901 ;;		_main
  1902 ;; This function uses a non-reentrant model
  1903 ;;
  1904  0A3F                     _API_LCD_INIT:	
  1905                           
  1906                           ;LM016.c: 54: lcd_write_command(0x38);
  1907                           
  1908                           ; Regs used in _API_LCD_INIT: [wreg+status,2+status,0+pclath+cstack]
  1909  0A3F  3038               	movlw	56
  1910  0A40  224E  3188         	fcall	_lcd_write_command
  1911                           
  1912                           ;LM016.c: 55: lcd_write_command(0x0c);
  1913  0A42  300C               	movlw	12
  1914  0A43  224E  3188         	fcall	_lcd_write_command
  1915                           
  1916                           ;LM016.c: 56: lcd_write_command(0x06);
  1917  0A45  3006               	movlw	6
  1918  0A46  224E  3188         	fcall	_lcd_write_command
  1919                           
  1920                           ;LM016.c: 57: lcd_write_command(0x01);
  1921  0A48  3001               	movlw	1
  1922  0A49  224E  3188         	fcall	_lcd_write_command
  1923                           
  1924                           ;LM016.c: 58: CTKSoftDelay(1000);
  1925  0A4B  26EB  3188         	fcall	PL17	;call to abstracted procedure
  1926  0A4D  2CBA               	ljmp	l11880
  1927  0A4E                     __end_of_API_LCD_INIT:	
  1928  0A4E                     __ptext1118:	
  1929 ;; =============== function _lcd_write_data ends ============
  1930                           
  1931                           
  1932 ;; *************** function _lcd_write_command *****************
  1933 ;; Defined at:
  1934 ;;		line 14 in file "C:\CTK\CTK80A 150928\CTK80A_Jas\LM016.c"
  1935 ;; Parameters:    Size  Location     Type
  1936 ;;  command         1    wreg     unsigned char 
  1937 ;; Auto vars:     Size  Location     Type
  1938 ;;  command         1    4[BANK0 ] unsigned char 
  1939 ;; Return value:  Size  Location     Type
  1940 ;;		None               void
  1941 ;; Registers used:
  1942 ;;		wreg, status,2, status,0, pclath, cstack
  1943 ;; Tracked objects:
  1944 ;;		On entry : 0/0
  1945 ;;		On exit  : 1F/0
  1946 ;;		Unchanged: FFFE0/0
  1947 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1948 ;;      Params:         0       0       0       0
  1949 ;;      Locals:         0       1       0       0
  1950 ;;      Temps:          0       0       0       0
  1951 ;;      Totals:         0       1       0       0
  1952 ;;Total ram usage:        1 bytes
  1953 ;; Hardware stack levels used:    1
  1954 ;; Hardware stack levels required when called:    5
  1955 ;; This function calls:
  1956 ;;		_CTKSoftDelay
  1957 ;; This function is called by:
  1958 ;;		_main
  1959 ;;		_API_LCD_INIT
  1960 ;;		_API_LCD_CLEAR
  1961 ;;		_API_LCD_MOVE_POINT
  1962 ;; This function uses a non-reentrant model
  1963 ;;
  1964  0A4E                     _lcd_write_command:	
  1965                           
  1966                           ; Regs used in _lcd_write_command: [wreg+status,2+status,0+pclath+cstack]
  1967                           ;lcd_write_command@command stored from wreg
  1968  0A4E  0020               	movlb	0	; select bank0
  1969  0A4F  00A4               	movwf	lcd_write_command@command
  1970                           
  1971                           ;LM016.c: 15: RC1 = 0;
  1972  0A50  108E               	bcf	14,1
  1973                           
  1974                           ;LM016.c: 16: RC2 = 0;
  1975  0A51  110E               	bcf	14,2
  1976                           
  1977                           ;LM016.c: 17: PORTD = command;
  1978  0A52  008F               	movwf	15	;volatile
  1979                           
  1980                           ;LM016.c: 21: CTKSoftDelay(50);
  1981  0A53  3032               	movlw	50
  1982  0A54  00F6               	movwf	?_CTKSoftDelay
  1983  0A55  01F7               	clrf	?_CTKSoftDelay+1
  1984  0A56  24BA               	fcall	_CTKSoftDelay
  1985                           
  1986                           ;LM016.c: 22: RC3 = 1;
  1987  0A57  158E               	bsf	14,3
  1988                           
  1989                           ;LM016.c: 23: RC3 = 0;
  1990  0A58  118E               	bcf	14,3
  1991  0A59  0008               	return
  1992  0A5A                     __end_of_lcd_write_command:	
  1993  0A5A                     __ptext1107:	
  1994 ;; =============== function _lcd_move_char ends ============
  1995                           
  1996                           
  1997 ;; *************** function _getADValue *****************
  1998 ;; Defined at:
  1999 ;;		line 137 in file "C:\CTK\CTK80A 150928\CTK80A_Jas\mypic.c"
  2000 ;; Parameters:    Size  Location     Type
  2001 ;;  channel         1    wreg     unsigned char 
  2002 ;; Auto vars:     Size  Location     Type
  2003 ;;  channel         1   15[BANK0 ] unsigned char 
  2004 ;;  AD_OneResult    2   24[BANK0 ] unsigned int 
  2005 ;;  i               2   22[BANK0 ] unsigned int 
  2006 ;;  min             2   20[BANK0 ] unsigned int 
  2007 ;;  max             2   18[BANK0 ] unsigned int 
  2008 ;;  AD_Result       2   16[BANK0 ] unsigned int 
  2009 ;; Return value:  Size  Location     Type
  2010 ;;                  2   11[BANK0 ] unsigned int 
  2011 ;; Registers used:
  2012 ;;		wreg, status,2, status,0, pclath, cstack
  2013 ;; Tracked objects:
  2014 ;;		On entry : 1D/0
  2015 ;;		On exit  : 1F/0
  2016 ;;		Unchanged: FFFE0/0
  2017 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2018 ;;      Params:         0       2       0       0
  2019 ;;      Locals:         0      11       0       0
  2020 ;;      Temps:          0       2       0       0
  2021 ;;      Totals:         0      15       0       0
  2022 ;;Total ram usage:       15 bytes
  2023 ;; Hardware stack levels used:    1
  2024 ;; Hardware stack levels required when called:    6
  2025 ;; This function calls:
  2026 ;;		_getADValueOneTime
  2027 ;; This function is called by:
  2028 ;;		_GetBatteryVoltage
  2029 ;;		_GetSolarPanelVoltage
  2030 ;;		_GetLoadCurrentVoltage
  2031 ;; This function uses a non-reentrant model
  2032 ;;
  2033  0A5A                     _getADValue:	
  2034                           
  2035                           ; Regs used in _getADValue: [wreg+status,2+status,0+pclath+cstack]
  2036                           ;getADValue@channel stored from wreg
  2037  0A5A  0020               	movlb	0	; select bank0
  2038  0A5B  00AF               	movwf	getADValue@channel
  2039                           
  2040                           ;mypic.c: 138: unsigned int AD_Result = 0;
  2041  0A5C  01B0               	clrf	getADValue@AD_Result
  2042  0A5D  01B1               	clrf	getADValue@AD_Result+1
  2043                           
  2044                           ;mypic.c: 140: unsigned int max;
  2045                           ;mypic.c: 141: unsigned int min;
  2046                           ;mypic.c: 142: unsigned int i = 0 ;
  2047  0A5E  01B6               	clrf	getADValue@i
  2048  0A5F  01B7               	clrf	getADValue@i+1
  2049                           
  2050                           ;mypic.c: 143: for (i = 0 ; i < 10; i++){
  2051  0A60  01B6               	clrf	getADValue@i
  2052  0A61  01B7               	clrf	getADValue@i+1
  2053  0A62                     l12284:	
  2054                           
  2055                           ;mypic.c: 144: AD_OneResult = getADValueOneTime(channel);
  2056  0A62  082F               	movf	getADValue@channel,w
  2057  0A63  22A8  3188         	fcall	_getADValueOneTime
  2058  0A65  0825               	movf	?_getADValueOneTime+1,w
  2059  0A66  00B9               	movwf	getADValue@AD_OneResult+1
  2060  0A67  0824               	movf	?_getADValueOneTime,w
  2061  0A68  00B8               	movwf	getADValue@AD_OneResult
  2062                           
  2063                           ;mypic.c: 145: AD_Result += AD_OneResult;
  2064  0A69  07B0               	addwf	getADValue@AD_Result,f
  2065  0A6A  0839               	movf	getADValue@AD_OneResult+1,w
  2066  0A6B  3DB1               	addwfc	getADValue@AD_Result+1,f
  2067                           
  2068                           ;mypic.c: 146: max = (max > AD_OneResult ? max : AD_OneResult);
  2069  0A6C  0833               	movf	getADValue@max+1,w
  2070  0A6D  0239               	subwf	getADValue@AD_OneResult+1,w
  2071  0A6E  1D03               	skipz
  2072  0A6F  2A72               	goto	u3595
  2073  0A70  0832               	movf	getADValue@max,w
  2074  0A71  0238               	subwf	getADValue@AD_OneResult,w
  2075  0A72                     u3595:	
  2076  0A72  0839               	movf	getADValue@AD_OneResult+1,w
  2077  0A73  1C03               	skipc
  2078  0A74  2A79               	goto	L4
  2079  0A75  00B3               	movwf	getADValue@max+1
  2080  0A76  0838               	movf	getADValue@AD_OneResult,w
  2081  0A77  00B2               	movwf	getADValue@max
  2082                           
  2083                           ;mypic.c: 147: min = (min < AD_OneResult ? min : AD_OneResult);
  2084  0A78  0839               	movf	getADValue@AD_OneResult+1,w
  2085  0A79                     L4:	
  2086  0A79  0235               	subwf	getADValue@min+1,w
  2087  0A7A  1D03               	skipz
  2088  0A7B  2A7E               	goto	u3605
  2089  0A7C  0838               	movf	getADValue@AD_OneResult,w
  2090  0A7D  0234               	subwf	getADValue@min,w
  2091  0A7E                     u3605:	
  2092  0A7E  1C03               	skipc
  2093  0A7F  2A84               	goto	l12296
  2094  0A80  0839               	movf	getADValue@AD_OneResult+1,w
  2095  0A81  00B5               	movwf	getADValue@min+1
  2096  0A82  0838               	movf	getADValue@AD_OneResult,w
  2097  0A83  00B4               	movwf	getADValue@min
  2098  0A84                     l12296:	
  2099  0A84  0AB6               	incf	getADValue@i,f
  2100  0A85  1903               	skipnz
  2101  0A86  0AB7               	incf	getADValue@i+1,f
  2102  0A87  3000               	movlw	0
  2103  0A88  0237               	subwf	getADValue@i+1,w
  2104  0A89  300A               	movlw	10
  2105  0A8A  1903               	skipnz
  2106  0A8B  0236               	subwf	getADValue@i,w
  2107  0A8C  1C03               	skipc
  2108  0A8D  2A62               	goto	l12284
  2109                           
  2110                           ;mypic.c: 148: }
  2111                           ;mypic.c: 149: return ((AD_Result - max - min) >> 3);
  2112  0A8E  0834               	movf	getADValue@min,w
  2113  0A8F  0732               	addwf	getADValue@max,w
  2114  0A90  00AD               	movwf	??_getADValue
  2115  0A91  0835               	movf	getADValue@min+1,w
  2116  0A92  3D33               	addwfc	getADValue@max+1,w
  2117  0A93  00AE               	movwf	??_getADValue+1
  2118  0A94  09AD               	comf	??_getADValue,f
  2119  0A95  09AE               	comf	??_getADValue+1,f
  2120  0A96  0AAD               	incf	??_getADValue,f
  2121  0A97  1903               	skipnz
  2122  0A98  0AAE               	incf	??_getADValue+1,f
  2123  0A99  082D               	movf	??_getADValue,w
  2124  0A9A  00AB               	movwf	?_getADValue
  2125  0A9B  082E               	movf	??_getADValue+1,w
  2126  0A9C  00AC               	movwf	?_getADValue+1
  2127  0A9D  0830               	movf	getADValue@AD_Result,w
  2128  0A9E  07AB               	addwf	?_getADValue,f
  2129  0A9F  0831               	movf	getADValue@AD_Result+1,w
  2130  0AA0  3DAC               	addwfc	?_getADValue+1,f
  2131  0AA1  36AC               	lsrf	?_getADValue+1,f
  2132  0AA2  0CAB               	rrf	?_getADValue,f
  2133  0AA3  36AC               	lsrf	?_getADValue+1,f
  2134  0AA4  0CAB               	rrf	?_getADValue,f
  2135  0AA5  36AC               	lsrf	?_getADValue+1,f
  2136  0AA6  0CAB               	rrf	?_getADValue,f
  2137  0AA7  0008               	return
  2138  0AA8                     __end_of_getADValue:	
  2139  0AA8                     __ptext1116:	
  2140 ;; =============== function ___ftdiv ends ============
  2141                           
  2142                           
  2143 ;; *************** function _getADValueOneTime *****************
  2144 ;; Defined at:
  2145 ;;		line 123 in file "C:\CTK\CTK80A 150928\CTK80A_Jas\mypic.c"
  2146 ;; Parameters:    Size  Location     Type
  2147 ;;  channel         1    wreg     unsigned char 
  2148 ;; Auto vars:     Size  Location     Type
  2149 ;;  channel         1    8[BANK0 ] unsigned char 
  2150 ;;  AD_Result       2    9[BANK0 ] unsigned int 
  2151 ;; Return value:  Size  Location     Type
  2152 ;;                  2    4[BANK0 ] unsigned int 
  2153 ;; Registers used:
  2154 ;;		wreg, status,2, status,0, pclath, cstack
  2155 ;; Tracked objects:
  2156 ;;		On entry : 1F/0
  2157 ;;		On exit  : 1F/0
  2158 ;;		Unchanged: FFFE0/0
  2159 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2160 ;;      Params:         0       2       0       0
  2161 ;;      Locals:         0       3       0       0
  2162 ;;      Temps:          0       2       0       0
  2163 ;;      Totals:         0       7       0       0
  2164 ;;Total ram usage:        7 bytes
  2165 ;; Hardware stack levels used:    1
  2166 ;; Hardware stack levels required when called:    5
  2167 ;; This function calls:
  2168 ;;		_CTKSoftDelay
  2169 ;; This function is called by:
  2170 ;;		_getADValue
  2171 ;; This function uses a non-reentrant model
  2172 ;;
  2173  0AA8                     _getADValueOneTime:	
  2174                           
  2175                           ; Regs used in _getADValueOneTime: [wreg+status,2+status,0+pclath+cstack]
  2176                           ;getADValueOneTime@channel stored from wreg
  2177  0AA8  00A8               	movwf	getADValueOneTime@channel
  2178                           
  2179                           ;mypic.c: 125: FVRCON = 0b00000000;
  2180  0AA9  0022               	movlb	2	; select bank2
  2181  0AAA  0197               	clrf	23	;volatile
  2182                           
  2183                           ;mypic.c: 126: ADCON0 = (channel & 0xff);
  2184  0AAB  0020               	movlb	0	; select bank0
  2185  0AAC  0828               	movf	getADValueOneTime@channel,w
  2186  0AAD  0021               	movlb	1	; select bank1
  2187  0AAE  009D               	movwf	29	;volatile
  2188                           
  2189                           ;mypic.c: 127: ADCON1 = 0b10010000;;
  2190  0AAF  3090               	movlw	144
  2191  0AB0  009E               	movwf	30	;volatile
  2192                           
  2193                           ;mypic.c: 128: CTKSoftDelay(20);
  2194  0AB1  3014               	movlw	20
  2195  0AB2  00F6               	movwf	?_CTKSoftDelay
  2196  0AB3  01F7               	clrf	?_CTKSoftDelay+1
  2197  0AB4  24BA  3188         	fcall	_CTKSoftDelay
  2198                           
  2199                           ;mypic.c: 129: ADGO = 1;
  2200  0AB6  0021               	movlb	1	; select bank1
  2201  0AB7  149D               	bsf	29,1
  2202  0AB8                     l8717:	
  2203                           ;mypic.c: 130: while(ADGO);
  2204                           
  2205  0AB8  189D               	btfsc	29,1
  2206  0AB9  2AB8               	goto	l8717
  2207                           
  2208                           ;mypic.c: 131: AD_Result = ADRESL & 0x00FF;
  2209  0ABA  081B               	movf	27,w	;volatile
  2210  0ABB  0020               	movlb	0	; select bank0
  2211  0ABC  00A9               	movwf	getADValueOneTime@AD_Result
  2212  0ABD  01AA               	clrf	getADValueOneTime@AD_Result+1
  2213                           
  2214                           ;mypic.c: 132: AD_Result |= ADRESH <<8 ;
  2215  0ABE  0021               	movlb	1	; select bank1
  2216  0ABF  081C               	movf	28,w	;volatile
  2217  0AC0  0020               	movlb	0	; select bank0
  2218  0AC1  00A6               	movwf	??_getADValueOneTime
  2219  0AC2  01A7               	clrf	??_getADValueOneTime+1
  2220  0AC3  3008               	movlw	8
  2221  0AC4                     u3465:	
  2222  0AC4  35A6               	lslf	??_getADValueOneTime,f
  2223  0AC5  0DA7               	rlf	??_getADValueOneTime+1,f
  2224  0AC6  0B89               	decfsz	9,f
  2225  0AC7  2AC4               	goto	u3465
  2226  0AC8  0826               	movf	??_getADValueOneTime,w
  2227  0AC9  04A9               	iorwf	getADValueOneTime@AD_Result,f
  2228  0ACA  0827               	movf	??_getADValueOneTime+1,w
  2229  0ACB  04AA               	iorwf	getADValueOneTime@AD_Result+1,f
  2230                           
  2231                           ;mypic.c: 133: ADCON0 = 0b00101000;
  2232  0ACC  3028               	movlw	40
  2233  0ACD  0021               	movlb	1	; select bank1
  2234  0ACE  009D               	movwf	29	;volatile
  2235                           
  2236                           ;mypic.c: 134: CTKSoftDelay(20);
  2237  0ACF  3014               	movlw	20
  2238  0AD0  00F6               	movwf	?_CTKSoftDelay
  2239  0AD1  01F7               	clrf	?_CTKSoftDelay+1
  2240  0AD2  24BA               	fcall	_CTKSoftDelay
  2241                           
  2242                           ;mypic.c: 135: return AD_Result;
  2243  0AD3  082A               	movf	getADValueOneTime@AD_Result+1,w
  2244  0AD4  00A5               	movwf	?_getADValueOneTime+1
  2245  0AD5  0829               	movf	getADValueOneTime@AD_Result,w
  2246  0AD6  00A4               	movwf	?_getADValueOneTime
  2247  0AD7  0008               	return
  2248  0AD8                     __end_of_getADValueOneTime:	
  2249  0AD8                     __ptext1128:	
  2250 ;; =============== function _LedDisplay ends ============
  2251                           
  2252                           
  2253 ;; *************** function _SelectMode *****************
  2254 ;; Defined at:
  2255 ;;		line 190 in file "C:\CTK\CTK80A 150928\CTK80A_Jas\mypic.c"
  2256 ;; Parameters:    Size  Location     Type
  2257 ;;		None
  2258 ;; Auto vars:     Size  Location     Type
  2259 ;;		None
  2260 ;; Return value:  Size  Location     Type
  2261 ;;		None               void
  2262 ;; Registers used:
  2263 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2264 ;; Tracked objects:
  2265 ;;		On entry : 0/0
  2266 ;;		On exit  : 1F/0
  2267 ;;		Unchanged: FFFE0/0
  2268 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2269 ;;      Params:         0       0       0       0
  2270 ;;      Locals:         0       0       0       0
  2271 ;;      Temps:          0       0       0       0
  2272 ;;      Totals:         0       0       0       0
  2273 ;;Total ram usage:        0 bytes
  2274 ;; Hardware stack levels used:    1
  2275 ;; Hardware stack levels required when called:    4
  2276 ;; This function calls:
  2277 ;;		Nothing
  2278 ;; This function is called by:
  2279 ;;		_main
  2280 ;; This function uses a non-reentrant model
  2281 ;;
  2282  0AD8                     _SelectMode:	
  2283                           
  2284                           ;mypic.c: 191: switch(SystemModeType)
  2285                           
  2286                           ; Regs used in _SelectMode: [wreg-fsr0h+status,2+status,0]
  2287  0AD8  0020               	movlb	0	; select bank0
  2288  0AD9  086F               	movf	_SystemModeType,w
  2289                           
  2290                           ; Switch size 1, requested type "space"
  2291                           ; Number of cases is 4, Range of values is 1 to 5
  2292                           ; switch strategies available:
  2293                           ; Name         Bytes Cycles
  2294                           ; simple_byte    13     7 (average)
  2295                           ; direct_byte    29    19 (fixed)
  2296                           ;	Chosen strategy is simple_byte
  2297  0ADA  3A01               	xorlw	1	; case 1
  2298  0ADB  1903               	skipnz
  2299  0ADC  2AF8               	goto	l10762
  2300  0ADD  3A03               	xorlw	3	; case 2
  2301  0ADE  1903               	skipnz
  2302  0ADF  2B02               	goto	l8757
  2303  0AE0  3A01               	xorlw	1	; case 3
  2304  0AE1  1903               	skipnz
  2305  0AE2  0008               	return
  2306  0AE3  3A06               	xorlw	6	; case 5
  2307  0AE4  1D03               	btfss	3,2
  2308  0AE5  0008               	return
  2309                           
  2310                           ;mypic.c: 194: {
  2311                           ;mypic.c: 195: if((DAYTIME == 0) && LightTime)
  2312                           
  2313                           ;mypic.c: 192: {
  2314                           ;mypic.c: 193: case 0X05:
  2315  0AE6  1870               	btfsc	_DAYTIME/(0+8),_DAYTIME& (0+7)
  2316  0AE7  2AFC               	goto	l8750
  2317  0AE8  0868               	movf	_LightTime,w
  2318  0AE9  1903               	btfsc	3,2
  2319  0AEA  2AFC               	goto	l8750
  2320                           
  2321                           ;mypic.c: 196: {
  2322                           ;mypic.c: 197: if(TimeModeHour >= 36000)
  2323  0AEB  308C               	movlw	140
  2324  0AEC  025F               	subwf	_TimeModeHour+1,w
  2325  0AED  30A0               	movlw	160
  2326  0AEE  1903               	skipnz
  2327  0AEF  025E               	subwf	_TimeModeHour,w
  2328  0AF0  1C03               	skipc
  2329  0AF1  2AF5               	goto	l10760
  2330                           
  2331                           ;mypic.c: 198: {
  2332                           ;mypic.c: 199: TimeModeHour = 0;
  2333  0AF2  01DE               	clrf	_TimeModeHour
  2334  0AF3  01DF               	clrf	_TimeModeHour+1
  2335                           
  2336                           ;mypic.c: 200: LightTime--;
  2337  0AF4  03E8               	decf	_LightTime,f
  2338  0AF5                     l10760:	
  2339                           
  2340                           ;mypic.c: 201: }
  2341                           ;mypic.c: 202: if(LightTime != 0)
  2342  0AF5  0868               	movf	_LightTime,w
  2343  0AF6  1903               	btfsc	3,2
  2344  0AF7  2AFA               	goto	l8752
  2345  0AF8                     l10762:	
  2346                           
  2347                           ;mypic.c: 203: {
  2348                           ;mypic.c: 204: LoadOpen = 1;
  2349  0AF8  16F0               	bsf	_LoadOpen/(0+8),_LoadOpen& (0+7)
  2350                           
  2351                           ;mypic.c: 205: }
  2352  0AF9  0008               	return
  2353  0AFA                     l8752:	
  2354                           
  2355                           ;mypic.c: 206: else
  2356                           ;mypic.c: 207: {
  2357                           ;mypic.c: 208: LoadOpen = 0;
  2358  0AFA  12F0               	bcf	_LoadOpen/(0+8),_LoadOpen& (0+7)
  2359  0AFB  0008               	return
  2360  0AFC                     l8750:	
  2361                           
  2362                           ;mypic.c: 211: else if(DAYTIME == 1)
  2363  0AFC  1C70               	btfss	_DAYTIME/(0+8),_DAYTIME& (0+7)
  2364  0AFD  0008               	return
  2365                           
  2366                           ;mypic.c: 212: {
  2367                           ;mypic.c: 213: LoadOpen = 0;
  2368  0AFE  12F0               	bcf	_LoadOpen/(0+8),_LoadOpen& (0+7)
  2369                           
  2370                           ;mypic.c: 215: TimeModeHour = 0;
  2371  0AFF  01DE               	clrf	_TimeModeHour
  2372  0B00  01DF               	clrf	_TimeModeHour+1
  2373  0B01  0008               	return
  2374  0B02                     l8757:	
  2375                           ;mypic.c: 218: }
  2376                           ;mypic.c: 219: case 0x02:
  2377                           
  2378                           
  2379                           ;mypic.c: 220: {
  2380                           ;mypic.c: 221: if(DAYTIME == 0)
  2381  0B02  1C70               	btfss	_DAYTIME/(0+8),_DAYTIME& (0+7)
  2382  0B03  2AF8               	goto	l10762
  2383                           
  2384                           ;mypic.c: 225: else if(DAYTIME == 1)
  2385  0B04  1C70               	btfss	_DAYTIME/(0+8),_DAYTIME& (0+7)
  2386  0B05  0008               	return
  2387  0B06  2AFA               	goto	l8752
  2388  0B07                     __end_of_SelectMode:	
  2389  0B07                     __ptext1101:	
  2390 ;; =============== function _KaiJi ends ============
  2391                           
  2392                           
  2393 ;; *************** function _LoadParamFromEPPROM *****************
  2394 ;; Defined at:
  2395 ;;		line 28 in file "C:\CTK\CTK80A 150928\CTK80A_Jas\kernel.c"
  2396 ;; Parameters:    Size  Location     Type
  2397 ;;		None
  2398 ;; Auto vars:     Size  Location     Type
  2399 ;;		None
  2400 ;; Return value:  Size  Location     Type
  2401 ;;		None               void
  2402 ;; Registers used:
  2403 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  2404 ;; Tracked objects:
  2405 ;;		On entry : 17F/0
  2406 ;;		On exit  : 0/0
  2407 ;;		Unchanged: FFE00/0
  2408 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2409 ;;      Params:         0       0       0       0
  2410 ;;      Locals:         0       0       0       0
  2411 ;;      Temps:          0       0       0       0
  2412 ;;      Totals:         0       0       0       0
  2413 ;;Total ram usage:        0 bytes
  2414 ;; Hardware stack levels used:    1
  2415 ;; Hardware stack levels required when called:    8
  2416 ;; This function calls:
  2417 ;;		_ReadOrWriteEE
  2418 ;; This function is called by:
  2419 ;;		_main
  2420 ;; This function uses a non-reentrant model
  2421 ;;
  2422  0B07                     _LoadParamFromEPPROM:	
  2423                           
  2424                           ;kernel.c: 29: ReadOrWriteEE(0);
  2425                           
  2426                           ; Regs used in _LoadParamFromEPPROM: [wreg+fsr1l-status,0+btemp+1+pclath+cstack]
  2427  0B07  0021               	movlb	1	; select bank1
  2428  0B08  01E8               	clrf	?_ReadOrWriteEE^(0+128)
  2429  0B09  01E9               	clrf	(?_ReadOrWriteEE+1)^(0+128)
  2430  0B0A  2D44               	ljmp	l12310
  2431  0B0B                     __end_of_LoadParamFromEPPROM:	
  2432  0B0B                     __ptext1099:	
  2433 ;; =============== function _SwitchBatteryState ends ============
  2434                           
  2435                           
  2436 ;; *************** function _LoadCurrentDealWith *****************
  2437 ;; Defined at:
  2438 ;;		line 246 in file "C:\CTK\CTK80A 150928\CTK80A_Jas\mypic.c"
  2439 ;; Parameters:    Size  Location     Type
  2440 ;;		None
  2441 ;; Auto vars:     Size  Location     Type
  2442 ;;  FbVoltage       2    0        unsigned int 
  2443 ;; Return value:  Size  Location     Type
  2444 ;;		None               void
  2445 ;; Registers used:
  2446 ;;		wreg, status,2, status,0, pclath, cstack
  2447 ;; Tracked objects:
  2448 ;;		On entry : 1F/0
  2449 ;;		On exit  : 1F/0
  2450 ;;		Unchanged: FFFE0/0
  2451 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2452 ;;      Params:         0       0       0       0
  2453 ;;      Locals:         0       2       0       0
  2454 ;;      Temps:          0       0       0       0
  2455 ;;      Totals:         0       2       0       0
  2456 ;;Total ram usage:        2 bytes
  2457 ;; Hardware stack levels used:    1
  2458 ;; Hardware stack levels required when called:    8
  2459 ;; This function calls:
  2460 ;;		_GetLoadCurrentVoltage
  2461 ;; This function is called by:
  2462 ;;		_main
  2463 ;; This function uses a non-reentrant model
  2464 ;;
  2465  0B0B                     _LoadCurrentDealWith:	
  2466                           
  2467                           ;mypic.c: 247: if((BatteryState != 1) && (BatteryState != 6) && LoadOpen)
  2468                           
  2469                           ; Regs used in _LoadCurrentDealWith: [wreg+status,2+status,0+pclath+cstack]
  2470  0B0B  0366               	decf	_BatteryState,w
  2471  0B0C  1903               	skipnz
  2472  0B0D  2B46               	goto	l8766
  2473  0B0E  0866               	movf	_BatteryState,w
  2474  0B0F  3A06               	xorlw	6
  2475  0B10  1D03               	btfss	3,2
  2476  0B11  1EF0               	btfss	_LoadOpen/(0+8),_LoadOpen& (0+7)
  2477  0B12  2B46               	goto	l8766
  2478  0B13  24D3  3188         	fcall	_GetLoadCurrentVoltage
  2479                           
  2480                           ;mypic.c: 253: if((FbVoltage < 134) && (LoadState == 1))
  2481  0B15  18F8               	btfsc	_LoadState/(0+8),_LoadState& (0+7)
  2482                           
  2483                           ;mypic.c: 254: {
  2484                           ;mypic.c: 255: if(LoadFlag == 1)
  2485  0B16  1C78               	btfss	_LoadFlag/(0+8),_LoadFlag& (0+7)
  2486  0B17  2B1D               	goto	l12396
  2487                           
  2488                           ;mypic.c: 256: {
  2489                           ;mypic.c: 257: LoadState = 1;
  2490  0B18  14F8               	bsf	_LoadState/(0+8),_LoadState& (0+7)
  2491                           
  2492                           ;mypic.c: 258: OverLoadTime = 0;
  2493  0B19  01D8               	clrf	_OverLoadTime
  2494  0B1A  01D9               	clrf	_OverLoadTime+1
  2495                           
  2496                           ;mypic.c: 259: (PORTA &= ~(1 << 4));
  2497  0B1B  120C               	bcf	12,4	;volatile
  2498                           
  2499                           ;mypic.c: 260: LoadFlag = 0;
  2500  0B1C  1078               	bcf	_LoadFlag/(0+8),_LoadFlag& (0+7)
  2501  0B1D                     l12396:	
  2502                           ;mypic.c: 261: }
  2503                           ;mypic.c: 262: }
  2504                           ;mypic.c: 263: if((FbVoltage >= 134) || (LoadState == 0))
  2505                           
  2506  0B1D  18F8               	btfsc	_LoadState/(0+8),_LoadState& (0+7)
  2507  0B1E  0008               	return
  2508                           
  2509                           ;mypic.c: 264: {
  2510                           ;mypic.c: 265: LoadState = 0;
  2511  0B1F  10F8               	bcf	_LoadState/(0+8),_LoadState& (0+7)
  2512                           
  2513                           ;mypic.c: 266: if(( FbVoltage >= 400) || (LoadShort == 1))
  2514  0B20  1F70               	btfss	_LoadShort/(0+8),_LoadShort& (0+7)
  2515  0B21  2B28               	goto	l12406
  2516                           
  2517                           ;mypic.c: 267: {
  2518                           ;mypic.c: 268: (PORTA |= (1 << 4));
  2519  0B22  160C               	bsf	12,4	;volatile
  2520                           
  2521                           ;mypic.c: 269: LoadFlag = 1;
  2522  0B23  1478               	bsf	_LoadFlag/(0+8),_LoadFlag& (0+7)
  2523                           
  2524                           ;mypic.c: 270: OverLoadTime = 0;
  2525  0B24  01D8               	clrf	_OverLoadTime
  2526  0B25  01D9               	clrf	_OverLoadTime+1
  2527                           
  2528                           ;mypic.c: 274: ErrorType = 5;
  2529  0B26  1770               	bsf	_LoadShort/(0+8),_LoadShort& (0+7)
  2530                           
  2531                           ;mypic.c: 275: }
  2532  0B27  0008               	return
  2533  0B28                     l12406:	
  2534                           
  2535                           ;mypic.c: 276: else
  2536                           ;mypic.c: 277: {
  2537                           ;mypic.c: 278: if(OverLoadTime == 0)
  2538  0B28  0859               	movf	_OverLoadTime+1,w
  2539  0B29  0458               	iorwf	_OverLoadTime,w
  2540  0B2A  1D03               	skipz
  2541  0B2B  2B2F               	goto	l12410
  2542                           
  2543                           ;mypic.c: 279: {
  2544                           ;mypic.c: 280: OverLoadTime = 1;
  2545  0B2C  01D8               	clrf	_OverLoadTime
  2546  0B2D  0AD8               	incf	_OverLoadTime,f
  2547  0B2E  01D9               	clrf	_OverLoadTime+1
  2548  0B2F                     l12410:	
  2549                           
  2550                           ;mypic.c: 281: }
  2551                           ;mypic.c: 282: if(OverLoadTime >= 3000)
  2552  0B2F  300B               	movlw	11
  2553  0B30  0259               	subwf	_OverLoadTime+1,w
  2554  0B31  30B8               	movlw	184
  2555  0B32  1903               	skipnz
  2556  0B33  0258               	subwf	_OverLoadTime,w
  2557  0B34  1C03               	skipc
  2558  0B35  0008               	return
  2559                           
  2560                           ;mypic.c: 283: {
  2561                           ;mypic.c: 284: OverLoadTime = 1;
  2562  0B36  01D8               	clrf	_OverLoadTime
  2563  0B37  0AD8               	incf	_OverLoadTime,f
  2564  0B38  01D9               	clrf	_OverLoadTime+1
  2565                           
  2566                           ;mypic.c: 285: if(LoadFlag == 0)
  2567  0B39  1878               	btfsc	_LoadFlag/(0+8),_LoadFlag& (0+7)
  2568  0B3A  2B3E               	goto	l8778
  2569                           
  2570                           ;mypic.c: 286: {
  2571                           ;mypic.c: 287: (PORTA |= (1 << 4));
  2572  0B3B  160C               	bsf	12,4	;volatile
  2573                           
  2574                           ;mypic.c: 288: LoadFlag = 1;
  2575  0B3C  1478               	bsf	_LoadFlag/(0+8),_LoadFlag& (0+7)
  2576                           
  2577                           ;mypic.c: 289: }
  2578  0B3D  0008               	return
  2579  0B3E                     l8778:	
  2580                           
  2581                           ;mypic.c: 290: else if(LoadFlag == 1)
  2582  0B3E  1C78               	btfss	_LoadFlag/(0+8),_LoadFlag& (0+7)
  2583  0B3F  0008               	return
  2584                           
  2585                           ;mypic.c: 291: {
  2586                           ;mypic.c: 292: (PORTA &= ~(1 << 4));
  2587  0B40  120C               	bcf	12,4	;volatile
  2588                           
  2589                           ;mypic.c: 293: LoadFlag = 0;
  2590  0B41  1078               	bcf	_LoadFlag/(0+8),_LoadFlag& (0+7)
  2591                           
  2592                           ;mypic.c: 294: LoadState = 1;
  2593  0B42  14F8               	bsf	_LoadState/(0+8),_LoadState& (0+7)
  2594                           
  2595                           ;mypic.c: 295: OverLoadTime = 0;
  2596  0B43  01D8               	clrf	_OverLoadTime
  2597  0B44  01D9               	clrf	_OverLoadTime+1
  2598  0B45  0008               	return
  2599  0B46                     l8766:	
  2600                           
  2601                           ;mypic.c: 301: else
  2602                           ;mypic.c: 302: {
  2603                           ;mypic.c: 303: (PORTA |= (1 << 4));
  2604  0B46  160C               	bsf	12,4	;volatile
  2605                           
  2606                           ;mypic.c: 304: LoadFlag = 1;
  2607  0B47  1478               	bsf	_LoadFlag/(0+8),_LoadFlag& (0+7)
  2608                           
  2609                           ;mypic.c: 305: OverLoadTime = 0;
  2610  0B48  01D8               	clrf	_OverLoadTime
  2611  0B49  01D9               	clrf	_OverLoadTime+1
  2612                           
  2613                           ;mypic.c: 306: LoadState = 1;
  2614  0B4A  14F8               	bsf	_LoadState/(0+8),_LoadState& (0+7)
  2615  0B4B  0008               	return
  2616  0B4C                     __end_of_LoadCurrentDealWith:	
  2617  0B4C                     __ptext1119:	
  2618 ;; =============== function _lcd_write_command ends ============
  2619                           
  2620                           
  2621 ;; *************** function _system_state_init *****************
  2622 ;; Defined at:
  2623 ;;		line 42 in file "C:\CTK\CTK80A 150928\CTK80A_Jas\mypic.c"
  2624 ;; Parameters:    Size  Location     Type
  2625 ;;		None
  2626 ;; Auto vars:     Size  Location     Type
  2627 ;;		None
  2628 ;; Return value:  Size  Location     Type
  2629 ;;		None               void
  2630 ;; Registers used:
  2631 ;;		wreg, status,2, status,0, pclath, cstack
  2632 ;; Tracked objects:
  2633 ;;		On entry : 17F/0
  2634 ;;		On exit  : 17F/0
  2635 ;;		Unchanged: FFE80/0
  2636 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2637 ;;      Params:         0       0       0       0
  2638 ;;      Locals:         0       0       0       0
  2639 ;;      Temps:          0       0       0       0
  2640 ;;      Totals:         0       0       0       0
  2641 ;;Total ram usage:        0 bytes
  2642 ;; Hardware stack levels used:    1
  2643 ;; Hardware stack levels required when called:    5
  2644 ;; This function calls:
  2645 ;;		_CTKSoftDelay
  2646 ;; This function is called by:
  2647 ;;		_main
  2648 ;; This function uses a non-reentrant model
  2649 ;;
  2650  0B4C                     _system_state_init:	
  2651                           
  2652                           ;mypic.c: 44: OSCCON = 0x70;
  2653                           
  2654                           ; Regs used in _system_state_init: [wreg+status,2+status,0+pclath+cstack]
  2655  0B4C  3070               	movlw	112
  2656  0B4D  0021               	movlb	1	; select bank1
  2657  0B4E  0099               	movwf	25	;volatile
  2658                           
  2659                           ;mypic.c: 45: WDTCON = 0x18;
  2660  0B4F  3018               	movlw	24
  2661  0B50  0097               	movwf	23	;volatile
  2662                           
  2663                           ;mypic.c: 48: TRISA = 0b00101010;
  2664  0B51  302A               	movlw	42
  2665  0B52  008C               	movwf	12	;volatile
  2666                           
  2667                           ;mypic.c: 49: TRISB = 0b00111110;
  2668  0B53  303E               	movlw	62
  2669  0B54  008D               	movwf	13	;volatile
  2670                           
  2671                           ;mypic.c: 50: TRISC = 0x00;
  2672  0B55  018E               	clrf	14	;volatile
  2673                           
  2674                           ;mypic.c: 51: TRISD = 0x00;
  2675  0B56  018F               	clrf	15	;volatile
  2676                           
  2677                           ;mypic.c: 52: TRISE = 0b00000010;
  2678  0B57  3002               	movlw	2
  2679  0B58  0090               	movwf	16	;volatile
  2680                           
  2681                           ;mypic.c: 54: ANSELA = 0b00101010;
  2682  0B59  302A               	movlw	42
  2683  0B5A  0023               	movlb	3	; select bank3
  2684  0B5B  008C               	movwf	12	;volatile
  2685                           
  2686                           ;mypic.c: 55: ANSELB = 0b00000110;
  2687  0B5C  3006               	movlw	6
  2688  0B5D  008D               	movwf	13	;volatile
  2689                           
  2690                           ;mypic.c: 56: ANSELE = 0b00000010;
  2691  0B5E  3002               	movlw	2
  2692  0B5F  0090               	movwf	16	;volatile
  2693                           
  2694                           ;mypic.c: 66: TMR1H = (65536 - (100000 / 4)) >> 8;
  2695  0B60  309E               	movlw	158
  2696  0B61  0020               	movlb	0	; select bank0
  2697  0B62  0097               	movwf	23	;volatile
  2698                           
  2699                           ;mypic.c: 67: TMR1L = (65536 - (100000 / 4)) & 0xFF;
  2700  0B63  3058               	movlw	88
  2701  0B64  0096               	movwf	22	;volatile
  2702                           
  2703                           ;mypic.c: 68: PEIE = 1;
  2704  0B65  170B               	bsf	11,6
  2705                           
  2706                           ;mypic.c: 69: TMR1IF = 0;
  2707  0B66  1011               	bcf	17,0
  2708                           
  2709                           ;mypic.c: 70: TMR1IE = 1;
  2710  0B67  0021               	movlb	1	; select bank1
  2711  0B68  1411               	bsf	17,0
  2712                           
  2713                           ;mypic.c: 71: T1CON = 0x31;
  2714  0B69  3031               	movlw	49
  2715  0B6A  0020               	movlb	0	; select bank0
  2716  0B6B  0098               	movwf	24	;volatile
  2717                           
  2718                           ;mypic.c: 72: TMR0IE = 1;
  2719  0B6C  168B               	bsf	11,5
  2720                           
  2721                           ;mypic.c: 75: TMR2IF = 0;
  2722  0B6D  1091               	bcf	17,1
  2723                           
  2724                           ;mypic.c: 76: T2CON = 0x06;
  2725  0B6E  3006               	movlw	6
  2726  0B6F  009C               	movwf	28	;volatile
  2727                           
  2728                           ;mypic.c: 77: PR2 = 8;
  2729  0B70  3008               	movlw	8
  2730  0B71  009B               	movwf	27	;volatile
  2731                           
  2732                           ;mypic.c: 78: TMR2IE = 1;
  2733  0B72  0021               	movlb	1	; select bank1
  2734  0B73  1491               	bsf	17,1
  2735                           
  2736                           ;mypic.c: 82: TMR4IF = 0;
  2737  0B74  0020               	movlb	0	; select bank0
  2738  0B75  1093               	bcf	19,1
  2739                           
  2740                           ;mypic.c: 85: T4CON = 0b00000101;
  2741  0B76  3005               	movlw	5
  2742  0B77  0028               	movlb	8	; select bank8
  2743  0B78  0097               	movwf	23	;volatile
  2744                           
  2745                           ;mypic.c: 86: PR4 = 250;
  2746  0B79  30FA               	movlw	250
  2747  0B7A  0096               	movwf	22	;volatile
  2748                           
  2749                           ;mypic.c: 87: TMR4IE = 1;
  2750  0B7B  0021               	movlb	1	; select bank1
  2751  0B7C  1493               	bsf	19,1
  2752                           
  2753                           ;mypic.c: 100: IOCBP = 0x38;
  2754  0B7D  3038               	movlw	56
  2755  0B7E  0027               	movlb	7	; select bank7
  2756  0B7F  0094               	movwf	20	;volatile
  2757                           
  2758                           ;mypic.c: 101: IOCBN = 0x38;
  2759  0B80  0095               	movwf	21	;volatile
  2760                           
  2761                           ;mypic.c: 105: PEIE = 1;
  2762  0B81  170B               	bsf	11,6
  2763                           
  2764                           ;mypic.c: 106: GIE = 1;
  2765  0B82  178B               	bsf	11,7
  2766                           
  2767                           ;mypic.c: 109: (PORTA |= (1 << 0));
  2768  0B83  0020               	movlb	0	; select bank0
  2769  0B84  140C               	bsf	12,0	;volatile
  2770                           
  2771                           ;mypic.c: 110: (PORTB |= (1 << 0));
  2772  0B85  140D               	bsf	13,0	;volatile
  2773                           
  2774                           ;mypic.c: 111: (PORTA |= (1 << 4));
  2775  0B86  160C               	bsf	12,4	;volatile
  2776                           
  2777                           ;mypic.c: 112: LoadFlag = 1;
  2778  0B87  1478               	bsf	_LoadFlag/(0+8),_LoadFlag& (0+7)
  2779                           
  2780                           ;mypic.c: 113: LoadState = 1;
  2781  0B88  14F8               	bsf	_LoadState/(0+8),_LoadState& (0+7)
  2782                           
  2783                           ;mypic.c: 114: (PORTE |= (1 << 0));
  2784  0B89  1410               	bsf	16,0	;volatile
  2785                           
  2786                           ;mypic.c: 115: CTKSoftDelay(20);
  2787  0B8A  3014               	movlw	20
  2788  0B8B  00F6               	movwf	?_CTKSoftDelay
  2789  0B8C  01F7               	clrf	?_CTKSoftDelay+1
  2790  0B8D  24BA  3188         	fcall	_CTKSoftDelay
  2791                           
  2792                           ;mypic.c: 116: (PORTE &= ~(1 << 0));
  2793  0B8F  1010               	bcf	16,0	;volatile
  2794                           
  2795                           ;mypic.c: 117: CTKSoftDelay(20);
  2796  0B90  3014               	movlw	20
  2797  0B91  00F6               	movwf	?_CTKSoftDelay
  2798  0B92  01F7               	clrf	?_CTKSoftDelay+1
  2799  0B93  2CBA               	ljmp	l11880
  2800  0B94                     __end_of_system_state_init:	
  2801  0B94                     __ptext1100:	
  2802 ;; =============== function _LoadCurrentDealWith ends ============
  2803                           
  2804                           
  2805 ;; *************** function _KaiJi *****************
  2806 ;; Defined at:
  2807 ;;		line 778 in file "C:\CTK\CTK80A 150928\CTK80A_Jas\mypic.c"
  2808 ;; Parameters:    Size  Location     Type
  2809 ;;		None
  2810 ;; Auto vars:     Size  Location     Type
  2811 ;;		None
  2812 ;; Return value:  Size  Location     Type
  2813 ;;		None               void
  2814 ;; Registers used:
  2815 ;;		wreg, status,2, status,0, pclath, cstack
  2816 ;; Tracked objects:
  2817 ;;		On entry : 1F/2
  2818 ;;		On exit  : 1F/0
  2819 ;;		Unchanged: FFFE0/0
  2820 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2821 ;;      Params:         0       0       0       0
  2822 ;;      Locals:         0       0       0       0
  2823 ;;      Temps:          0       2       0       0
  2824 ;;      Totals:         0       2       0       0
  2825 ;;Total ram usage:        2 bytes
  2826 ;; Hardware stack levels used:    1
  2827 ;; Hardware stack levels required when called:    8
  2828 ;; This function calls:
  2829 ;;		_GetBatteryVoltage
  2830 ;;		_GetSolarPanelVoltage
  2831 ;;		___wmul
  2832 ;;		_GetLoadCurrentVoltage
  2833 ;; This function is called by:
  2834 ;;		_main
  2835 ;; This function uses a non-reentrant model
  2836 ;;
  2837  0B94                     _KaiJi:	
  2838                           
  2839                           ;mypic.c: 782: gBatteryVoltage = GetBatteryVoltage();
  2840                           
  2841                           ; Regs used in _KaiJi: [wreg+status,2+status,0+pclath+cstack]
  2842  0B94  21D6  3188         	fcall	_GetBatteryVoltage
  2843  0B96  083B               	movf	?_GetBatteryVoltage+1,w
  2844  0B97  00E1               	movwf	_gBatteryVoltage+1
  2845  0B98  083A               	movf	?_GetBatteryVoltage,w
  2846  0B99  00E0               	movwf	_gBatteryVoltage
  2847                           
  2848                           ;mypic.c: 783: if(gBatteryVoltage < 391)
  2849  0B9A  3001               	movlw	1
  2850  0B9B  0261               	subwf	_gBatteryVoltage+1,w
  2851  0B9C  3087               	movlw	135
  2852  0B9D  1903               	skipnz
  2853  0B9E  0260               	subwf	_gBatteryVoltage,w
  2854  0B9F  1803               	skipnc
  2855  0BA0  2BA3               	goto	l12354
  2856                           
  2857                           ;mypic.c: 787: System24V = 0;
  2858  0BA1  30A0               	movlw	_Battery_12V& (0+255)
  2859  0BA2  2BB2               	goto	L3
  2860  0BA3                     l12354:	
  2861                           ;mypic.c: 788: }
  2862                           
  2863                           
  2864                           ;mypic.c: 789: else if((gBatteryVoltage < 782) && (gBatteryVoltage > 512))
  2865  0BA3  3003               	movlw	3
  2866  0BA4  0261               	subwf	_gBatteryVoltage+1,w
  2867  0BA5  300E               	movlw	14
  2868  0BA6  1903               	skipnz
  2869  0BA7  0260               	subwf	_gBatteryVoltage,w
  2870  0BA8  1803               	skipnc
  2871  0BA9  2BB3               	goto	l12360
  2872  0BAA  3002               	movlw	2
  2873  0BAB  0261               	subwf	_gBatteryVoltage+1,w
  2874  0BAC  3001               	movlw	1
  2875  0BAD  1903               	skipnz
  2876  0BAE  0260               	subwf	_gBatteryVoltage,w
  2877  0BAF  1C03               	skipc
  2878  0BB0  2BB3               	goto	l12360
  2879                           
  2880                           ;mypic.c: 793: System24V = 1;
  2881  0BB1  30B6               	movlw	_Battery_24V& (0+255)
  2882  0BB2                     L3:	
  2883  0BB2  00E5               	movwf	_BatteryStandard
  2884  0BB3                     l12360:	
  2885                           ;mypic.c: 794: }
  2886                           
  2887                           
  2888                           ;mypic.c: 801: }
  2889                           ;mypic.c: 805: SDSolarPanelVoltage = GetSolarPanelVoltage();
  2890  0BB3  24B3  3188         	fcall	_GetSolarPanelVoltage
  2891  0BB5  083B               	movf	?_GetSolarPanelVoltage+1,w
  2892  0BB6  00DD               	movwf	_SDSolarPanelVoltage+1
  2893  0BB7  083A               	movf	?_GetSolarPanelVoltage,w
  2894  0BB8  00DC               	movwf	_SDSolarPanelVoltage
  2895                           
  2896                           ;mypic.c: 806: SDBatteryVoltage = GetBatteryVoltage();
  2897  0BB9  21D6  3188         	fcall	_GetBatteryVoltage
  2898  0BBB  083B               	movf	?_GetBatteryVoltage+1,w
  2899  0BBC  00DB               	movwf	_SDBatteryVoltage+1
  2900  0BBD  083A               	movf	?_GetBatteryVoltage,w
  2901  0BBE  00DA               	movwf	_SDBatteryVoltage
  2902                           
  2903                           ;mypic.c: 807: if((SDSolarPanelVoltage*47) < ((SDBatteryVoltage*48) - 2400)
  2904                           ;mypic.c: 808: || (SDSolarPanelVoltage*47) > ((SDBatteryVoltage*48) + 2400))
  2905  0BBF  085B               	movf	_SDBatteryVoltage+1,w
  2906  0BC0  26E4  3188         	fcall	PL15	;call to abstracted procedure
  2907  0BC2  249E  3188         	fcall	___wmul
  2908  0BC4  0820               	movf	?___wmul,w
  2909  0BC5  3EA0               	addlw	160
  2910  0BC6  00BD               	movwf	??_KaiJi
  2911  0BC7  30F6               	movlw	246
  2912  0BC8  3D21               	addwfc	?___wmul+1,w
  2913  0BC9  00BE               	movwf	??_KaiJi+1
  2914  0BCA  26D5  3188         	fcall	PL12	;call to abstracted procedure
  2915  0BCC  249E  3188         	fcall	___wmul
  2916  0BCE  083E               	movf	??_KaiJi+1,w
  2917  0BCF  0221               	subwf	?___wmul+1,w
  2918  0BD0  1D03               	skipz
  2919  0BD1  2BD4               	goto	u3675
  2920  0BD2  083D               	movf	??_KaiJi,w
  2921  0BD3  0220               	subwf	?___wmul,w
  2922  0BD4                     u3675:	
  2923  0BD4  1C03               	skipc
  2924  0BD5  2BDF               	goto	l12364
  2925  0BD6  085B               	movf	_SDBatteryVoltage+1,w
  2926  0BD7  26E4  3188         	fcall	PL15	;call to abstracted procedure
  2927  0BD9  249E  3188         	fcall	___wmul
  2928  0BDB  26D5  3188         	fcall	PL12	;call to abstracted procedure
  2929  0BDD  249E  3188         	fcall	___wmul
  2930  0BDF                     l12364:	
  2931                           
  2932                           ;mypic.c: 814: }
  2933                           ;mypic.c: 815: gFbVoltage = GetLoadCurrentVoltage();
  2934  0BDF  24D3               	fcall	_GetLoadCurrentVoltage
  2935  0BE0  083B               	movf	?_GetLoadCurrentVoltage+1,w
  2936  0BE1  0021               	movlb	1	; select bank1
  2937  0BE2  00E7               	movwf	(_gFbVoltage+1)^(0+128)
  2938  0BE3  0020               	movlb	0	; select bank0
  2939  0BE4  083A               	movf	?_GetLoadCurrentVoltage,w
  2940  0BE5  0021               	movlb	1	; select bank1
  2941  0BE6  00E6               	movwf	_gFbVoltage^(0+128)
  2942                           
  2943                           ;mypic.c: 822: }
  2944                           ;mypic.c: 823: ADVoltage = 0;
  2945  0BE7  0020               	movlb	0	; select bank0
  2946  0BE8  01D0               	clrf	_ADVoltage
  2947  0BE9  01D1               	clrf	_ADVoltage+1
  2948                           
  2949                           ;mypic.c: 824: ADBase = 0;
  2950  0BEA  01CE               	clrf	_ADBase
  2951  0BEB  01CF               	clrf	_ADBase+1
  2952                           
  2953                           ;mypic.c: 825: PVCount = 0;
  2954  0BEC  01E9               	clrf	_PVCount
  2955  0BED  0008               	return
  2956  0BEE                     __end_of_KaiJi:	
  2957  0BEE                     __ptext1097:	
  2958 ;; =============== function _PWMCharge ends ============
  2959                           
  2960                           
  2961 ;; *************** function _SolarPanelDealWith *****************
  2962 ;; Defined at:
  2963 ;;		line 312 in file "C:\CTK\CTK80A 150928\CTK80A_Jas\mypic.c"
  2964 ;; Parameters:    Size  Location     Type
  2965 ;;		None
  2966 ;; Auto vars:     Size  Location     Type
  2967 ;;  SolarPanelVo    2   35[BANK0 ] unsigned int 
  2968 ;; Return value:  Size  Location     Type
  2969 ;;		None               void
  2970 ;; Registers used:
  2971 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2972 ;; Tracked objects:
  2973 ;;		On entry : 1F/0
  2974 ;;		On exit  : 1F/0
  2975 ;;		Unchanged: FFFE0/0
  2976 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2977 ;;      Params:         0       0       0       0
  2978 ;;      Locals:         0       2       0       0
  2979 ;;      Temps:          0       6       0       0
  2980 ;;      Totals:         0       8       0       0
  2981 ;;Total ram usage:        8 bytes
  2982 ;; Hardware stack levels used:    1
  2983 ;; Hardware stack levels required when called:    8
  2984 ;; This function calls:
  2985 ;;		_CTKSoftDelay
  2986 ;;		_GetSolarPanelVoltage
  2987 ;;		___wmul
  2988 ;; This function is called by:
  2989 ;;		_main
  2990 ;; This function uses a non-reentrant model
  2991 ;;
  2992  0BEE                     _SolarPanelDealWith:	
  2993                           
  2994                           ;mypic.c: 313: unsigned int SolarPanelVoltage;
  2995                           ;mypic.c: 314: if(PWMFlag == 0)
  2996                           
  2997                           ; Regs used in _SolarPanelDealWith: [wreg+fsr1l-status,0+pclath+cstack]
  2998  0BEE  1971               	btfsc	_PWMFlag/(0+8),_PWMFlag& (0+7)
  2999  0BEF  2C21               	goto	l12742
  3000                           
  3001                           ;mypic.c: 315: {
  3002                           ;mypic.c: 316: if(DutyRatio > 249)
  3003  0BF0  30FA               	movlw	250
  3004  0BF1  0279               	subwf	_DutyRatio,w
  3005  0BF2  1C03               	skipc
  3006  0BF3  2C05               	goto	l12716
  3007                           
  3008                           ;mypic.c: 317: {
  3009                           ;mypic.c: 318: (PORTB |= (1 << 0));
  3010  0BF4  140D               	bsf	13,0	;volatile
  3011                           
  3012                           ;mypic.c: 319: CTKSoftDelay(200);
  3013  0BF5  30C8               	movlw	200
  3014  0BF6  00F6               	movwf	?_CTKSoftDelay
  3015  0BF7  01F7               	clrf	?_CTKSoftDelay+1
  3016  0BF8  24BA  3188         	fcall	_CTKSoftDelay
  3017                           
  3018                           ;mypic.c: 320: SolarPanelVoltage = GetSolarPanelVoltage();
  3019  0BFA  24B3  3188         	fcall	_GetSolarPanelVoltage
  3020  0BFC  083B               	movf	?_GetSolarPanelVoltage+1,w
  3021  0BFD  00C4               	movwf	SolarPanelDealWith@SolarPanelVoltage+1
  3022  0BFE  083A               	movf	?_GetSolarPanelVoltage,w
  3023  0BFF  00C3               	movwf	SolarPanelDealWith@SolarPanelVoltage
  3024                           
  3025                           ;mypic.c: 321: gSolarPanelVoltage = SolarPanelVoltage;
  3026  0C00  0844               	movf	SolarPanelDealWith@SolarPanelVoltage+1,w
  3027  0C01  00E3               	movwf	_gSolarPanelVoltage+1
  3028  0C02  0843               	movf	SolarPanelDealWith@SolarPanelVoltage,w
  3029  0C03  00E2               	movwf	_gSolarPanelVoltage
  3030                           
  3031                           ;mypic.c: 322: (PORTB &= ~(1 << 0));
  3032  0C04  100D               	bcf	13,0	;volatile
  3033  0C05                     l12716:	
  3034                           
  3035                           ;mypic.c: 323: }
  3036                           ;mypic.c: 324: if(DutyRatio == 0)
  3037  0C05  08F9               	movf	_DutyRatio,f
  3038  0C06  1D03               	skipz
  3039  0C07  2C21               	goto	l12742
  3040                           
  3041                           ;mypic.c: 325: {
  3042                           ;mypic.c: 326: (PORTB |= (1 << 0));
  3043  0C08  140D               	bsf	13,0	;volatile
  3044                           
  3045                           ;mypic.c: 327: if(LPVCount == 0)
  3046  0C09  08E7               	movf	_LPVCount,f
  3047  0C0A  1D03               	skipz
  3048  0C0B  2C16               	goto	l8788
  3049                           
  3050                           ;mypic.c: 328: {
  3051                           ;mypic.c: 329: (PORTA &= ~(1 << 0));
  3052  0C0C  100C               	bcf	12,0	;volatile
  3053                           
  3054                           ;mypic.c: 330: CTKSoftDelay(1000);
  3055  0C0D  26EB  3188         	fcall	PL17	;call to abstracted procedure
  3056  0C0F  24BA  3188         	fcall	_CTKSoftDelay
  3057                           
  3058                           ;mypic.c: 331: SolarPanelVoltage = GetSolarPanelVoltage();
  3059  0C11  24B3  3188         	fcall	_GetSolarPanelVoltage
  3060                           
  3061                           ;mypic.c: 332: gSolarPanelVoltage = SolarPanelVoltage;
  3062                           
  3063                           ;mypic.c: 333: (PORTA |= (1 << 0));
  3064  0C13  26AF  3188         	fcall	PL7	;call to abstracted procedure
  3065                           
  3066                           ;mypic.c: 334: }
  3067  0C15  2C21               	goto	l12742
  3068  0C16                     l8788:	
  3069                           
  3070                           ;mypic.c: 335: else
  3071                           ;mypic.c: 336: {
  3072                           ;mypic.c: 337: (PORTA &= ~(1 << 0));
  3073  0C16  100C               	bcf	12,0	;volatile
  3074                           
  3075                           ;mypic.c: 338: if(LPVCount > 99)
  3076  0C17  3064               	movlw	100
  3077  0C18  0267               	subwf	_LPVCount,w
  3078  0C19  1C03               	skipc
  3079  0C1A  2C21               	goto	l12742
  3080                           
  3081                           ;mypic.c: 339: {
  3082                           ;mypic.c: 340: LPVCount = 0;
  3083  0C1B  01E7               	clrf	_LPVCount
  3084                           
  3085                           ;mypic.c: 341: SolarPanelVoltage = GetSolarPanelVoltage();
  3086  0C1C  24B3  3188         	fcall	_GetSolarPanelVoltage
  3087                           
  3088                           ;mypic.c: 342: gSolarPanelVoltage = SolarPanelVoltage;
  3089                           
  3090                           ;mypic.c: 343: (PORTA |= (1 << 0));
  3091  0C1E  26AF  3188         	fcall	PL7	;call to abstracted procedure
  3092                           
  3093                           ;mypic.c: 344: LPVFlag = 1;
  3094  0C20  1670               	bsf	_LPVFlag/(0+8),_LPVFlag& (0+7)
  3095  0C21                     l12742:	
  3096                           
  3097                           ;mypic.c: 345: }
  3098                           ;mypic.c: 346: }
  3099                           ;mypic.c: 347: }
  3100                           ;mypic.c: 348: }
  3101                           ;mypic.c: 349: if(PWMFlag == 1)
  3102  0C21  1D71               	btfss	_PWMFlag/(0+8),_PWMFlag& (0+7)
  3103  0C22  2C31               	goto	l12756
  3104                           
  3105                           ;mypic.c: 350: {
  3106                           ;mypic.c: 351: (PORTB |= (1 << 0));
  3107  0C23  140D               	bsf	13,0	;volatile
  3108                           
  3109                           ;mypic.c: 352: PWMFlag = 0;
  3110  0C24  1171               	bcf	_PWMFlag/(0+8),_PWMFlag& (0+7)
  3111                           
  3112                           ;mypic.c: 354: (PORTA &= ~(1 << 0));
  3113  0C25  100C               	bcf	12,0	;volatile
  3114                           
  3115                           ;mypic.c: 355: CTKSoftDelay(200);
  3116  0C26  30C8               	movlw	200
  3117  0C27  00F6               	movwf	?_CTKSoftDelay
  3118  0C28  01F7               	clrf	?_CTKSoftDelay+1
  3119  0C29  24BA  3188         	fcall	_CTKSoftDelay
  3120                           
  3121                           ;mypic.c: 356: SolarPanelVoltage = GetSolarPanelVoltage();
  3122  0C2B  24B3  3188         	fcall	_GetSolarPanelVoltage
  3123                           
  3124                           ;mypic.c: 357: gSolarPanelVoltage = SolarPanelVoltage;
  3125                           
  3126                           ;mypic.c: 358: (PORTA |= (1 << 0));
  3127  0C2D  26AF  3188         	fcall	PL7	;call to abstracted procedure
  3128                           
  3129                           ;mypic.c: 359: PWMFlag = 1;
  3130  0C2F  1571               	bsf	_PWMFlag/(0+8),_PWMFlag& (0+7)
  3131                           
  3132                           ;mypic.c: 360: (PORTB &= ~(1 << 0));
  3133  0C30  100D               	bcf	13,0	;volatile
  3134  0C31                     l12756:	
  3135                           
  3136                           ;mypic.c: 361: }
  3137                           ;mypic.c: 362: if(gSolarPanelVoltage <= 24)
  3138  0C31  3000               	movlw	0
  3139  0C32  0263               	subwf	_gSolarPanelVoltage+1,w
  3140  0C33  3019               	movlw	25
  3141  0C34  1903               	skipnz
  3142  0C35  0262               	subwf	_gSolarPanelVoltage,w
  3143  0C36  1803               	skipnc
  3144  0C37  2C3A               	goto	l8792
  3145                           
  3146                           ;mypic.c: 363: {
  3147                           ;mypic.c: 364: PVState = 1;
  3148  0C38  1471               	bsf	_PVState/(0+8),_PVState& (0+7)
  3149                           
  3150                           ;mypic.c: 365: }
  3151  0C39  2C3C               	goto	l12760
  3152  0C3A                     l8792:	
  3153                           
  3154                           ;mypic.c: 366: else
  3155                           ;mypic.c: 367: {
  3156                           ;mypic.c: 368: PVState = 0;
  3157  0C3A  1071               	bcf	_PVState/(0+8),_PVState& (0+7)
  3158                           
  3159                           ;mypic.c: 369: PVChargeFlag = 0;
  3160  0C3B  13F0               	bcf	_PVChargeFlag/(0+8),_PVChargeFlag& (0+7)
  3161  0C3C                     l12760:	
  3162                           
  3163                           ;mypic.c: 370: }
  3164                           ;mypic.c: 372: if(((gBatteryVoltage*26) - (gSolarPanelVoltage*23)) > *(BatteryStandard +
      +                           9))
  3165  0C3C  26CD  3188         	fcall	PL11	;call to abstracted procedure
  3166  0C3E  249E  3188         	fcall	___wmul
  3167  0C40  26C2  3188         	fcall	PL9	;call to abstracted procedure
  3168  0C42  26B9  3188         	fcall	PL8	;call to abstracted procedure
  3169  0C44  249E  3188         	fcall	___wmul
  3170  0C46  26DD  3188         	fcall	PL14	;call to abstracted procedure
  3171  0C48  0865               	movf	_BatteryStandard,w
  3172  0C49  3E12               	addlw	18
  3173  0C4A  0086               	movwf	6
  3174  0C4B  0187               	clrf	7
  3175  0C4C  3F40               	moviw [0]fsr1
  3176  0C4D  00C1               	movwf	??_SolarPanelDealWith+4
  3177  0C4E  3F41               	moviw [1]fsr1
  3178  0C4F  00C2               	movwf	??_SolarPanelDealWith+5
  3179  0C50  0840               	movf	??_SolarPanelDealWith+3,w
  3180  0C51  0242               	subwf	??_SolarPanelDealWith+5,w
  3181  0C52  1D03               	skipz
  3182  0C53  2C56               	goto	u4125
  3183  0C54  083F               	movf	??_SolarPanelDealWith+2,w
  3184  0C55  0241               	subwf	??_SolarPanelDealWith+4,w
  3185  0C56                     u4125:	
  3186  0C56  1803               	skipnc
  3187  0C57  2C5C               	goto	l12770
  3188                           
  3189                           ;mypic.c: 373: {
  3190                           ;mypic.c: 374: LPVFlag = 0;
  3191  0C58  1270               	bcf	_LPVFlag/(0+8),_LPVFlag& (0+7)
  3192                           
  3193                           ;mypic.c: 375: LPVCount = 0;
  3194  0C59  01E7               	clrf	_LPVCount
  3195                           
  3196                           ;mypic.c: 376: RB6 = 1;
  3197  0C5A  170D               	bsf	13,6
  3198                           
  3199                           ;mypic.c: 377: DAYTIME = 1;
  3200  0C5B  1470               	bsf	_DAYTIME/(0+8),_DAYTIME& (0+7)
  3201  0C5C                     l12770:	
  3202                           
  3203                           ;mypic.c: 378: }
  3204                           ;mypic.c: 379: if(((gBatteryVoltage*26) - (gSolarPanelVoltage*23)) < 3686)
  3205  0C5C  26CD  3188         	fcall	PL11	;call to abstracted procedure
  3206  0C5E  249E  3188         	fcall	___wmul
  3207  0C60  26C2  3188         	fcall	PL9	;call to abstracted procedure
  3208  0C62  26B9  3188         	fcall	PL8	;call to abstracted procedure
  3209  0C64  249E  3188         	fcall	___wmul
  3210  0C66  26DD  3188         	fcall	PL14	;call to abstracted procedure
  3211  0C68  300E               	movlw	14
  3212  0C69  0240               	subwf	??_SolarPanelDealWith+3,w
  3213  0C6A  3066               	movlw	102
  3214  0C6B  1903               	skipnz
  3215  0C6C  023F               	subwf	??_SolarPanelDealWith+2,w
  3216  0C6D  1C03               	btfss	3,0
  3217                           
  3218                           ;mypic.c: 380: {
  3219                           ;mypic.c: 381: if(DAYTIME == 1)
  3220  0C6E  1C70               	btfss	_DAYTIME/(0+8),_DAYTIME& (0+7)
  3221  0C6F  2C75               	goto	l8795
  3222                           
  3223                           ;mypic.c: 382: {
  3224                           ;mypic.c: 383: if(LPVCount == 0)
  3225  0C70  08E7               	movf	_LPVCount,f
  3226  0C71  1D03               	skipz
  3227  0C72  2C75               	goto	l8795
  3228                           
  3229                           ;mypic.c: 384: {
  3230                           ;mypic.c: 385: LPVCount = 1;
  3231  0C73  01E7               	clrf	_LPVCount
  3232  0C74  0AE7               	incf	_LPVCount,f
  3233  0C75                     l8795:	
  3234                           
  3235                           ;mypic.c: 386: }
  3236                           ;mypic.c: 387: }
  3237                           ;mypic.c: 388: }
  3238                           ;mypic.c: 389: if(LPVFlag == 1)
  3239  0C75  1E70               	btfss	_LPVFlag/(0+8),_LPVFlag& (0+7)
  3240  0C76  0008               	return
  3241                           
  3242                           ;mypic.c: 390: {
  3243                           ;mypic.c: 391: LPVFlag = 0;
  3244  0C77  1270               	bcf	_LPVFlag/(0+8),_LPVFlag& (0+7)
  3245                           
  3246                           ;mypic.c: 392: LPVCount = 0;
  3247  0C78  01E7               	clrf	_LPVCount
  3248                           
  3249                           ;mypic.c: 393: if(((gBatteryVoltage*26) - (gSolarPanelVoltage*23)) < *(BatteryStandard +
      +                           10))
  3250  0C79  0865               	movf	_BatteryStandard,w
  3251  0C7A  3E14               	addlw	20
  3252  0C7B  0086               	movwf	6
  3253  0C7C  0187               	clrf	7
  3254  0C7D  3F40               	moviw [0]fsr1
  3255  0C7E  00BD               	movwf	??_SolarPanelDealWith
  3256  0C7F  3F41               	moviw [1]fsr1
  3257  0C80  00BE               	movwf	??_SolarPanelDealWith+1
  3258  0C81  26CD  3188         	fcall	PL11	;call to abstracted procedure
  3259  0C83  249E  3188         	fcall	___wmul
  3260  0C85  0820               	movf	?___wmul,w
  3261  0C86  00BF               	movwf	??_SolarPanelDealWith+2
  3262  0C87  0821               	movf	?___wmul+1,w
  3263  0C88  00C0               	movwf	??_SolarPanelDealWith+3
  3264  0C89  26B9  3188         	fcall	PL8	;call to abstracted procedure
  3265  0C8B  249E  3188         	fcall	___wmul
  3266  0C8D  0820               	movf	?___wmul,w
  3267  0C8E  073F               	addwf	??_SolarPanelDealWith+2,w
  3268  0C8F  00C1               	movwf	??_SolarPanelDealWith+4
  3269  0C90  0821               	movf	?___wmul+1,w
  3270  0C91  3D40               	addwfc	??_SolarPanelDealWith+3,w
  3271  0C92  00C2               	movwf	??_SolarPanelDealWith+5
  3272  0C93  083E               	movf	??_SolarPanelDealWith+1,w
  3273  0C94  0242               	subwf	??_SolarPanelDealWith+5,w
  3274  0C95  1D03               	skipz
  3275  0C96  2C99               	goto	u4175
  3276  0C97  083D               	movf	??_SolarPanelDealWith,w
  3277  0C98  0241               	subwf	??_SolarPanelDealWith+4,w
  3278  0C99                     u4175:	
  3279  0C99  1803               	skipnc
  3280  0C9A  0008               	return
  3281                           
  3282                           ;mypic.c: 394: {
  3283                           ;mypic.c: 395: RB6 = 0;
  3284  0C9B  130D               	bcf	13,6
  3285                           
  3286                           ;mypic.c: 396: DAYTIME = 0;
  3287  0C9C  1070               	bcf	_DAYTIME/(0+8),_DAYTIME& (0+7)
  3288  0C9D  0008               	return
  3289  0C9E                     __end_of_SolarPanelDealWith:	
  3290  0C9E                     __ptext1122:	
  3291 ;; =============== function ___ftpack ends ============
  3292                           
  3293                           
  3294 ;; *************** function ___wmul *****************
  3295 ;; Defined at:
  3296 ;;		line 3 in file "C:\Program Files\HI-TECH Software\PICC\9.80\sources\wmul.c"
  3297 ;; Parameters:    Size  Location     Type
  3298 ;;  multiplier      2    0[BANK0 ] unsigned int 
  3299 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  3300 ;; Auto vars:     Size  Location     Type
  3301 ;;  product         2    4[COMMON] unsigned int 
  3302 ;; Return value:  Size  Location     Type
  3303 ;;                  2    0[BANK0 ] unsigned int 
  3304 ;; Registers used:
  3305 ;;		wreg, status,2, status,0
  3306 ;; Tracked objects:
  3307 ;;		On entry : 1F/0
  3308 ;;		On exit  : 1F/0
  3309 ;;		Unchanged: FFFE0/0
  3310 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3311 ;;      Params:         0       4       0       0
  3312 ;;      Locals:         2       0       0       0
  3313 ;;      Temps:          0       0       0       0
  3314 ;;      Totals:         2       4       0       0
  3315 ;;Total ram usage:        6 bytes
  3316 ;; Hardware stack levels used:    1
  3317 ;; Hardware stack levels required when called:    4
  3318 ;; This function calls:
  3319 ;;		Nothing
  3320 ;; This function is called by:
  3321 ;;		_SolarPanelDealWith
  3322 ;;		_KaiJi
  3323 ;; This function uses a non-reentrant model
  3324 ;;
  3325  0C9E                     ___wmul:	
  3326                           
  3327                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  3328  0C9E  01F6               	clrf	___wmul@product
  3329  0C9F  01F7               	clrf	___wmul@product+1
  3330  0CA0                     l11986:	
  3331  0CA0  1C20               	btfss	___wmul@multiplier,0
  3332  0CA1  2CA6               	goto	l11990
  3333  0CA2  0822               	movf	___wmul@multiplicand,w
  3334  0CA3  07F6               	addwf	___wmul@product,f
  3335  0CA4  0823               	movf	___wmul@multiplicand+1,w
  3336  0CA5  3DF7               	addwfc	___wmul@product+1,f
  3337  0CA6                     l11990:	
  3338  0CA6  35A2               	lslf	___wmul@multiplicand,f
  3339  0CA7  0DA3               	rlf	___wmul@multiplicand+1,f
  3340  0CA8  36A1               	lsrf	___wmul@multiplier+1,f
  3341  0CA9  0CA0               	rrf	___wmul@multiplier,f
  3342  0CAA  0821               	movf	___wmul@multiplier+1,w
  3343  0CAB  0420               	iorwf	___wmul@multiplier,w
  3344  0CAC  1D03               	skipz
  3345  0CAD  2CA0               	goto	l11986
  3346  0CAE  0877               	movf	___wmul@product+1,w
  3347  0CAF  00A1               	movwf	?___wmul+1
  3348  0CB0  0876               	movf	___wmul@product,w
  3349  0CB1  00A0               	movwf	?___wmul
  3350  0CB2  0008               	return
  3351  0CB3                     __end_of___wmul:	
  3352  0CB3                     __ptext1103:	
  3353 ;; =============== function _GetLoadCurrentVoltage ends ============
  3354                           
  3355                           
  3356 ;; *************** function _GetSolarPanelVoltage *****************
  3357 ;; Defined at:
  3358 ;;		line 165 in file "C:\CTK\CTK80A 150928\CTK80A_Jas\mypic.c"
  3359 ;; Parameters:    Size  Location     Type
  3360 ;;		None
  3361 ;; Auto vars:     Size  Location     Type
  3362 ;;  channel         1    0        unsigned char 
  3363 ;; Return value:  Size  Location     Type
  3364 ;;                  2   26[BANK0 ] unsigned int 
  3365 ;; Registers used:
  3366 ;;		wreg, status,2, status,0, pclath, cstack
  3367 ;; Tracked objects:
  3368 ;;		On entry : 1F/0
  3369 ;;		On exit  : 1F/0
  3370 ;;		Unchanged: FFFE0/0
  3371 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3372 ;;      Params:         0       2       0       0
  3373 ;;      Locals:         0       1       0       0
  3374 ;;      Temps:          0       0       0       0
  3375 ;;      Totals:         0       3       0       0
  3376 ;;Total ram usage:        3 bytes
  3377 ;; Hardware stack levels used:    1
  3378 ;; Hardware stack levels required when called:    7
  3379 ;; This function calls:
  3380 ;;		_getADValue
  3381 ;; This function is called by:
  3382 ;;		_SolarPanelDealWith
  3383 ;;		_KaiJi
  3384 ;; This function uses a non-reentrant model
  3385 ;;
  3386  0CB3                     _GetSolarPanelVoltage:	
  3387                           
  3388                           ;mypic.c: 167: return getADValue(channel);
  3389                           
  3390                           ; Regs used in _GetSolarPanelVoltage: [wreg+status,2+status,0+pclath+cstack]
  3391  0CB3  3021               	movlw	33
  3392  0CB4  225A               	fcall	_getADValue
  3393  0CB5  082C               	movf	?_getADValue+1,w
  3394  0CB6  00BB               	movwf	?_GetSolarPanelVoltage+1
  3395  0CB7  082B               	movf	?_getADValue,w
  3396  0CB8  00BA               	movwf	?_GetSolarPanelVoltage
  3397  0CB9  0008               	return
  3398  0CBA                     __end_of_GetSolarPanelVoltage:	
  3399  0CBA                     __ptext1126:	
  3400 ;; =============== function _ReadEE ends ============
  3401                           
  3402                           
  3403 ;; *************** function _CTKSoftDelay *****************
  3404 ;; Defined at:
  3405 ;;		line 6 in file "C:\CTK\CTK80A 150928\CTK80A_Jas\public.c"
  3406 ;; Parameters:    Size  Location     Type
  3407 ;;  x               2    4[COMMON] unsigned int 
  3408 ;; Auto vars:     Size  Location     Type
  3409 ;;  b               2    2[BANK0 ] unsigned int 
  3410 ;;  a               2    0[BANK0 ] unsigned int 
  3411 ;; Return value:  Size  Location     Type
  3412 ;;		None               void
  3413 ;; Registers used:
  3414 ;;		wreg, status,2, status,0
  3415 ;; Tracked objects:
  3416 ;;		On entry : 1E/0
  3417 ;;		On exit  : 1F/0
  3418 ;;		Unchanged: FFFE0/0
  3419 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3420 ;;      Params:         2       0       0       0
  3421 ;;      Locals:         0       4       0       0
  3422 ;;      Temps:          0       0       0       0
  3423 ;;      Totals:         2       4       0       0
  3424 ;;Total ram usage:        6 bytes
  3425 ;; Hardware stack levels used:    1
  3426 ;; Hardware stack levels required when called:    4
  3427 ;; This function calls:
  3428 ;;		Nothing
  3429 ;; This function is called by:
  3430 ;;		_lcd_write_command
  3431 ;;		_lcd_write_data
  3432 ;;		_API_LCD_INIT
  3433 ;;		_API_LCD_CLEAR
  3434 ;;		_system_state_init
  3435 ;;		_getADValueOneTime
  3436 ;;		_SolarPanelDealWith
  3437 ;;		_SwitchBatteryState
  3438 ;; This function uses a non-reentrant model
  3439 ;;
  3440  0CBA                     _CTKSoftDelay:	
  3441  0CBA                     l11880:	
  3442                           ; Regs used in _CTKSoftDelay: [wreg+status,2+status,0]
  3443                           
  3444                           
  3445                           ;public.c: 7: unsigned int a,b;
  3446                           ;public.c: 8: for(a=x;a>0;a--)
  3447  0CBA  0877               	movf	CTKSoftDelay@x+1,w
  3448  0CBB  0020               	movlb	0	; select bank0
  3449  0CBC  00A1               	movwf	CTKSoftDelay@a+1
  3450  0CBD  0876               	movf	CTKSoftDelay@x,w
  3451  0CBE  00A0               	movwf	CTKSoftDelay@a
  3452  0CBF                     l11882:	
  3453  0CBF  0821               	movf	CTKSoftDelay@a+1,w
  3454  0CC0  0420               	iorwf	CTKSoftDelay@a,w
  3455  0CC1  1903               	btfsc	3,2
  3456  0CC2  0008               	return
  3457                           
  3458                           ;public.c: 9: for(b=10;b>0;b--);
  3459  0CC3  300A               	movlw	10
  3460  0CC4  00A2               	movwf	CTKSoftDelay@b
  3461  0CC5  01A3               	clrf	CTKSoftDelay@b+1
  3462  0CC6  3001               	movlw	1
  3463  0CC7                     L9:	
  3464  0CC7  02A2               	subwf	CTKSoftDelay@b,f
  3465  0CC8  3000               	movlw	0
  3466  0CC9  3BA3               	subwfb	CTKSoftDelay@b+1,f
  3467  0CCA  0823               	movf	CTKSoftDelay@b+1,w
  3468  0CCB  0422               	iorwf	CTKSoftDelay@b,w
  3469  0CCC  3001               	movlw	1
  3470  0CCD  1D03               	skipz
  3471  0CCE  2CC7               	goto	L9
  3472  0CCF  02A0               	subwf	CTKSoftDelay@a,f
  3473  0CD0  3000               	movlw	0
  3474  0CD1  3BA1               	subwfb	CTKSoftDelay@a+1,f
  3475  0CD2  2CBF               	goto	l11882
  3476  0CD3                     __end_of_CTKSoftDelay:	
  3477  0CD3                     __ptext1102:	
  3478 ;; =============== function _LoadParamFromEPPROM ends ============
  3479                           
  3480                           
  3481 ;; *************** function _GetLoadCurrentVoltage *****************
  3482 ;; Defined at:
  3483 ;;		line 181 in file "C:\CTK\CTK80A 150928\CTK80A_Jas\mypic.c"
  3484 ;; Parameters:    Size  Location     Type
  3485 ;;		None
  3486 ;; Auto vars:     Size  Location     Type
  3487 ;;  channel         1    0        unsigned char 
  3488 ;; Return value:  Size  Location     Type
  3489 ;;                  2   26[BANK0 ] unsigned int 
  3490 ;; Registers used:
  3491 ;;		wreg, status,2, status,0, pclath, cstack
  3492 ;; Tracked objects:
  3493 ;;		On entry : 1F/0
  3494 ;;		On exit  : 1F/0
  3495 ;;		Unchanged: FFFE0/0
  3496 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3497 ;;      Params:         0       2       0       0
  3498 ;;      Locals:         0       1       0       0
  3499 ;;      Temps:          0       0       0       0
  3500 ;;      Totals:         0       3       0       0
  3501 ;;Total ram usage:        3 bytes
  3502 ;; Hardware stack levels used:    1
  3503 ;; Hardware stack levels required when called:    7
  3504 ;; This function calls:
  3505 ;;		_getADValue
  3506 ;; This function is called by:
  3507 ;;		_LoadCurrentDealWith
  3508 ;;		_KaiJi
  3509 ;; This function uses a non-reentrant model
  3510 ;;
  3511  0CD3                     _GetLoadCurrentVoltage:	
  3512                           
  3513                           ;mypic.c: 183: return getADValue(channel);
  3514                           
  3515                           ; Regs used in _GetLoadCurrentVoltage: [wreg+status,2+status,0+pclath+cstack]
  3516  0CD3  3019               	movlw	25
  3517  0CD4  225A               	fcall	_getADValue
  3518  0CD5  082C               	movf	?_getADValue+1,w
  3519  0CD6  00BB               	movwf	?_GetLoadCurrentVoltage+1
  3520  0CD7  082B               	movf	?_getADValue,w
  3521  0CD8  00BA               	movwf	?_GetLoadCurrentVoltage
  3522  0CD9  0008               	return
  3523  0CDA                     __end_of_GetLoadCurrentVoltage:	
  3524  0CDA                     __ptext1127:	
  3525 ;; =============== function _CTKSoftDelay ends ============
  3526                           
  3527                           
  3528 ;; *************** function _LedDisplay *****************
  3529 ;; Defined at:
  3530 ;;		line 912 in file "C:\CTK\CTK80A 150928\CTK80A_Jas\mypic.c"
  3531 ;; Parameters:    Size  Location     Type
  3532 ;;		None
  3533 ;; Auto vars:     Size  Location     Type
  3534 ;;		None
  3535 ;; Return value:  Size  Location     Type
  3536 ;;		None               void
  3537 ;; Registers used:
  3538 ;;		None
  3539 ;; Tracked objects:
  3540 ;;		On entry : 1F/0
  3541 ;;		On exit  : 1D/0
  3542 ;;		Unchanged: FFFE0/0
  3543 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3544 ;;      Params:         0       0       0       0
  3545 ;;      Locals:         0       0       0       0
  3546 ;;      Temps:          0       0       0       0
  3547 ;;      Totals:         0       0       0       0
  3548 ;;Total ram usage:        0 bytes
  3549 ;; Hardware stack levels used:    1
  3550 ;; Hardware stack levels required when called:    4
  3551 ;; This function calls:
  3552 ;;		Nothing
  3553 ;; This function is called by:
  3554 ;;		_main
  3555 ;; This function uses a non-reentrant model
  3556 ;;
  3557  0CDA                     _LedDisplay:	
  3558                           
  3559                           ;mypic.c: 913: if(LoadFlag == 0)
  3560                           
  3561                           ; Regs used in _LedDisplay: []
  3562  0CDA  1878               	btfsc	_LoadFlag/(0+8),_LoadFlag& (0+7)
  3563  0CDB  2CDE               	goto	l8915
  3564                           
  3565                           ;mypic.c: 914: {
  3566                           ;mypic.c: 915: (LATB |= (1 << 7));
  3567  0CDC  0022               	movlb	2	; select bank2
  3568  0CDD  178D               	bsf	13,7	;volatile
  3569  0CDE                     l8915:	
  3570                           
  3571                           ;mypic.c: 916: }
  3572                           ;mypic.c: 917: if(LoadFlag == 1)
  3573  0CDE  1C78               	btfss	_LoadFlag/(0+8),_LoadFlag& (0+7)
  3574  0CDF  2CE2               	goto	l8916
  3575                           
  3576                           ;mypic.c: 918: {
  3577                           ;mypic.c: 919: (LATB &= ~(1 << 7));
  3578  0CE0  0022               	movlb	2	; select bank2
  3579  0CE1  138D               	bcf	13,7	;volatile
  3580  0CE2                     l8916:	
  3581                           
  3582                           ;mypic.c: 920: }
  3583                           ;mypic.c: 922: if(PVChargeFlag == 1)
  3584  0CE2  1FF0               	btfss	_PVChargeFlag/(0+8),_PVChargeFlag& (0+7)
  3585  0CE3  2CE6               	goto	l8917
  3586                           
  3587                           ;mypic.c: 923: {
  3588                           ;mypic.c: 924: (LATB |= (1 << 6));
  3589  0CE4  0022               	movlb	2	; select bank2
  3590  0CE5  170D               	bsf	13,6	;volatile
  3591  0CE6                     l8917:	
  3592                           
  3593                           ;mypic.c: 925: }
  3594                           ;mypic.c: 926: if(PVChargeFlag == 0)
  3595  0CE6  1BF0               	btfsc	_PVChargeFlag/(0+8),_PVChargeFlag& (0+7)
  3596  0CE7  0008               	return
  3597                           
  3598                           ;mypic.c: 927: {
  3599                           ;mypic.c: 928: (LATB &= ~(1 << 6));
  3600  0CE8  0022               	movlb	2	; select bank2
  3601  0CE9  130D               	bcf	13,6	;volatile
  3602  0CEA  0008               	return
  3603  0CEB                     __end_of_LedDisplay:	
  3604  0CEB                     __ptext1111:	
  3605 ;; =============== function _API_LCD_MOVE_POINT ends ============
  3606                           
  3607                           
  3608 ;; *************** function _API_LCD_CLEAR *****************
  3609 ;; Defined at:
  3610 ;;		line 60 in file "C:\CTK\CTK80A 150928\CTK80A_Jas\LM016.c"
  3611 ;; Parameters:    Size  Location     Type
  3612 ;;		None
  3613 ;; Auto vars:     Size  Location     Type
  3614 ;;		None
  3615 ;; Return value:  Size  Location     Type
  3616 ;;		None               void
  3617 ;; Registers used:
  3618 ;;		wreg, status,2, status,0, pclath, cstack
  3619 ;; Tracked objects:
  3620 ;;		On entry : 1F/0
  3621 ;;		On exit  : 1F/0
  3622 ;;		Unchanged: FFFE0/0
  3623 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3624 ;;      Params:         0       0       0       0
  3625 ;;      Locals:         0       0       0       0
  3626 ;;      Temps:          0       0       0       0
  3627 ;;      Totals:         0       0       0       0
  3628 ;;Total ram usage:        0 bytes
  3629 ;; Hardware stack levels used:    1
  3630 ;; Hardware stack levels required when called:    6
  3631 ;; This function calls:
  3632 ;;		_lcd_write_command
  3633 ;;		_CTKSoftDelay
  3634 ;; This function is called by:
  3635 ;;		_main
  3636 ;; This function uses a non-reentrant model
  3637 ;;
  3638  0CEB                     _API_LCD_CLEAR:	
  3639                           
  3640                           ;LM016.c: 61: lcd_write_command(0x01);
  3641                           
  3642                           ; Regs used in _API_LCD_CLEAR: [wreg+status,2+status,0+pclath+cstack]
  3643  0CEB  3001               	movlw	1
  3644  0CEC  224E  3188         	fcall	_lcd_write_command
  3645                           
  3646                           ;LM016.c: 62: CTKSoftDelay(1000);
  3647  0CEE  26EB  3188         	fcall	PL17	;call to abstracted procedure
  3648  0CF0  2CBA               	ljmp	l11880
  3649  0CF1                     __end_of_API_LCD_CLEAR:	
  3650  0CF1                     __ptext1096:	
  3651 ;; =============== function _main ends ============
  3652                           
  3653                           
  3654 ;; *************** function _PWMCharge *****************
  3655 ;; Defined at:
  3656 ;;		line 404 in file "C:\CTK\CTK80A 150928\CTK80A_Jas\mypic.c"
  3657 ;; Parameters:    Size  Location     Type
  3658 ;;		None
  3659 ;; Auto vars:     Size  Location     Type
  3660 ;;  ChangeBatter    2   29[BANK0 ] unsigned int 
  3661 ;; Return value:  Size  Location     Type
  3662 ;;		None               void
  3663 ;; Registers used:
  3664 ;;		wreg, status,2, status,0, pclath, cstack
  3665 ;; Tracked objects:
  3666 ;;		On entry : 1F/0
  3667 ;;		On exit  : 1E/0
  3668 ;;		Unchanged: FFFE0/0
  3669 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3670 ;;      Params:         0       0       0       0
  3671 ;;      Locals:         0       2       0       0
  3672 ;;      Temps:          0       0       0       0
  3673 ;;      Totals:         0       2       0       0
  3674 ;;Total ram usage:        2 bytes
  3675 ;; Hardware stack levels used:    1
  3676 ;; Hardware stack levels required when called:    8
  3677 ;; This function calls:
  3678 ;;		_GetBatteryVoltage
  3679 ;; This function is called by:
  3680 ;;		_main
  3681 ;; This function uses a non-reentrant model
  3682 ;;
  3683  0CF1                     _PWMCharge:	
  3684                           
  3685                           ;mypic.c: 405: unsigned int ChangeBatteryVoltag;
  3686                           ;mypic.c: 406: ChangeBatteryVoltag = GetBatteryVoltage();
  3687                           
  3688                           ; Regs used in _PWMCharge: [wreg+status,2+status,0+pclath+cstack]
  3689  0CF1  21D6  3188         	fcall	_GetBatteryVoltage
  3690  0CF3  083B               	movf	?_GetBatteryVoltage+1,w
  3691  0CF4  00BE               	movwf	PWMCharge@ChangeBatteryVoltag+1
  3692  0CF5  083A               	movf	?_GetBatteryVoltage,w
  3693  0CF6  00BD               	movwf	PWMCharge@ChangeBatteryVoltag
  3694                           
  3695                           ;mypic.c: 407: if((EnhanceChargeFlag == 1) || (EqualizingChargeFlag == 1) || (FloatingCh
      +                          argeFlag == 1))
  3696  0CF7  1CF0               	btfss	_EnhanceChargeFlag/(0+8),_EnhanceChargeFlag& (0+7)
  3697  0CF8  1970               	btfsc	_EqualizingChargeFlag/(0+8),_EqualizingChargeFlag& (0+7)
  3698  0CF9  2CFC               	goto	l8805
  3699  0CFA  1DF0               	btfss	_FloatingChargeFlag/(0+8),_FloatingChargeFlag& (0+7)
  3700  0CFB  2D38               	goto	l8803
  3701  0CFC                     l8805:	
  3702                           
  3703                           ;mypic.c: 408: {
  3704                           ;mypic.c: 409: (PORTB &= ~(1 << 0));
  3705  0CFC  100D               	bcf	13,0	;volatile
  3706                           
  3707                           ;mypic.c: 411: if(ChangeBatteryVoltag < ClampVoltage)
  3708  0CFD  0853               	movf	_ClampVoltage+1,w
  3709  0CFE  023E               	subwf	PWMCharge@ChangeBatteryVoltag+1,w
  3710  0CFF  1D03               	skipz
  3711  0D00  2D03               	goto	u4215
  3712  0D01  0852               	movf	_ClampVoltage,w
  3713  0D02  023D               	subwf	PWMCharge@ChangeBatteryVoltag,w
  3714  0D03                     u4215:	
  3715  0D03  1803               	skipnc
  3716  0D04  2D19               	goto	l12806
  3717                           
  3718                           ;mypic.c: 412: {
  3719                           ;mypic.c: 413: PVChargeFlag = 1;
  3720  0D05  17F0               	bsf	_PVChargeFlag/(0+8),_PVChargeFlag& (0+7)
  3721                           
  3722                           ;mypic.c: 414: if(DutyRatio > 249)
  3723  0D06  30FA               	movlw	250
  3724  0D07  0279               	subwf	_DutyRatio,w
  3725  0D08  1C03               	skipc
  3726  0D09  2D11               	goto	l8807
  3727                           
  3728                           ;mypic.c: 415: {
  3729                           ;mypic.c: 416: TMR2IE = 0;
  3730  0D0A  0021               	movlb	1	; select bank1
  3731  0D0B  1091               	bcf	17,1
  3732                           
  3733                           ;mypic.c: 417: T2Flag = 0;
  3734  0D0C  11F1               	bcf	_T2Flag/(0+8),_T2Flag& (0+7)
  3735                           
  3736                           ;mypic.c: 418: PWMFlag = 0;
  3737  0D0D  1171               	bcf	_PWMFlag/(0+8),_PWMFlag& (0+7)
  3738                           
  3739                           ;mypic.c: 419: (PORTA &= ~(1 << 0));
  3740  0D0E  0020               	movlb	0	; select bank0
  3741  0D0F  100C               	bcf	12,0	;volatile
  3742                           
  3743                           ;mypic.c: 420: }
  3744  0D10  2D19               	goto	l12806
  3745  0D11                     l8807:	
  3746                           
  3747                           ;mypic.c: 421: else
  3748                           ;mypic.c: 422: {
  3749                           ;mypic.c: 423: if(T2Flag == 0)
  3750  0D11  19F1               	btfsc	_T2Flag/(0+8),_T2Flag& (0+7)
  3751  0D12  2D17               	goto	l12804
  3752                           
  3753                           ;mypic.c: 424: {
  3754                           ;mypic.c: 425: TMR2IE = 1;
  3755  0D13  0021               	movlb	1	; select bank1
  3756  0D14  1491               	bsf	17,1
  3757                           
  3758                           ;mypic.c: 426: T2Flag = 1;
  3759  0D15  15F1               	bsf	_T2Flag/(0+8),_T2Flag& (0+7)
  3760                           
  3761                           ;mypic.c: 427: PWMFlag = 1;
  3762  0D16  1571               	bsf	_PWMFlag/(0+8),_PWMFlag& (0+7)
  3763  0D17                     l12804:	
  3764                           
  3765                           ;mypic.c: 428: }
  3766                           ;mypic.c: 429: DutyRatio = DutyRatio+10;
  3767  0D17  300A               	movlw	10
  3768  0D18  07F9               	addwf	_DutyRatio,f
  3769  0D19                     l12806:	
  3770                           
  3771                           ;mypic.c: 430: }
  3772                           ;mypic.c: 431: }
  3773                           ;mypic.c: 432: if(ChangeBatteryVoltag > ClampVoltage)
  3774  0D19  0020               	movlb	0	; select bank0
  3775  0D1A  083E               	movf	PWMCharge@ChangeBatteryVoltag+1,w
  3776  0D1B  0253               	subwf	_ClampVoltage+1,w
  3777  0D1C  1D03               	skipz
  3778  0D1D  2D20               	goto	u4245
  3779  0D1E  083D               	movf	PWMCharge@ChangeBatteryVoltag,w
  3780  0D1F  0252               	subwf	_ClampVoltage,w
  3781  0D20                     u4245:	
  3782  0D20  1803               	skipnc
  3783  0D21  0008               	return
  3784                           
  3785                           ;mypic.c: 433: {
  3786                           ;mypic.c: 434: if(DutyRatio < 9)
  3787  0D22  3009               	movlw	9
  3788  0D23  0279               	subwf	_DutyRatio,w
  3789  0D24  1803               	skipnc
  3790  0D25  2D2E               	goto	l8811
  3791                           
  3792                           ;mypic.c: 435: {
  3793                           ;mypic.c: 436: TMR2IE = 0;
  3794  0D26  0021               	movlb	1	; select bank1
  3795  0D27  1091               	bcf	17,1
  3796                           
  3797                           ;mypic.c: 437: T2Flag = 0;
  3798  0D28  11F1               	bcf	_T2Flag/(0+8),_T2Flag& (0+7)
  3799                           
  3800                           ;mypic.c: 438: PWMFlag = 0;
  3801  0D29  1171               	bcf	_PWMFlag/(0+8),_PWMFlag& (0+7)
  3802                           
  3803                           ;mypic.c: 439: (PORTA |= (1 << 0));
  3804  0D2A  0020               	movlb	0	; select bank0
  3805  0D2B  140C               	bsf	12,0	;volatile
  3806                           
  3807                           ;mypic.c: 440: PVChargeFlag = 0;
  3808  0D2C  13F0               	bcf	_PVChargeFlag/(0+8),_PVChargeFlag& (0+7)
  3809                           
  3810                           ;mypic.c: 441: }
  3811  0D2D  0008               	return
  3812  0D2E                     l8811:	
  3813                           
  3814                           ;mypic.c: 442: else
  3815                           ;mypic.c: 443: {
  3816                           ;mypic.c: 444: PVChargeFlag = 1;
  3817  0D2E  17F0               	bsf	_PVChargeFlag/(0+8),_PVChargeFlag& (0+7)
  3818                           
  3819                           ;mypic.c: 445: if(T2Flag == 0)
  3820  0D2F  19F1               	btfsc	_T2Flag/(0+8),_T2Flag& (0+7)
  3821  0D30  2D35               	goto	l12814
  3822                           
  3823                           ;mypic.c: 446: {
  3824                           ;mypic.c: 447: TMR2IE = 1;
  3825  0D31  0021               	movlb	1	; select bank1
  3826  0D32  1491               	bsf	17,1
  3827                           
  3828                           ;mypic.c: 448: T2Flag = 1;
  3829  0D33  15F1               	bsf	_T2Flag/(0+8),_T2Flag& (0+7)
  3830                           
  3831                           ;mypic.c: 449: PWMFlag = 1;
  3832  0D34  1571               	bsf	_PWMFlag/(0+8),_PWMFlag& (0+7)
  3833  0D35                     l12814:	
  3834                           
  3835                           ;mypic.c: 450: }
  3836                           ;mypic.c: 451: DutyRatio = DutyRatio-10;
  3837  0D35  30F6               	movlw	246
  3838  0D36  07F9               	addwf	_DutyRatio,f
  3839  0D37  0008               	return
  3840  0D38                     l8803:	
  3841                           
  3842                           ;mypic.c: 455: else
  3843                           ;mypic.c: 456: {
  3844                           ;mypic.c: 457: if(T2Flag == 1)
  3845  0D38  1DF1               	btfss	_T2Flag/(0+8),_T2Flag& (0+7)
  3846  0D39  2D3E               	goto	l12818
  3847                           
  3848                           ;mypic.c: 458: {
  3849                           ;mypic.c: 459: TMR2IE = 0;
  3850  0D3A  0021               	movlb	1	; select bank1
  3851  0D3B  1091               	bcf	17,1
  3852                           
  3853                           ;mypic.c: 460: T2Flag = 0;
  3854  0D3C  11F1               	bcf	_T2Flag/(0+8),_T2Flag& (0+7)
  3855                           
  3856                           ;mypic.c: 461: PWMFlag = 0;
  3857  0D3D  1171               	bcf	_PWMFlag/(0+8),_PWMFlag& (0+7)
  3858  0D3E                     l12818:	
  3859                           
  3860                           ;mypic.c: 462: }
  3861                           ;mypic.c: 463: PwmCount = 0;
  3862  0D3E  0020               	movlb	0	; select bank0
  3863  0D3F  01EB               	clrf	_PwmCount
  3864                           
  3865                           ;mypic.c: 464: DutyRatio = 0;
  3866  0D40  01F9               	clrf	_DutyRatio
  3867                           
  3868                           ;mypic.c: 465: (PORTB |= (1 << 0));
  3869  0D41  140D               	bsf	13,0	;volatile
  3870                           
  3871                           ;mypic.c: 467: PVChargeFlag = 0;
  3872  0D42  13F0               	bcf	_PVChargeFlag/(0+8),_PVChargeFlag& (0+7)
  3873  0D43  0008               	return
  3874  0D44                     __end_of_PWMCharge:	
  3875  0D44                     __ptext1105:	
  3876 ;; =============== function _GetBatteryVoltage ends ============
  3877                           
  3878                           
  3879 ;; *************** function _ReadOrWriteEE *****************
  3880 ;; Defined at:
  3881 ;;		line 17 in file "C:\CTK\CTK80A 150928\CTK80A_Jas\kernel.c"
  3882 ;; Parameters:    Size  Location     Type
  3883 ;;  read            2    0[BANK1 ] int 
  3884 ;; Auto vars:     Size  Location     Type
  3885 ;;  i               2    3[BANK1 ] int 
  3886 ;;  startAddr       1    2[BANK1 ] unsigned char 
  3887 ;; Return value:  Size  Location     Type
  3888 ;;		None               void
  3889 ;; Registers used:
  3890 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  3891 ;; Tracked objects:
  3892 ;;		On entry : 17F/1
  3893 ;;		On exit  : 0/0
  3894 ;;		Unchanged: FFE00/0
  3895 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3896 ;;      Params:         0       0       2       0
  3897 ;;      Locals:         0       0       3       0
  3898 ;;      Temps:          0       0       0       0
  3899 ;;      Totals:         0       0       5       0
  3900 ;;Total ram usage:        5 bytes
  3901 ;; Hardware stack levels used:    1
  3902 ;; Hardware stack levels required when called:    7
  3903 ;; This function calls:
  3904 ;;		_readIntParam
  3905 ;;		_writeIntParam
  3906 ;; This function is called by:
  3907 ;;		_LoadParamFromEPPROM
  3908 ;; This function uses a non-reentrant model
  3909 ;;
  3910  0D44                     _ReadOrWriteEE:	
  3911  0D44                     l12310:	
  3912                           ; Regs used in _ReadOrWriteEE: [wreg+fsr1l-status,0+btemp+1+pclath+cstack]
  3913                           
  3914                           
  3915                           ;kernel.c: 19: unsigned char startAddr = ((0 +2) +2);
  3916  0D44  3004               	movlw	4
  3917  0D45  00EA               	movwf	ReadOrWriteEE@startAddr^(0+128)
  3918                           
  3919                           ;kernel.c: 20: for(i = 0; i<10; i++){
  3920  0D46  01EB               	clrf	ReadOrWriteEE@i^(0+128)
  3921  0D47  01EC               	clrf	(ReadOrWriteEE@i+1)^(0+128)
  3922  0D48                     l12318:	
  3923                           
  3924                           ;kernel.c: 21: if(read){
  3925  0D48  0021               	movlb	1	; select bank1
  3926  0D49  0869               	movf	(ReadOrWriteEE@read+1)^(0+128),w
  3927  0D4A  0468               	iorwf	ReadOrWriteEE@read^(0+128),w
  3928  0D4B  1903               	skipnz
  3929  0D4C  2D5C               	goto	l12322
  3930                           
  3931                           ;kernel.c: 22: ParamConfig[i] = readIntParam(startAddr + 2*i);;
  3932  0D4D  356B               	lslf	ReadOrWriteEE@i^(0+128),w
  3933  0D4E  076A               	addwf	ReadOrWriteEE@startAddr^(0+128),w
  3934  0D4F  257C  3188         	fcall	_readIntParam
  3935  0D51  0021               	movlb	1	; select bank1
  3936  0D52  356B               	lslf	ReadOrWriteEE@i^(0+128),w
  3937  0D53  3ECC               	addlw	_ParamConfig& (0+255)
  3938  0D54  0086               	movwf	6
  3939  0D55  0187               	clrf	7
  3940  0D56  0020               	movlb	0	; select bank0
  3941  0D57  0847               	movf	?_readIntParam,w
  3942  0D58  3FC0               	movwi [0]fsr1
  3943  0D59  0848               	movf	?_readIntParam+1,w
  3944  0D5A  3FC1               	movwi [1]fsr1
  3945                           
  3946                           ;kernel.c: 23: }else{
  3947  0D5B  2D6C               	goto	l12324
  3948  0D5C                     l12322:	
  3949                           
  3950                           ;kernel.c: 24: writeIntParam(ParamConfig[i], (startAddr + 2*i));
  3951  0D5C  356B               	lslf	ReadOrWriteEE@i^(0+128),w
  3952  0D5D  3ECC               	addlw	_ParamConfig& (0+255)
  3953  0D5E  0086               	movwf	6
  3954  0D5F  0187               	clrf	7
  3955  0D60  3F40               	moviw [0]fsr1
  3956  0D61  0020               	movlb	0	; select bank0
  3957  0D62  00C7               	movwf	?_writeIntParam
  3958  0D63  3F41               	moviw [1]fsr1
  3959  0D64  00C8               	movwf	?_writeIntParam+1
  3960  0D65  0021               	movlb	1	; select bank1
  3961  0D66  356B               	lslf	ReadOrWriteEE@i^(0+128),w
  3962  0D67  076A               	addwf	ReadOrWriteEE@startAddr^(0+128),w
  3963  0D68  0020               	movlb	0	; select bank0
  3964  0D69  00C9               	movwf	?_writeIntParam+2
  3965  0D6A  26FA  3188         	fcall	_writeIntParam
  3966  0D6C                     l12324:	
  3967  0D6C  0021               	movlb	1	; select bank1
  3968  0D6D  0AEB               	incf	ReadOrWriteEE@i^(0+128),f
  3969  0D6E  1903               	skipnz
  3970  0D6F  0AEC               	incf	(ReadOrWriteEE@i+1)^(0+128),f
  3971  0D70  086C               	movf	(ReadOrWriteEE@i+1)^(0+128),w
  3972  0D71  3A80               	xorlw	128
  3973  0D72  00FF               	movwf	127
  3974  0D73  3080               	movlw	128
  3975  0D74  027F               	subwf	127,w
  3976  0D75  1D03               	skipz
  3977  0D76  2D79               	goto	u3635
  3978  0D77  300A               	movlw	10
  3979  0D78  026B               	subwf	ReadOrWriteEE@i^(0+128),w
  3980  0D79                     u3635:	
  3981  0D79  1803               	btfsc	3,0
  3982  0D7A  0008               	return
  3983  0D7B  2D48               	goto	l12318
  3984  0D7C                     __end_of_ReadOrWriteEE:	
  3985  0D7C                     __ptext1109:	
  3986 ;; =============== function _writeIntParam ends ============
  3987                           
  3988                           
  3989 ;; *************** function _readIntParam *****************
  3990 ;; Defined at:
  3991 ;;		line 6 in file "C:\CTK\CTK80A 150928\CTK80A_Jas\kernel.c"
  3992 ;; Parameters:    Size  Location     Type
  3993 ;;  addr            1    wreg     unsigned char 
  3994 ;; Auto vars:     Size  Location     Type
  3995 ;;  addr            1   45[BANK0 ] unsigned char 
  3996 ;;  value           2   43[BANK0 ] unsigned int 
  3997 ;; Return value:  Size  Location     Type
  3998 ;;                  2   39[BANK0 ] unsigned int 
  3999 ;; Registers used:
  4000 ;;		wreg, status,2, status,0, pclath, cstack
  4001 ;; Tracked objects:
  4002 ;;		On entry : 1F/1
  4003 ;;		On exit  : 1F/0
  4004 ;;		Unchanged: FFFE0/0
  4005 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4006 ;;      Params:         0       2       0       0
  4007 ;;      Locals:         0       3       0       0
  4008 ;;      Temps:          0       2       0       0
  4009 ;;      Totals:         0       7       0       0
  4010 ;;Total ram usage:        7 bytes
  4011 ;; Hardware stack levels used:    1
  4012 ;; Hardware stack levels required when called:    6
  4013 ;; This function calls:
  4014 ;;		_ReadEE
  4015 ;;		___lwtoft
  4016 ;;		___ftdiv
  4017 ;;		___fttol
  4018 ;; This function is called by:
  4019 ;;		_ReadOrWriteEE
  4020 ;; This function uses a non-reentrant model
  4021 ;;
  4022  0D7C                     _readIntParam:	
  4023                           
  4024                           ; Regs used in _readIntParam: [wreg+status,2+status,0+pclath+cstack]
  4025                           ;readIntParam@addr stored from wreg
  4026  0D7C  0020               	movlb	0	; select bank0
  4027  0D7D  00CD               	movwf	readIntParam@addr
  4028                           
  4029                           ;kernel.c: 7: unsigned int value = 0;
  4030  0D7E  01CB               	clrf	readIntParam@value
  4031  0D7F  01CC               	clrf	readIntParam@value+1
  4032                           
  4033                           ;kernel.c: 8: value += (unsigned int)ReadEE(addr);
  4034  0D80  084D               	movf	readIntParam@addr,w
  4035  0D81  25B6  3188         	fcall	_ReadEE
  4036  0D83  0020               	movlb	0	; select bank0
  4037  0D84  07CB               	addwf	readIntParam@value,f
  4038  0D85  1803               	skipnc
  4039  0D86  0ACC               	incf	readIntParam@value+1,f
  4040                           
  4041                           ;kernel.c: 9: value += (((unsigned int)ReadEE(addr+1))<<8);
  4042  0D87  0A4D               	incf	readIntParam@addr,w
  4043  0D88  25B6  3188         	fcall	_ReadEE
  4044  0D8A  0020               	movlb	0	; select bank0
  4045  0D8B  00C9               	movwf	??_readIntParam
  4046  0D8C  01CA               	clrf	??_readIntParam+1
  4047  0D8D  3008               	movlw	8
  4048  0D8E                     u3585:	
  4049  0D8E  35C9               	lslf	??_readIntParam,f
  4050  0D8F  0DCA               	rlf	??_readIntParam+1,f
  4051  0D90  0B89               	decfsz	9,f
  4052  0D91  2D8E               	goto	u3585
  4053  0D92  0849               	movf	??_readIntParam,w
  4054  0D93  07CB               	addwf	readIntParam@value,f
  4055  0D94  084A               	movf	??_readIntParam+1,w
  4056  0D95  3DCC               	addwfc	readIntParam@value+1,f
  4057                           
  4058                           ;kernel.c: 10: return (unsigned int)(value/2.3684f);
  4059  0D96  084C               	movf	readIntParam@value+1,w
  4060  0D97  00B6               	movwf	?___lwtoft+1
  4061  0D98  084B               	movf	readIntParam@value,w
  4062  0D99  00B5               	movwf	?___lwtoft
  4063  0D9A  2625  3188         	fcall	___lwtoft
  4064  0D9C  0835               	movf	?___lwtoft,w
  4065  0D9D  00BB               	movwf	?___ftdiv+3
  4066  0D9E  0836               	movf	?___lwtoft+1,w
  4067  0D9F  00BC               	movwf	?___ftdiv+4
  4068  0DA0  0837               	movf	?___lwtoft+2,w
  4069  0DA1  00BD               	movwf	?___ftdiv+5
  4070  0DA2  3094               	movlw	148
  4071  0DA3  00B8               	movwf	?___ftdiv
  4072  0DA4  3017               	movlw	23
  4073  0DA5  00B9               	movwf	?___ftdiv+1
  4074  0DA6  3040               	movlw	64
  4075  0DA7  00BA               	movwf	?___ftdiv+2
  4076  0DA8  25C3  3188         	fcall	___ftdiv
  4077  0DAA  0838               	movf	?___ftdiv,w
  4078  0DAB  00A8               	movwf	?___fttol
  4079  0DAC  0839               	movf	?___ftdiv+1,w
  4080  0DAD  00A9               	movwf	?___fttol+1
  4081  0DAE  083A               	movf	?___ftdiv+2,w
  4082  0DAF  00AA               	movwf	?___fttol+2
  4083  0DB0  273A               	fcall	___fttol
  4084  0DB1  0829               	movf	?___fttol+1,w
  4085  0DB2  00C8               	movwf	?_readIntParam+1
  4086  0DB3  0828               	movf	?___fttol,w
  4087  0DB4  00C7               	movwf	?_readIntParam
  4088  0DB5  0008               	return
  4089  0DB6                     __end_of_readIntParam:	
  4090  0DB6                     __ptext1125:	
  4091 ;; =============== function _WriteEE ends ============
  4092                           
  4093                           
  4094 ;; *************** function _ReadEE *****************
  4095 ;; Defined at:
  4096 ;;		line 31 in file "C:\CTK\CTK80A 150928\CTK80A_Jas\mypic.c"
  4097 ;; Parameters:    Size  Location     Type
  4098 ;;  addr            1    wreg     unsigned char 
  4099 ;; Auto vars:     Size  Location     Type
  4100 ;;  addr            1    4[COMMON] unsigned char 
  4101 ;; Return value:  Size  Location     Type
  4102 ;;                  1    wreg      unsigned char 
  4103 ;; Registers used:
  4104 ;;		wreg
  4105 ;; Tracked objects:
  4106 ;;		On entry : 1F/0
  4107 ;;		On exit  : 1F/3
  4108 ;;		Unchanged: FFFE0/0
  4109 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4110 ;;      Params:         0       0       0       0
  4111 ;;      Locals:         1       0       0       0
  4112 ;;      Temps:          0       0       0       0
  4113 ;;      Totals:         1       0       0       0
  4114 ;;Total ram usage:        1 bytes
  4115 ;; Hardware stack levels used:    1
  4116 ;; Hardware stack levels required when called:    4
  4117 ;; This function calls:
  4118 ;;		Nothing
  4119 ;; This function is called by:
  4120 ;;		_readIntParam
  4121 ;; This function uses a non-reentrant model
  4122 ;;
  4123  0DB6                     _ReadEE:	
  4124                           
  4125                           ; Regs used in _ReadEE: [wreg]
  4126                           ;ReadEE@addr stored from wreg
  4127  0DB6  00F6               	movwf	ReadEE@addr
  4128  0DB7                     l8705:	
  4129                           ;mypic.c: 32: while(RD == 1);
  4130                           
  4131  0DB7  0023               	movlb	3	; select bank3
  4132  0DB8  1815               	btfsc	21,0
  4133  0DB9  2DB7               	goto	l8705
  4134                           
  4135                           ;mypic.c: 33: EEADRL = addr;
  4136  0DBA  0876               	movf	ReadEE@addr,w
  4137  0DBB  0091               	movwf	17	;volatile
  4138                           
  4139                           ;mypic.c: 34: EEPGD = 0;
  4140  0DBC  1395               	bcf	21,7
  4141                           
  4142                           ;mypic.c: 35: CFGS = 0;
  4143  0DBD  1315               	bcf	21,6
  4144                           
  4145                           ;mypic.c: 36: RD = 1;
  4146  0DBE  1415               	bsf	21,0
  4147  0DBF                     l8708:	
  4148                           ;mypic.c: 37: while(RD == 1);
  4149                           
  4150  0DBF  1815               	btfsc	21,0
  4151  0DC0  2DBF               	goto	l8708
  4152                           
  4153                           ;mypic.c: 38: return EEDATL;
  4154  0DC1  0813               	movf	19,w	;volatile
  4155  0DC2  0008               	return
  4156  0DC3                     __end_of_ReadEE:	
  4157  0DC3                     __ptext1115:	
  4158 ;; =============== function ___ftmul ends ============
  4159                           
  4160                           
  4161 ;; *************** function ___ftdiv *****************
  4162 ;; Defined at:
  4163 ;;		line 50 in file "C:\Program Files\HI-TECH Software\PICC\9.80\sources\ftdiv.c"
  4164 ;; Parameters:    Size  Location     Type
  4165 ;;  f2              3   24[BANK0 ] float 
  4166 ;;  f1              3   27[BANK0 ] float 
  4167 ;; Auto vars:     Size  Location     Type
  4168 ;;  f3              3   34[BANK0 ] float 
  4169 ;;  sign            1   38[BANK0 ] unsigned char 
  4170 ;;  exp             1   37[BANK0 ] unsigned char 
  4171 ;;  cntr            1   33[BANK0 ] unsigned char 
  4172 ;; Return value:  Size  Location     Type
  4173 ;;                  3   24[BANK0 ] float 
  4174 ;; Registers used:
  4175 ;;		wreg, status,2, status,0, pclath, cstack
  4176 ;; Tracked objects:
  4177 ;;		On entry : 1F/0
  4178 ;;		On exit  : 1F/0
  4179 ;;		Unchanged: FFFE0/0
  4180 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4181 ;;      Params:         0       6       0       0
  4182 ;;      Locals:         0       6       0       0
  4183 ;;      Temps:          0       3       0       0
  4184 ;;      Totals:         0      15       0       0
  4185 ;;Total ram usage:       15 bytes
  4186 ;; Hardware stack levels used:    1
  4187 ;; Hardware stack levels required when called:    5
  4188 ;; This function calls:
  4189 ;;		___ftpack
  4190 ;; This function is called by:
  4191 ;;		_readIntParam
  4192 ;; This function uses a non-reentrant model
  4193 ;;
  4194  0DC3                     ___ftdiv:	
  4195                           
  4196                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  4197  0DC3  083B               	movf	___ftdiv@f1,w
  4198  0DC4  00BE               	movwf	??___ftdiv
  4199  0DC5  083C               	movf	___ftdiv@f1+1,w
  4200  0DC6  00BF               	movwf	??___ftdiv+1
  4201  0DC7  083D               	movf	___ftdiv@f1+2,w
  4202  0DC8  00C0               	movwf	??___ftdiv+2
  4203  0DC9  1003               	clrc
  4204  0DCA  0D3F               	rlf	??___ftdiv+1,w
  4205  0DCB  0D40               	rlf	??___ftdiv+2,w
  4206  0DCC  00C5               	movwf	___ftdiv@exp
  4207  0DCD  08C5               	movf	___ftdiv@exp,f
  4208  0DCE  1D03               	skipz
  4209  0DCF  2DD4               	goto	l12154
  4210  0DD0  01B8               	clrf	?___ftdiv
  4211  0DD1  01B9               	clrf	?___ftdiv+1
  4212  0DD2  01BA               	clrf	?___ftdiv+2
  4213  0DD3  0008               	return
  4214  0DD4                     l12154:	
  4215  0DD4  0838               	movf	___ftdiv@f2,w
  4216  0DD5  00BE               	movwf	??___ftdiv
  4217  0DD6  0839               	movf	___ftdiv@f2+1,w
  4218  0DD7  00BF               	movwf	??___ftdiv+1
  4219  0DD8  083A               	movf	___ftdiv@f2+2,w
  4220  0DD9  00C0               	movwf	??___ftdiv+2
  4221  0DDA  1003               	clrc
  4222  0DDB  0D3F               	rlf	??___ftdiv+1,w
  4223  0DDC  0D40               	rlf	??___ftdiv+2,w
  4224  0DDD  00C6               	movwf	___ftdiv@sign
  4225  0DDE  08C6               	movf	___ftdiv@sign,f
  4226  0DDF  1D03               	skipz
  4227  0DE0  2DE5               	goto	l9026
  4228  0DE1  01B8               	clrf	?___ftdiv
  4229  0DE2  01B9               	clrf	?___ftdiv+1
  4230  0DE3  01BA               	clrf	?___ftdiv+2
  4231  0DE4  0008               	return
  4232  0DE5                     l9026:	
  4233  0DE5  01C2               	clrf	___ftdiv@f3
  4234  0DE6  01C3               	clrf	___ftdiv@f3+1
  4235  0DE7  01C4               	clrf	___ftdiv@f3+2
  4236  0DE8  3089               	movlw	137
  4237  0DE9  0746               	addwf	___ftdiv@sign,w
  4238  0DEA  00BE               	movwf	??___ftdiv
  4239  0DEB  02C5               	subwf	___ftdiv@exp,f
  4240  0DEC  083D               	movf	___ftdiv@f1+2,w
  4241  0DED  00C6               	movwf	___ftdiv@sign
  4242  0DEE  083A               	movf	___ftdiv@f2+2,w
  4243  0DEF  06C6               	xorwf	___ftdiv@sign,f
  4244  0DF0  3080               	movlw	128
  4245  0DF1  05C6               	andwf	___ftdiv@sign,f
  4246  0DF2  17BC               	bsf	___ftdiv@f1+1,7
  4247  0DF3  01BD               	clrf	___ftdiv@f1+2
  4248  0DF4  17B9               	bsf	___ftdiv@f2+1,7
  4249  0DF5  01BA               	clrf	___ftdiv@f2+2
  4250  0DF6  3018               	movlw	24
  4251  0DF7  00C1               	movwf	___ftdiv@cntr
  4252  0DF8                     l12178:	
  4253  0DF8  35C2               	lslf	___ftdiv@f3,f
  4254  0DF9  0DC3               	rlf	___ftdiv@f3+1,f
  4255  0DFA  0DC4               	rlf	___ftdiv@f3+2,f
  4256  0DFB  083A               	movf	___ftdiv@f2+2,w
  4257  0DFC  023D               	subwf	___ftdiv@f1+2,w
  4258  0DFD  1D03               	skipz
  4259  0DFE  2E05               	goto	u3495
  4260  0DFF  0839               	movf	___ftdiv@f2+1,w
  4261  0E00  023C               	subwf	___ftdiv@f1+1,w
  4262  0E01  1D03               	skipz
  4263  0E02  2E05               	goto	u3495
  4264  0E03  0838               	movf	___ftdiv@f2,w
  4265  0E04  023B               	subwf	___ftdiv@f1,w
  4266  0E05                     u3495:	
  4267  0E05  1C03               	skipc
  4268  0E06  2E0E               	goto	l12184
  4269  0E07  0838               	movf	___ftdiv@f2,w
  4270  0E08  02BB               	subwf	___ftdiv@f1,f
  4271  0E09  0839               	movf	___ftdiv@f2+1,w
  4272  0E0A  3BBC               	subwfb	___ftdiv@f1+1,f
  4273  0E0B  083A               	movf	___ftdiv@f2+2,w
  4274  0E0C  3BBD               	subwfb	___ftdiv@f1+2,f
  4275  0E0D  1442               	bsf	___ftdiv@f3,0
  4276  0E0E                     l12184:	
  4277  0E0E  35BB               	lslf	___ftdiv@f1,f
  4278  0E0F  0DBC               	rlf	___ftdiv@f1+1,f
  4279  0E10  0DBD               	rlf	___ftdiv@f1+2,f
  4280  0E11  0BC1               	decfsz	___ftdiv@cntr,f
  4281  0E12  2DF8               	goto	l12178
  4282  0E13  0842               	movf	___ftdiv@f3,w
  4283  0E14  00A0               	movwf	?___ftpack
  4284  0E15  0843               	movf	___ftdiv@f3+1,w
  4285  0E16  00A1               	movwf	?___ftpack+1
  4286  0E17  0844               	movf	___ftdiv@f3+2,w
  4287  0E18  00A2               	movwf	?___ftpack+2
  4288  0E19  0845               	movf	___ftdiv@exp,w
  4289  0E1A  00A3               	movwf	?___ftpack+3
  4290  0E1B  0846               	movf	___ftdiv@sign,w
  4291  0E1C  00A4               	movwf	?___ftpack+4
  4292  0E1D  2635               	fcall	___ftpack
  4293  0E1E  0820               	movf	?___ftpack,w
  4294  0E1F  00B8               	movwf	?___ftdiv
  4295  0E20  0821               	movf	?___ftpack+1,w
  4296  0E21  00B9               	movwf	?___ftdiv+1
  4297  0E22  0822               	movf	?___ftpack+2,w
  4298  0E23  00BA               	movwf	?___ftdiv+2
  4299  0E24  0008               	return
  4300  0E25                     __end_of___ftdiv:	
  4301  0E25                     __ptext1113:	
  4302 ;; =============== function _API_LCD_INIT ends ============
  4303                           
  4304                           
  4305 ;; *************** function ___lwtoft *****************
  4306 ;; Defined at:
  4307 ;;		line 29 in file "C:\Program Files\HI-TECH Software\PICC\9.80\sources\lwtoft.c"
  4308 ;; Parameters:    Size  Location     Type
  4309 ;;  c               2   21[BANK0 ] unsigned int 
  4310 ;; Auto vars:     Size  Location     Type
  4311 ;;		None
  4312 ;; Return value:  Size  Location     Type
  4313 ;;                  3   21[BANK0 ] float 
  4314 ;; Registers used:
  4315 ;;		wreg, status,2, status,0, pclath, cstack
  4316 ;; Tracked objects:
  4317 ;;		On entry : 1F/0
  4318 ;;		On exit  : 1F/0
  4319 ;;		Unchanged: FFFE0/0
  4320 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4321 ;;      Params:         0       3       0       0
  4322 ;;      Locals:         0       0       0       0
  4323 ;;      Temps:          0       0       0       0
  4324 ;;      Totals:         0       3       0       0
  4325 ;;Total ram usage:        3 bytes
  4326 ;; Hardware stack levels used:    1
  4327 ;; Hardware stack levels required when called:    5
  4328 ;; This function calls:
  4329 ;;		___ftpack
  4330 ;; This function is called by:
  4331 ;;		_readIntParam
  4332 ;;		_writeIntParam
  4333 ;; This function uses a non-reentrant model
  4334 ;;
  4335  0E25                     ___lwtoft:	
  4336                           
  4337                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  4338  0E25  0835               	movf	___lwtoft@c,w
  4339  0E26  00A0               	movwf	?___ftpack
  4340  0E27  0836               	movf	___lwtoft@c+1,w
  4341  0E28  00A1               	movwf	?___ftpack+1
  4342  0E29  01A2               	clrf	?___ftpack+2
  4343  0E2A  308E               	movlw	142
  4344  0E2B  00A3               	movwf	?___ftpack+3
  4345  0E2C  01A4               	clrf	?___ftpack+4
  4346  0E2D  2635               	fcall	___ftpack
  4347  0E2E  0820               	movf	?___ftpack,w
  4348  0E2F  00B5               	movwf	?___lwtoft
  4349  0E30  0821               	movf	?___ftpack+1,w
  4350  0E31  00B6               	movwf	?___lwtoft+1
  4351  0E32  0822               	movf	?___ftpack+2,w
  4352  0E33  00B7               	movwf	?___lwtoft+2
  4353  0E34  0008               	return
  4354  0E35                     __end_of___lwtoft:	
  4355  0E35                     __ptext1121:	
  4356 ;; =============== function ___fttol ends ============
  4357                           
  4358                           
  4359 ;; *************** function ___ftpack *****************
  4360 ;; Defined at:
  4361 ;;		line 63 in file "C:\Program Files\HI-TECH Software\PICC\9.80\sources\float.c"
  4362 ;; Parameters:    Size  Location     Type
  4363 ;;  arg             3    0[BANK0 ] unsigned um
  4364 ;;  exp             1    3[BANK0 ] unsigned char 
  4365 ;;  sign            1    4[BANK0 ] unsigned char 
  4366 ;; Auto vars:     Size  Location     Type
  4367 ;;		None
  4368 ;; Return value:  Size  Location     Type
  4369 ;;                  3    0[BANK0 ] float 
  4370 ;; Registers used:
  4371 ;;		wreg, status,2, status,0
  4372 ;; Tracked objects:
  4373 ;;		On entry : 1F/0
  4374 ;;		On exit  : 1F/0
  4375 ;;		Unchanged: FFFE0/0
  4376 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4377 ;;      Params:         0       5       0       0
  4378 ;;      Locals:         0       0       0       0
  4379 ;;      Temps:          0       3       0       0
  4380 ;;      Totals:         0       8       0       0
  4381 ;;Total ram usage:        8 bytes
  4382 ;; Hardware stack levels used:    1
  4383 ;; Hardware stack levels required when called:    4
  4384 ;; This function calls:
  4385 ;;		Nothing
  4386 ;; This function is called by:
  4387 ;;		___ftdiv
  4388 ;;		___ftmul
  4389 ;;		___lwtoft
  4390 ;; This function uses a non-reentrant model
  4391 ;;
  4392  0E35                     ___ftpack:	
  4393                           
  4394                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  4395  0E35  0823               	movf	___ftpack@exp,w
  4396  0E36  1903               	btfsc	3,2
  4397  0E37  2E3D               	goto	l12004
  4398  0E38  0822               	movf	___ftpack@arg+2,w
  4399  0E39  0421               	iorwf	___ftpack@arg+1,w
  4400  0E3A  0420               	iorwf	___ftpack@arg,w
  4401  0E3B  1D03               	skipz
  4402  0E3C  2E45               	goto	l12010
  4403  0E3D                     l12004:	
  4404  0E3D  01A0               	clrf	?___ftpack
  4405  0E3E  01A1               	clrf	?___ftpack+1
  4406  0E3F  01A2               	clrf	?___ftpack+2
  4407  0E40  0008               	return
  4408  0E41                     l12008:	
  4409  0E41  0AA3               	incf	___ftpack@exp,f
  4410  0E42  36A2               	lsrf	___ftpack@arg+2,f
  4411  0E43  0CA1               	rrf	___ftpack@arg+1,f
  4412  0E44  0CA0               	rrf	___ftpack@arg,f
  4413  0E45                     l12010:	
  4414  0E45  30FE               	movlw	254
  4415  0E46  0522               	andwf	___ftpack@arg+2,w
  4416  0E47  1903               	btfsc	3,2
  4417  0E48  2E53               	goto	l12014
  4418  0E49  2E41               	goto	l12008
  4419  0E4A                     l12012:	
  4420  0E4A  0AA3               	incf	___ftpack@exp,f
  4421  0E4B  0AA0               	incf	___ftpack@arg,f
  4422  0E4C  1903               	skipnz
  4423  0E4D  0AA1               	incf	___ftpack@arg+1,f
  4424  0E4E  1903               	skipnz
  4425  0E4F  0AA2               	incf	___ftpack@arg+2,f
  4426  0E50  36A2               	lsrf	___ftpack@arg+2,f
  4427  0E51  0CA1               	rrf	___ftpack@arg+1,f
  4428  0E52  0CA0               	rrf	___ftpack@arg,f
  4429  0E53                     l12014:	
  4430  0E53  30FF               	movlw	255
  4431  0E54  0522               	andwf	___ftpack@arg+2,w
  4432  0E55  1903               	btfsc	3,2
  4433  0E56  2E5C               	goto	l12018
  4434  0E57  2E4A               	goto	l12012
  4435  0E58                     l12016:	
  4436  0E58  03A3               	decf	___ftpack@exp,f
  4437  0E59  35A0               	lslf	___ftpack@arg,f
  4438  0E5A  0DA1               	rlf	___ftpack@arg+1,f
  4439  0E5B  0DA2               	rlf	___ftpack@arg+2,f
  4440  0E5C                     l12018:	
  4441  0E5C  1FA1               	btfss	___ftpack@arg+1,7
  4442  0E5D  2E58               	goto	l12016
  4443  0E5E  1C23               	btfss	___ftpack@exp,0
  4444  0E5F  13A1               	bcf	___ftpack@arg+1,7
  4445  0E60  36A3               	lsrf	___ftpack@exp,f
  4446  0E61  0823               	movf	___ftpack@exp,w
  4447  0E62  00A7               	movwf	??___ftpack+2
  4448  0E63  01A6               	clrf	??___ftpack+1
  4449  0E64  01A5               	clrf	??___ftpack
  4450  0E65  0825               	movf	??___ftpack,w
  4451  0E66  04A0               	iorwf	___ftpack@arg,f
  4452  0E67  0826               	movf	??___ftpack+1,w
  4453  0E68  04A1               	iorwf	___ftpack@arg+1,f
  4454  0E69  0827               	movf	??___ftpack+2,w
  4455  0E6A  04A2               	iorwf	___ftpack@arg+2,f
  4456  0E6B  0824               	movf	___ftpack@sign,w
  4457  0E6C  1D03               	skipz
  4458  0E6D  17A2               	bsf	___ftpack@arg+2,7
  4459  0E6E  0008               	return
  4460  0E6F                     __end_of___ftpack:	
  4461  0E6F                     PL2:	
  4462  0E6F  0086               	movwf	6
  4463  0E70  0187               	clrf	7
  4464  0E71  3F40               	moviw [0]fsr1
  4465  0E72  00A0               	movwf	??_BatteryStateSwitch
  4466  0E73  3F41               	moviw [1]fsr1
  4467  0E74  00A1               	movwf	??_BatteryStateSwitch+1
  4468  0E75  0824               	movf	BatteryStateSwitch@adjust,w
  4469  0E76  0720               	addwf	??_BatteryStateSwitch,w
  4470  0E77  00A2               	movwf	??_BatteryStateSwitch+2
  4471  0E78  0825               	movf	BatteryStateSwitch@adjust+1,w
  4472  0E79  3D21               	addwfc	??_BatteryStateSwitch+1,w
  4473  0E7A  00A3               	movwf	??_BatteryStateSwitch+3
  4474  0E7B  0277               	subwf	BatteryStateSwitch@BatteryVoltage+1,w
  4475  0E7C  1D03               	skipz
  4476  0E7D  0008               	return
  4477  0E7E  0822               	movf	??_BatteryStateSwitch+2,w
  4478  0E7F  0276               	subwf	BatteryStateSwitch@BatteryVoltage,w
  4479  0E80  0008               	return
  4480  0E81                     PL3:	
  4481  0E81  0086               	movwf	6
  4482  0E82  0187               	clrf	7
  4483  0E83  3F40               	moviw [0]fsr1
  4484  0E84  00BD               	movwf	??_SwitchBatteryState
  4485  0E85  3F41               	moviw [1]fsr1
  4486  0E86  00BE               	movwf	??_SwitchBatteryState+1
  4487  0E87  084E               	movf	_ADBase,w
  4488  0E88  023D               	subwf	??_SwitchBatteryState,w
  4489  0E89  00BF               	movwf	??_SwitchBatteryState+2
  4490  0E8A  084F               	movf	_ADBase+1,w
  4491  0E8B  3B3E               	subwfb	??_SwitchBatteryState+1,w
  4492  0E8C  00C0               	movwf	??_SwitchBatteryState+3
  4493  0E8D  0850               	movf	_ADVoltage,w
  4494  0E8E  073F               	addwf	??_SwitchBatteryState+2,w
  4495  0E8F  00C1               	movwf	??_SwitchBatteryState+4
  4496  0E90  0851               	movf	_ADVoltage+1,w
  4497  0E91  3D40               	addwfc	??_SwitchBatteryState+3,w
  4498  0E92  00C2               	movwf	??_SwitchBatteryState+5
  4499  0E93  0008               	return
  4500  0E94                     PL4:	
  4501  0E94  0086               	movwf	6
  4502  0E95  0187               	clrf	7
  4503  0E96  3F40               	moviw [0]fsr1
  4504  0E97  00D2               	movwf	_ClampVoltage
  4505  0E98  3F41               	moviw [1]fsr1
  4506  0E99  00D3               	movwf	_ClampVoltage+1
  4507  0E9A  084E               	movf	_ADBase,w
  4508  0E9B  02D2               	subwf	_ClampVoltage,f
  4509  0E9C  084F               	movf	_ADBase+1,w
  4510  0E9D  3BD3               	subwfb	_ClampVoltage+1,f
  4511  0E9E  0850               	movf	_ADVoltage,w
  4512  0E9F  07D2               	addwf	_ClampVoltage,f
  4513  0EA0  0851               	movf	_ADVoltage+1,w
  4514  0EA1  3DD3               	addwfc	_ClampVoltage+1,f
  4515  0EA2  0008               	return
  4516  0EA3                     PL5:	
  4517  0EA3  083A               	movf	?_GetBatteryVoltage,w
  4518  0EA4  00E0               	movwf	_gBatteryVoltage
  4519  0EA5  0865               	movf	_BatteryStandard,w
  4520  0EA6  3E02               	addlw	2
  4521  0EA7  0008               	return
  4522  0EA8                     PL6:	
  4523  0EA8  01D4               	clrf	_EnhanceCharge_Time
  4524  0EA9  01D5               	clrf	_EnhanceCharge_Time+1
  4525  0EAA  1170               	bcf	_EqualizingChargeFlag/(0+8),_EqualizingChargeFlag& (0+7)
  4526  0EAB  01D6               	clrf	_EqualizingCharge_Time
  4527  0EAC  01D7               	clrf	_EqualizingCharge_Time+1
  4528  0EAD  11F0               	bcf	_FloatingChargeFlag/(0+8),_FloatingChargeFlag& (0+7)
  4529  0EAE  0008               	return
  4530  0EAF                     PL7:	
  4531  0EAF  083B               	movf	?_GetSolarPanelVoltage+1,w
  4532  0EB0  00C4               	movwf	SolarPanelDealWith@SolarPanelVoltage+1
  4533  0EB1  083A               	movf	?_GetSolarPanelVoltage,w
  4534  0EB2  00C3               	movwf	SolarPanelDealWith@SolarPanelVoltage
  4535  0EB3  0844               	movf	SolarPanelDealWith@SolarPanelVoltage+1,w
  4536  0EB4  00E3               	movwf	_gSolarPanelVoltage+1
  4537  0EB5  0843               	movf	SolarPanelDealWith@SolarPanelVoltage,w
  4538  0EB6  00E2               	movwf	_gSolarPanelVoltage
  4539  0EB7  140C               	bsf	12,0	;volatile
  4540  0EB8  0008               	return
  4541  0EB9                     PL8:	
  4542  0EB9  0863               	movf	_gSolarPanelVoltage+1,w
  4543  0EBA  00A1               	movwf	?___wmul+1
  4544  0EBB  0862               	movf	_gSolarPanelVoltage,w
  4545  0EBC  00A0               	movwf	?___wmul
  4546  0EBD  30E9               	movlw	233
  4547  0EBE  00A2               	movwf	?___wmul+2
  4548  0EBF  30FF               	movlw	255
  4549  0EC0  00A3               	movwf	?___wmul+3
  4550  0EC1  0008               	return
  4551  0EC2                     PL9:	
  4552  0EC2  0820               	movf	?___wmul,w
  4553  0EC3  00BD               	movwf	??_SolarPanelDealWith
  4554  0EC4  0821               	movf	?___wmul+1,w
  4555  0EC5  00BE               	movwf	??_SolarPanelDealWith+1
  4556  0EC6  0008               	return
  4557  0EC7                     PL10:	
  4558  0EC7  083B               	movf	?_GetBatteryVoltage+1,w
  4559  0EC8  00E1               	movwf	_gBatteryVoltage+1
  4560  0EC9  083A               	movf	?_GetBatteryVoltage,w
  4561  0ECA  00E0               	movwf	_gBatteryVoltage
  4562  0ECB  0865               	movf	_BatteryStandard,w
  4563  0ECC  0008               	return
  4564  0ECD                     PL11:	
  4565  0ECD  0861               	movf	_gBatteryVoltage+1,w
  4566  0ECE  00A1               	movwf	?___wmul+1
  4567  0ECF  0860               	movf	_gBatteryVoltage,w
  4568  0ED0  00A0               	movwf	?___wmul
  4569  0ED1  301A               	movlw	26
  4570  0ED2  00A2               	movwf	?___wmul+2
  4571  0ED3  01A3               	clrf	?___wmul+3
  4572  0ED4  0008               	return
  4573  0ED5                     PL12:	
  4574  0ED5  085D               	movf	_SDSolarPanelVoltage+1,w
  4575  0ED6  00A1               	movwf	?___wmul+1
  4576  0ED7  085C               	movf	_SDSolarPanelVoltage,w
  4577  0ED8  00A0               	movwf	?___wmul
  4578  0ED9  302F               	movlw	47
  4579  0EDA  00A2               	movwf	?___wmul+2
  4580  0EDB  01A3               	clrf	?___wmul+3
  4581  0EDC  0008               	return
  4582  0EDD                     PL14:	
  4583  0EDD  0820               	movf	?___wmul,w
  4584  0EDE  073D               	addwf	??_SolarPanelDealWith,w
  4585  0EDF  00BF               	movwf	??_SolarPanelDealWith+2
  4586  0EE0  0821               	movf	?___wmul+1,w
  4587  0EE1  3D3E               	addwfc	??_SolarPanelDealWith+1,w
  4588  0EE2  00C0               	movwf	??_SolarPanelDealWith+3
  4589  0EE3  0008               	return
  4590  0EE4                     PL15:	
  4591  0EE4  00A1               	movwf	?___wmul+1
  4592  0EE5  085A               	movf	_SDBatteryVoltage,w
  4593  0EE6  00A0               	movwf	?___wmul
  4594  0EE7  3030               	movlw	48
  4595  0EE8  00A2               	movwf	?___wmul+2
  4596  0EE9  01A3               	clrf	?___wmul+3
  4597  0EEA  0008               	return
  4598  0EEB                     PL17:	
  4599  0EEB  30E8               	movlw	232
  4600  0EEC  00F6               	movwf	?_CTKSoftDelay
  4601  0EED  3003               	movlw	3
  4602  0EEE  00F7               	movwf	?_CTKSoftDelay+1
  4603  0EEF  0008               	return
  4604  0EF0                     PL18:	
  4605  0EF0  083B               	movf	?_GetBatteryVoltage+1,w
  4606  0EF1  00E1               	movwf	_gBatteryVoltage+1
  4607  0EF2  083A               	movf	?_GetBatteryVoltage,w
  4608  0EF3  00E0               	movwf	_gBatteryVoltage
  4609  0EF4  0008               	return
  4610  0EF5                     PL19:	
  4611  0EF5  0861               	movf	_gBatteryVoltage+1,w
  4612  0EF6  00F7               	movwf	?_BatteryStateSwitch+1
  4613  0EF7  0860               	movf	_gBatteryVoltage,w
  4614  0EF8  00F6               	movwf	?_BatteryStateSwitch
  4615  0EF9  0008               	return
  4616  0EFA                     __ptext1108:	
  4617 ;; =============== function _getADValue ends ============
  4618                           
  4619                           
  4620 ;; *************** function _writeIntParam *****************
  4621 ;; Defined at:
  4622 ;;		line 12 in file "C:\CTK\CTK80A 150928\CTK80A_Jas\kernel.c"
  4623 ;; Parameters:    Size  Location     Type
  4624 ;;  value           2   39[BANK0 ] unsigned int 
  4625 ;;  addr            1   41[BANK0 ] unsigned char 
  4626 ;; Auto vars:     Size  Location     Type
  4627 ;;  data            2   42[BANK0 ] unsigned int 
  4628 ;; Return value:  Size  Location     Type
  4629 ;;		None               void
  4630 ;; Registers used:
  4631 ;;		wreg, status,2, status,0, pclath, cstack
  4632 ;; Tracked objects:
  4633 ;;		On entry : 1F/0
  4634 ;;		On exit  : 1F/3
  4635 ;;		Unchanged: FFFE0/0
  4636 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4637 ;;      Params:         0       3       0       0
  4638 ;;      Locals:         0       2       0       0
  4639 ;;      Temps:          0       0       0       0
  4640 ;;      Totals:         0       5       0       0
  4641 ;;Total ram usage:        5 bytes
  4642 ;; Hardware stack levels used:    1
  4643 ;; Hardware stack levels required when called:    6
  4644 ;; This function calls:
  4645 ;;		___lwtoft
  4646 ;;		___ftmul
  4647 ;;		___fttol
  4648 ;;		_WriteEE
  4649 ;; This function is called by:
  4650 ;;		_ReadOrWriteEE
  4651 ;; This function uses a non-reentrant model
  4652 ;;
  4653  0EFA                     _writeIntParam:	
  4654                           
  4655                           ;kernel.c: 13: unsigned int data = (unsigned int)(value*2.3684f);
  4656                           
  4657                           ; Regs used in _writeIntParam: [wreg+status,2+status,0+pclath+cstack]
  4658  0EFA  0848               	movf	writeIntParam@value+1,w
  4659  0EFB  00B6               	movwf	?___lwtoft+1
  4660  0EFC  0847               	movf	writeIntParam@value,w
  4661  0EFD  00B5               	movwf	?___lwtoft
  4662  0EFE  2625  3188         	fcall	___lwtoft
  4663  0F00  0835               	movf	?___lwtoft,w
  4664  0F01  00BB               	movwf	?___ftmul+3
  4665  0F02  0836               	movf	?___lwtoft+1,w
  4666  0F03  00BC               	movwf	?___ftmul+4
  4667  0F04  0837               	movf	?___lwtoft+2,w
  4668  0F05  00BD               	movwf	?___ftmul+5
  4669  0F06  3094               	movlw	148
  4670  0F07  00B8               	movwf	?___ftmul
  4671  0F08  3017               	movlw	23
  4672  0F09  00B9               	movwf	?___ftmul+1
  4673  0F0A  3040               	movlw	64
  4674  0F0B  00BA               	movwf	?___ftmul+2
  4675  0F0C  278F  3188         	fcall	___ftmul
  4676  0F0E  0838               	movf	?___ftmul,w
  4677  0F0F  00A8               	movwf	?___fttol
  4678  0F10  0839               	movf	?___ftmul+1,w
  4679  0F11  00A9               	movwf	?___fttol+1
  4680  0F12  083A               	movf	?___ftmul+2,w
  4681  0F13  00AA               	movwf	?___fttol+2
  4682  0F14  273A  3188         	fcall	___fttol
  4683  0F16  0829               	movf	?___fttol+1,w
  4684  0F17  00CB               	movwf	writeIntParam@data+1
  4685  0F18  0828               	movf	?___fttol,w
  4686  0F19  00CA               	movwf	writeIntParam@data
  4687                           
  4688                           ;kernel.c: 14: WriteEE( data&0xff, addr);
  4689  0F1A  0849               	movf	writeIntParam@addr,w
  4690  0F1B  00F6               	movwf	?_WriteEE
  4691  0F1C  084A               	movf	writeIntParam@data,w
  4692  0F1D  2724  3188         	fcall	_WriteEE
  4693                           
  4694                           ;kernel.c: 15: WriteEE((data>>8)&0xff, addr+1);
  4695  0F1F  0020               	movlb	0	; select bank0
  4696  0F20  0A49               	incf	writeIntParam@addr,w
  4697  0F21  00F6               	movwf	?_WriteEE
  4698  0F22  084B               	movf	writeIntParam@data+1,w
  4699  0F23  2F24               	ljmp	_WriteEE
  4700  0F24                     __end_of_writeIntParam:	
  4701  0F24                     __ptext1124:	
  4702 ;; =============== function _BatteryStateSwitch ends ============
  4703                           
  4704                           
  4705 ;; *************** function _WriteEE *****************
  4706 ;; Defined at:
  4707 ;;		line 12 in file "C:\CTK\CTK80A 150928\CTK80A_Jas\mypic.c"
  4708 ;; Parameters:    Size  Location     Type
  4709 ;;  data            1    wreg     unsigned char 
  4710 ;;  addr            1    4[COMMON] unsigned char 
  4711 ;; Auto vars:     Size  Location     Type
  4712 ;;  data            1    5[COMMON] unsigned char 
  4713 ;; Return value:  Size  Location     Type
  4714 ;;		None               void
  4715 ;; Registers used:
  4716 ;;		wreg
  4717 ;; Tracked objects:
  4718 ;;		On entry : 1F/0
  4719 ;;		On exit  : 1F/3
  4720 ;;		Unchanged: FFFE0/0
  4721 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4722 ;;      Params:         1       0       0       0
  4723 ;;      Locals:         1       0       0       0
  4724 ;;      Temps:          0       0       0       0
  4725 ;;      Totals:         2       0       0       0
  4726 ;;Total ram usage:        2 bytes
  4727 ;; Hardware stack levels used:    1
  4728 ;; Hardware stack levels required when called:    4
  4729 ;; This function calls:
  4730 ;;		Nothing
  4731 ;; This function is called by:
  4732 ;;		_writeIntParam
  4733 ;; This function uses a non-reentrant model
  4734 ;;
  4735  0F24                     _WriteEE:	
  4736                           
  4737                           ; Regs used in _WriteEE: [wreg]
  4738                           ;WriteEE@data stored from wreg
  4739  0F24  00F7               	movwf	WriteEE@data
  4740  0F25                     l8696:	
  4741                           ;mypic.c: 13: while(WR == 1);
  4742                           
  4743  0F25  0023               	movlb	3	; select bank3
  4744  0F26  1895               	btfsc	21,1
  4745  0F27  2F25               	goto	l8696
  4746                           
  4747                           ;mypic.c: 15: GIE = 0;
  4748  0F28  138B               	bcf	11,7
  4749                           
  4750                           ;mypic.c: 16: EEADRL = addr;
  4751  0F29  0876               	movf	WriteEE@addr,w
  4752  0F2A  0091               	movwf	17	;volatile
  4753                           
  4754                           ;mypic.c: 17: EEDATL = data;
  4755  0F2B  0877               	movf	WriteEE@data,w
  4756  0F2C  0093               	movwf	19	;volatile
  4757                           
  4758                           ;mypic.c: 18: EEPGD = 0;
  4759  0F2D  1395               	bcf	21,7
  4760                           
  4761                           ;mypic.c: 19: CFGS = 0;
  4762  0F2E  1315               	bcf	21,6
  4763                           
  4764                           ;mypic.c: 20: WREN = 1;
  4765  0F2F  1515               	bsf	21,2
  4766                           
  4767                           ;mypic.c: 21: EECON2 = 0x55;
  4768  0F30  3055               	movlw	85
  4769  0F31  0096               	movwf	22	;volatile
  4770                           
  4771                           ;mypic.c: 22: EECON2 = 0xaa;
  4772  0F32  30AA               	movlw	170
  4773  0F33  0096               	movwf	22	;volatile
  4774                           
  4775                           ;mypic.c: 23: WR = 1;
  4776  0F34  1495               	bsf	21,1
  4777                           
  4778                           ;mypic.c: 24: GIE = 1;
  4779  0F35  178B               	bsf	11,7
  4780  0F36                     l8699:	
  4781                           ;mypic.c: 25: while(WR == 1);
  4782                           
  4783  0F36  1895               	btfsc	21,1
  4784  0F37  2F36               	goto	l8699
  4785                           
  4786                           ;mypic.c: 26: WREN = 0;
  4787  0F38  1115               	bcf	21,2
  4788  0F39  0008               	return
  4789  0F3A                     __end_of_WriteEE:	
  4790  0F3A                     __ptext1120:	
  4791 ;; =============== function _system_state_init ends ============
  4792                           
  4793                           
  4794 ;; *************** function ___fttol *****************
  4795 ;; Defined at:
  4796 ;;		line 45 in file "C:\Program Files\HI-TECH Software\PICC\9.80\sources\fttol.c"
  4797 ;; Parameters:    Size  Location     Type
  4798 ;;  f1              3    8[BANK0 ] float 
  4799 ;; Auto vars:     Size  Location     Type
  4800 ;;  lval            4   16[BANK0 ] unsigned long 
  4801 ;;  exp1            1   20[BANK0 ] unsigned char 
  4802 ;;  sign1           1   15[BANK0 ] unsigned char 
  4803 ;; Return value:  Size  Location     Type
  4804 ;;                  4    8[BANK0 ] long 
  4805 ;; Registers used:
  4806 ;;		wreg, status,2, status,0
  4807 ;; Tracked objects:
  4808 ;;		On entry : 1F/0
  4809 ;;		On exit  : 1F/0
  4810 ;;		Unchanged: FFFE0/0
  4811 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4812 ;;      Params:         0       4       0       0
  4813 ;;      Locals:         0       6       0       0
  4814 ;;      Temps:          0       3       0       0
  4815 ;;      Totals:         0      13       0       0
  4816 ;;Total ram usage:       13 bytes
  4817 ;; Hardware stack levels used:    1
  4818 ;; Hardware stack levels required when called:    4
  4819 ;; This function calls:
  4820 ;;		Nothing
  4821 ;; This function is called by:
  4822 ;;		_readIntParam
  4823 ;;		_writeIntParam
  4824 ;; This function uses a non-reentrant model
  4825 ;;
  4826  0F3A                     ___fttol:	
  4827                           
  4828                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  4829  0F3A  27F3  3188         	fcall	PL13	;call to abstracted procedure
  4830  0F3C  1003               	clrc
  4831  0F3D  0D2D               	rlf	??___fttol+1,w
  4832  0F3E  0D2E               	rlf	??___fttol+2,w
  4833  0F3F  00B4               	movwf	___fttol@exp1
  4834  0F40  08B4               	movf	___fttol@exp1,f
  4835  0F41  1D03               	skipz
  4836  0F42  2F48               	goto	l12032
  4837  0F43                     l12030:	
  4838  0F43  01A8               	clrf	?___fttol
  4839  0F44  01A9               	clrf	?___fttol+1
  4840  0F45  01AA               	clrf	?___fttol+2
  4841  0F46  01AB               	clrf	?___fttol+3
  4842  0F47  0008               	return
  4843  0F48                     l12032:	
  4844  0F48  27F3  3188         	fcall	PL13	;call to abstracted procedure
  4845  0F4A  3017               	movlw	23
  4846  0F4B                     u3385:	
  4847  0F4B  36AE               	lsrf	??___fttol+2,f
  4848  0F4C  0CAD               	rrf	??___fttol+1,f
  4849  0F4D  0CAC               	rrf	??___fttol,f
  4850  0F4E  0B89               	decfsz	9,f
  4851  0F4F  2F4B               	goto	u3385
  4852  0F50  082C               	movf	??___fttol,w
  4853  0F51  00AF               	movwf	___fttol@sign1
  4854  0F52  17A9               	bsf	___fttol@f1+1,7
  4855  0F53  01AA               	clrf	___fttol@f1+2
  4856  0F54  0828               	movf	___fttol@f1,w
  4857  0F55  00B0               	movwf	___fttol@lval
  4858  0F56  0829               	movf	___fttol@f1+1,w
  4859  0F57  00B1               	movwf	___fttol@lval+1
  4860  0F58  082A               	movf	___fttol@f1+2,w
  4861  0F59  00B2               	movwf	___fttol@lval+2
  4862  0F5A  01B3               	clrf	___fttol@lval+3
  4863  0F5B  308E               	movlw	142
  4864  0F5C  02B4               	subwf	___fttol@exp1,f
  4865  0F5D  1FB4               	btfss	___fttol@exp1,7
  4866  0F5E  2F6B               	goto	l12052
  4867  0F5F  0834               	movf	___fttol@exp1,w
  4868  0F60  3A80               	xorlw	128
  4869  0F61  3E8F               	addlw	143
  4870  0F62  1C03               	btfss	3,0
  4871  0F63  2F43               	goto	l12030
  4872  0F64                     l12048:	
  4873  0F64  36B3               	lsrf	___fttol@lval+3,f
  4874  0F65  0CB2               	rrf	___fttol@lval+2,f
  4875  0F66  0CB1               	rrf	___fttol@lval+1,f
  4876  0F67  0CB0               	rrf	___fttol@lval,f
  4877  0F68  0FB4               	incfsz	___fttol@exp1,f
  4878  0F69  2F64               	goto	l12048
  4879  0F6A  2F78               	goto	l12058
  4880  0F6B                     l12052:	
  4881  0F6B  3018               	movlw	24
  4882  0F6C  0234               	subwf	___fttol@exp1,w
  4883  0F6D  1803               	btfsc	3,0
  4884  0F6E  2F43               	goto	l12030
  4885  0F6F                     l9053:	
  4886  0F6F  08B4               	movf	___fttol@exp1,f
  4887  0F70  1903               	btfsc	3,2
  4888  0F71  2F78               	goto	l12058
  4889  0F72  35B0               	lslf	___fttol@lval,f
  4890  0F73  0DB1               	rlf	___fttol@lval+1,f
  4891  0F74  0DB2               	rlf	___fttol@lval+2,f
  4892  0F75  0DB3               	rlf	___fttol@lval+3,f
  4893  0F76  03B4               	decf	___fttol@exp1,f
  4894  0F77  2F6F               	goto	l9053
  4895  0F78                     l12058:	
  4896  0F78  082F               	movf	___fttol@sign1,w
  4897  0F79  1903               	btfsc	3,2
  4898  0F7A  2F86               	goto	l12062
  4899  0F7B  09B0               	comf	___fttol@lval,f
  4900  0F7C  09B1               	comf	___fttol@lval+1,f
  4901  0F7D  09B2               	comf	___fttol@lval+2,f
  4902  0F7E  09B3               	comf	___fttol@lval+3,f
  4903  0F7F  0AB0               	incf	___fttol@lval,f
  4904  0F80  1903               	skipnz
  4905  0F81  0AB1               	incf	___fttol@lval+1,f
  4906  0F82  1903               	skipnz
  4907  0F83  0AB2               	incf	___fttol@lval+2,f
  4908  0F84  1903               	skipnz
  4909  0F85  0AB3               	incf	___fttol@lval+3,f
  4910  0F86                     l12062:	
  4911  0F86  0833               	movf	___fttol@lval+3,w
  4912  0F87  00AB               	movwf	?___fttol+3
  4913  0F88  0832               	movf	___fttol@lval+2,w
  4914  0F89  00AA               	movwf	?___fttol+2
  4915  0F8A  0831               	movf	___fttol@lval+1,w
  4916  0F8B  00A9               	movwf	?___fttol+1
  4917  0F8C  0830               	movf	___fttol@lval,w
  4918  0F8D  00A8               	movwf	?___fttol
  4919  0F8E  0008               	return
  4920  0F8F                     __end_of___fttol:	
  4921  0F8F                     __ptext1114:	
  4922 ;; =============== function ___lwtoft ends ============
  4923                           
  4924                           
  4925 ;; *************** function ___ftmul *****************
  4926 ;; Defined at:
  4927 ;;		line 52 in file "C:\Program Files\HI-TECH Software\PICC\9.80\sources\ftmul.c"
  4928 ;; Parameters:    Size  Location     Type
  4929 ;;  f1              3   24[BANK0 ] float 
  4930 ;;  f2              3   27[BANK0 ] float 
  4931 ;; Auto vars:     Size  Location     Type
  4932 ;;  f3_as_produc    3   34[BANK0 ] unsigned um
  4933 ;;  sign            1   38[BANK0 ] unsigned char 
  4934 ;;  cntr            1   37[BANK0 ] unsigned char 
  4935 ;;  exp             1   33[BANK0 ] unsigned char 
  4936 ;; Return value:  Size  Location     Type
  4937 ;;                  3   24[BANK0 ] float 
  4938 ;; Registers used:
  4939 ;;		wreg, status,2, status,0, pclath, cstack
  4940 ;; Tracked objects:
  4941 ;;		On entry : 1F/0
  4942 ;;		On exit  : 1F/0
  4943 ;;		Unchanged: FFFE0/0
  4944 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4945 ;;      Params:         0       6       0       0
  4946 ;;      Locals:         0       6       0       0
  4947 ;;      Temps:          0       3       0       0
  4948 ;;      Totals:         0      15       0       0
  4949 ;;Total ram usage:       15 bytes
  4950 ;; Hardware stack levels used:    1
  4951 ;; Hardware stack levels required when called:    5
  4952 ;; This function calls:
  4953 ;;		___ftpack
  4954 ;; This function is called by:
  4955 ;;		_writeIntParam
  4956 ;; This function uses a non-reentrant model
  4957 ;;
  4958  0F8F                     ___ftmul:	
  4959                           
  4960                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  4961  0F8F  0838               	movf	___ftmul@f1,w
  4962  0F90  00BE               	movwf	??___ftmul
  4963  0F91  0839               	movf	___ftmul@f1+1,w
  4964  0F92  00BF               	movwf	??___ftmul+1
  4965  0F93  083A               	movf	___ftmul@f1+2,w
  4966  0F94  00C0               	movwf	??___ftmul+2
  4967  0F95  1003               	clrc
  4968  0F96  0D3F               	rlf	??___ftmul+1,w
  4969  0F97  0D40               	rlf	??___ftmul+2,w
  4970  0F98  00C1               	movwf	___ftmul@exp
  4971  0F99  08C1               	movf	___ftmul@exp,f
  4972  0F9A  1D03               	skipz
  4973  0F9B  2FA0               	goto	l12198
  4974  0F9C  01B8               	clrf	?___ftmul
  4975  0F9D  01B9               	clrf	?___ftmul+1
  4976  0F9E  01BA               	clrf	?___ftmul+2
  4977  0F9F  0008               	return
  4978  0FA0                     l12198:	
  4979  0FA0  083B               	movf	___ftmul@f2,w
  4980  0FA1  00BE               	movwf	??___ftmul
  4981  0FA2  083C               	movf	___ftmul@f2+1,w
  4982  0FA3  00BF               	movwf	??___ftmul+1
  4983  0FA4  083D               	movf	___ftmul@f2+2,w
  4984  0FA5  00C0               	movwf	??___ftmul+2
  4985  0FA6  1003               	clrc
  4986  0FA7  0D3F               	rlf	??___ftmul+1,w
  4987  0FA8  0D40               	rlf	??___ftmul+2,w
  4988  0FA9  00C6               	movwf	___ftmul@sign
  4989  0FAA  08C6               	movf	___ftmul@sign,f
  4990  0FAB  1D03               	skipz
  4991  0FAC  2FB1               	goto	l12204
  4992  0FAD  01B8               	clrf	?___ftmul
  4993  0FAE  01B9               	clrf	?___ftmul+1
  4994  0FAF  01BA               	clrf	?___ftmul+2
  4995  0FB0  0008               	return
  4996  0FB1                     l12204:	
  4997  0FB1  0846               	movf	___ftmul@sign,w
  4998  0FB2  3E7B               	addlw	123
  4999  0FB3  07C1               	addwf	___ftmul@exp,f
  5000  0FB4  083A               	movf	___ftmul@f1+2,w
  5001  0FB5  00C6               	movwf	___ftmul@sign
  5002  0FB6  083D               	movf	___ftmul@f2+2,w
  5003  0FB7  06C6               	xorwf	___ftmul@sign,f
  5004  0FB8  3080               	movlw	128
  5005  0FB9  05C6               	andwf	___ftmul@sign,f
  5006  0FBA  17B9               	bsf	___ftmul@f1+1,7
  5007  0FBB  17BC               	bsf	___ftmul@f2+1,7
  5008  0FBC  30FF               	movlw	255
  5009  0FBD  05BB               	andwf	___ftmul@f2,f
  5010  0FBE  05BC               	andwf	___ftmul@f2+1,f
  5011  0FBF  01BD               	clrf	___ftmul@f2+2
  5012  0FC0  01C2               	clrf	___ftmul@f3_as_product
  5013  0FC1  01C3               	clrf	___ftmul@f3_as_product+1
  5014  0FC2  01C4               	clrf	___ftmul@f3_as_product+2
  5015  0FC3  3007               	movlw	7
  5016  0FC4  00C5               	movwf	___ftmul@cntr
  5017  0FC5                     l12222:	
  5018  0FC5  1C38               	btfss	___ftmul@f1,0
  5019  0FC6  2FCA               	goto	l12226
  5020  0FC7  083B               	movf	___ftmul@f2,w
  5021  0FC8  27FA  3188         	fcall	PL16	;call to abstracted procedure
  5022  0FCA                     l12226:	
  5023  0FCA  36BA               	lsrf	___ftmul@f1+2,f
  5024  0FCB  0CB9               	rrf	___ftmul@f1+1,f
  5025  0FCC  0CB8               	rrf	___ftmul@f1,f
  5026  0FCD  35BB               	lslf	___ftmul@f2,f
  5027  0FCE  0DBC               	rlf	___ftmul@f2+1,f
  5028  0FCF  0DBD               	rlf	___ftmul@f2+2,f
  5029  0FD0  0BC5               	decfsz	___ftmul@cntr,f
  5030  0FD1  2FC5               	goto	l12222
  5031  0FD2  3009               	movlw	9
  5032  0FD3  00C5               	movwf	___ftmul@cntr
  5033  0FD4                     l12234:	
  5034  0FD4  1C38               	btfss	___ftmul@f1,0
  5035  0FD5  2FD9               	goto	l12238
  5036  0FD6  083B               	movf	___ftmul@f2,w
  5037  0FD7  27FA  3188         	fcall	PL16	;call to abstracted procedure
  5038  0FD9                     l12238:	
  5039  0FD9  36BA               	lsrf	___ftmul@f1+2,f
  5040  0FDA  0CB9               	rrf	___ftmul@f1+1,f
  5041  0FDB  0CB8               	rrf	___ftmul@f1,f
  5042  0FDC  36C4               	lsrf	___ftmul@f3_as_product+2,f
  5043  0FDD  0CC3               	rrf	___ftmul@f3_as_product+1,f
  5044  0FDE  0CC2               	rrf	___ftmul@f3_as_product,f
  5045  0FDF  0BC5               	decfsz	___ftmul@cntr,f
  5046  0FE0  2FD4               	goto	l12234
  5047  0FE1  0842               	movf	___ftmul@f3_as_product,w
  5048  0FE2  00A0               	movwf	?___ftpack
  5049  0FE3  0843               	movf	___ftmul@f3_as_product+1,w
  5050  0FE4  00A1               	movwf	?___ftpack+1
  5051  0FE5  0844               	movf	___ftmul@f3_as_product+2,w
  5052  0FE6  00A2               	movwf	?___ftpack+2
  5053  0FE7  0841               	movf	___ftmul@exp,w
  5054  0FE8  00A3               	movwf	?___ftpack+3
  5055  0FE9  0846               	movf	___ftmul@sign,w
  5056  0FEA  00A4               	movwf	?___ftpack+4
  5057  0FEB  2635               	fcall	___ftpack
  5058  0FEC  0820               	movf	?___ftpack,w
  5059  0FED  00B8               	movwf	?___ftmul
  5060  0FEE  0821               	movf	?___ftpack+1,w
  5061  0FEF  00B9               	movwf	?___ftmul+1
  5062  0FF0  0822               	movf	?___ftpack+2,w
  5063  0FF1  00BA               	movwf	?___ftmul+2
  5064  0FF2  0008               	return
  5065  0FF3                     __end_of___ftmul:	
  5066  0FF3                     PL13:	
  5067  0FF3  0828               	movf	___fttol@f1,w
  5068  0FF4  00AC               	movwf	??___fttol
  5069  0FF5  0829               	movf	___fttol@f1+1,w
  5070  0FF6  00AD               	movwf	??___fttol+1
  5071  0FF7  082A               	movf	___fttol@f1+2,w
  5072  0FF8  00AE               	movwf	??___fttol+2
  5073  0FF9  0008               	return
  5074  0FFA                     PL16:	
  5075  0FFA  07C2               	addwf	___ftmul@f3_as_product,f
  5076  0FFB  083C               	movf	___ftmul@f2+1,w
  5077  0FFC  3DC3               	addwfc	___ftmul@f3_as_product+1,f
  5078  0FFD  083D               	movf	___ftmul@f2+2,w
  5079  0FFE  3DC4               	addwfc	___ftmul@f3_as_product+2,f
  5080  0FFF  0008               	return
  5081                           
  5082                           	psect	bitbssCOMMON
  5083  0380                     __pbitbssCOMMON:	
  5084  0380                     _DAYTIME:	
  5085  0380                     	ds	1
  5086  0381                     _EnhanceChargeFlag:	
  5087  0381                     	ds	1
  5088  0382                     _EqualizingChargeFlag:	
  5089  0382                     	ds	1
  5090  0383                     _FloatingChargeFlag:	
  5091  0383                     	ds	1
  5092  0384                     _LPVFlag:	
  5093  0384                     	ds	1
  5094  0385                     _LoadOpen:	
  5095  0385                     	ds	1
  5096  0386                     _LoadShort:	
  5097  0386                     	ds	1
  5098  0387                     _PVChargeFlag:	
  5099  0387                     	ds	1
  5100  0388                     _PVState:	
  5101  0388                     	ds	1
  5102  0389                     _PWMChargeFlag:	
  5103  0389                     	ds	1
  5104  038A                     _PWMFlag:	
  5105  038A                     	ds	1
  5106  038B                     _T2Flag:	
  5107  038B                     	ds	1
  5108  038C                     _isSaveSettings:	
  5109  038C                     	ds	1
  5110  038D                     _isSettingMode:	
  5111  038D                     	ds	1
  5112  038E                     _needInitSetting:	
  5113  038E                     	ds	1
  5114                           
  5115                           	psect	bssCOMMON
  5116  0079                     __pbssCOMMON:	
  5117  0079                     _DutyRatio:	
  5118  0079                     	ds	1
  5119                           
  5120                           	psect	bssBANK0
  5121  004E                     __pbssBANK0:	
  5122  004E                     _ADBase:	
  5123  004E                     	ds	2
  5124  0050                     _ADVoltage:	
  5125  0050                     	ds	2
  5126  0052                     _ClampVoltage:	
  5127  0052                     	ds	2
  5128  0054                     _EnhanceCharge_Time:	
  5129  0054                     	ds	2
  5130  0056                     _EqualizingCharge_Time:	
  5131  0056                     	ds	2
  5132  0058                     _OverLoadTime:	
  5133  0058                     	ds	2
  5134  005A                     _SDBatteryVoltage:	
  5135  005A                     	ds	2
  5136  005C                     _SDSolarPanelVoltage:	
  5137  005C                     	ds	2
  5138  005E                     _TimeModeHour:	
  5139  005E                     	ds	2
  5140  0060                     _gBatteryVoltage:	
  5141  0060                     	ds	2
  5142  0062                     _gSolarPanelVoltage:	
  5143  0062                     	ds	2
  5144  0064                     _BatteryLastState:	
  5145  0064                     	ds	1
  5146  0065                     _BatteryStandard:	
  5147  0065                     	ds	1
  5148  0066                     _BatteryState:	
  5149  0066                     	ds	1
  5150  0067                     _LPVCount:	
  5151  0067                     	ds	1
  5152  0068                     _LightTime:	
  5153  0068                     	ds	1
  5154  0069                     _PVCount:	
  5155  0069                     	ds	1
  5156  006A                     _PWM_CONTROL_FLAG:	
  5157  006A                     	ds	1
  5158  006B                     _PwmCount:	
  5159  006B                     	ds	1
  5160  006C                     _lcd_extinguwish_timer:	
  5161  006C                     	ds	1
  5162  006D                     _lcd_state:	
  5163  006D                     	ds	1
  5164                           
  5165                           	psect	dataBANK0
  5166  006E                     __pdataBANK0:	
  5167  006E                     _KeyEvent_PendKeyCode:	
  5168  006E                     	ds	1
  5169  006F                     _SystemModeType:	
  5170  006F                     	ds	1
  5171                           
  5172                           	psect	bssBANK1
  5173  00CC                     __pbssBANK1:	
  5174  00CC                     _ParamConfig:	
  5175  00CC                     	ds	22
  5176  00E2                     _PWM_CONTROL_TIMEOUT:	
  5177  00E2                     	ds	4
  5178  00E6                     _gFbVoltage:	
  5179  00E6                     	ds	2
  5180                           
  5181                           	psect	dataBANK1
  5182  00A0                     __pdataBANK1:	
  5183  00A0                     _Battery_12V:	
  5184  00A0                     	ds	22
  5185  00B6                     _Battery_24V:	
  5186  00B6                     	ds	22
  5187                           
  5188                           	psect	clrtext
  5189  00D1                     clear_ram:	
  5190                           ;	Called with FSR0 containing the base address, and
  5191                           ;	WREG with the size to clear
  5192                           
  5193  00D1  0064               	clrwdt	;clear the watchdog before getting into this loop
  5194  00D2                     clrloop:	
  5195  00D2  0180               	clrf	0	;clear RAM location pointed to by FSR
  5196  00D3  3101               	addfsr 0,1
  5197  00D4  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  5198  00D5  28D2               	goto	clrloop	;have we reached the end yet?
  5199  00D6  3400               	retlw	0	;all done for this memory range, return
  5200                           
  5201                           	psect	inittext
  5202  00D7                     init_ram:	
  5203  00D7  00FE               	movwf	126
  5204  00D8                     initloop:	
  5205  00D8  0012               	moviw fsr0++
  5206  00D9  001E               	movwi fsr1++
  5207  00DA  0BFE               	decfsz	126,f
  5208  00DB  28D8               	goto	initloop
  5209  00DC  3400               	retlw	0
  5210                           
  5211                           	psect	cstackBANK1
  5212  00E8                     __pcstackBANK1:	
  5213  00E8                     ?_ReadOrWriteEE:	
  5214  00E8                     ReadOrWriteEE@read:	
  5215                           ; 0 bytes @ 0x0
  5216                           
  5217                           
  5218                           ; 2 bytes @ 0x0
  5219  00E8                     	ds	2
  5220  00EA                     ReadOrWriteEE@startAddr:	
  5221                           
  5222                           ; 1 bytes @ 0x2
  5223  00EA                     	ds	1
  5224  00EB                     ReadOrWriteEE@i:	
  5225                           
  5226                           ; 2 bytes @ 0x3
  5227  00EB                     	ds	2
  5228                           
  5229                           	psect	cstackCOMMON
  5230  0072                     __pcstackCOMMON:	
  5231  0072                     ?_API_LCD_INIT:	
  5232  0072                     ?_API_LCD_CLEAR:	
  5233                           ; 0 bytes @ 0x0
  5234                           
  5235  0072                     ?_system_state_init:	
  5236                           ; 0 bytes @ 0x0
  5237                           
  5238  0072                     ?_LoadParamFromEPPROM:	
  5239                           ; 0 bytes @ 0x0
  5240                           
  5241  0072                     ?_KaiJi:	
  5242                           ; 0 bytes @ 0x0
  5243                           
  5244  0072                     ?_SelectMode:	
  5245                           ; 0 bytes @ 0x0
  5246                           
  5247  0072                     ?_LoadCurrentDealWith:	
  5248                           ; 0 bytes @ 0x0
  5249                           
  5250  0072                     ?_SwitchBatteryState:	
  5251                           ; 0 bytes @ 0x0
  5252                           
  5253  0072                     ?_LedDisplay:	
  5254                           ; 0 bytes @ 0x0
  5255                           
  5256  0072                     ?_SolarPanelDealWith:	
  5257                           ; 0 bytes @ 0x0
  5258                           
  5259  0072                     ?_PWMCharge:	
  5260                           ; 0 bytes @ 0x0
  5261                           
  5262  0072                     ?_lcd_write_command:	
  5263                           ; 0 bytes @ 0x0
  5264                           
  5265  0072                     ?_handlerKeyEventInput:	
  5266                           ; 0 bytes @ 0x0
  5267                           
  5268  0072                     ?_setPWM:	
  5269                           ; 0 bytes @ 0x0
  5270                           
  5271  0072                     ??_setPWM:	
  5272                           ; 0 bytes @ 0x0
  5273                           
  5274  0072                     ?_openOrClosePWM:	
  5275                           ; 0 bytes @ 0x0
  5276                           
  5277  0072                     ?_handlerPWMInterrupt:	
  5278                           ; 0 bytes @ 0x0
  5279                           
  5280  0072                     ?_main:	
  5281                           ; 0 bytes @ 0x0
  5282                           
  5283  0072                     ?_ISR_Timer:	
  5284                           ; 0 bytes @ 0x0
  5285                           
  5286  0072                     ?_lcd_write_data:	
  5287                           ; 0 bytes @ 0x0
  5288                           
  5289  0072                     ?_API_LCD_MOVE_POINT:	
  5290                           ; 0 bytes @ 0x0
  5291                           
  5292  0072                     ?_lcd_move_char:	
  5293                           ; 0 bytes @ 0x0
  5294                           
  5295  0072                     ?_ReadEE:	
  5296                           ; 0 bytes @ 0x0
  5297                           
  5298  0072                     setPWM@open:	
  5299                           ; 1 bytes @ 0x0
  5300                           
  5301  0072                     handlerKeyEventInput@keyCode:	
  5302                           ; 1 bytes @ 0x0
  5303                           
  5304                           
  5305                           ; 2 bytes @ 0x0
  5306  0072                     	ds	1
  5307  0073                     ??_openOrClosePWM:	
  5308  0073                     openOrClosePWM@open:	
  5309                           ; 0 bytes @ 0x1
  5310                           
  5311                           
  5312                           ; 1 bytes @ 0x1
  5313  0073                     	ds	1
  5314  0074                     ??_handlerKeyEventInput:	
  5315  0074                     ??_handlerPWMInterrupt:	
  5316                           ; 0 bytes @ 0x2
  5317                           
  5318                           
  5319                           ; 0 bytes @ 0x2
  5320  0074                     	ds	2
  5321  0076                     ??_SelectMode:	
  5322  0076                     ??_LedDisplay:	
  5323                           ; 0 bytes @ 0x4
  5324                           
  5325  0076                     ?_CTKSoftDelay:	
  5326                           ; 0 bytes @ 0x4
  5327                           
  5328  0076                     ??_ReadEE:	
  5329                           ; 0 bytes @ 0x4
  5330                           
  5331  0076                     ?_WriteEE:	
  5332                           ; 0 bytes @ 0x4
  5333                           
  5334  0076                     ??_ISR_Timer:	
  5335                           ; 0 bytes @ 0x4
  5336                           
  5337  0076                     ??___wmul:	
  5338                           ; 0 bytes @ 0x4
  5339                           
  5340  0076                     ??___lwtoft:	
  5341                           ; 0 bytes @ 0x4
  5342                           
  5343  0076                     ?_BatteryStateSwitch:	
  5344                           ; 0 bytes @ 0x4
  5345                           
  5346  0076                     WriteEE@addr:	
  5347                           ; 1 bytes @ 0x4
  5348                           
  5349  0076                     ReadEE@addr:	
  5350                           ; 1 bytes @ 0x4
  5351                           
  5352  0076                     CTKSoftDelay@x:	
  5353                           ; 1 bytes @ 0x4
  5354                           
  5355  0076                     BatteryStateSwitch@BatteryVoltage:	
  5356                           ; 2 bytes @ 0x4
  5357                           
  5358  0076                     ___wmul@product:	
  5359                           ; 2 bytes @ 0x4
  5360                           
  5361                           
  5362                           ; 2 bytes @ 0x4
  5363  0076                     	ds	1
  5364  0077                     ??_WriteEE:	
  5365  0077                     WriteEE@data:	
  5366                           ; 0 bytes @ 0x5
  5367                           
  5368                           
  5369                           ; 1 bytes @ 0x5
  5370  0077                     	ds	1
  5371  0078                     ??_API_LCD_INIT:	
  5372  0078                     ??_API_LCD_CLEAR:	
  5373                           ; 0 bytes @ 0x6
  5374                           
  5375  0078                     ??_system_state_init:	
  5376                           ; 0 bytes @ 0x6
  5377                           
  5378  0078                     ??_LoadParamFromEPPROM:	
  5379                           ; 0 bytes @ 0x6
  5380                           
  5381  0078                     ??_LoadCurrentDealWith:	
  5382                           ; 0 bytes @ 0x6
  5383                           
  5384  0078                     ??_PWMCharge:	
  5385                           ; 0 bytes @ 0x6
  5386                           
  5387  0078                     ??_lcd_write_command:	
  5388                           ; 0 bytes @ 0x6
  5389                           
  5390  0078                     ??_CTKSoftDelay:	
  5391                           ; 0 bytes @ 0x6
  5392                           
  5393  0078                     ??_main:	
  5394                           ; 0 bytes @ 0x6
  5395                           
  5396  0078                     ??_lcd_write_data:	
  5397                           ; 0 bytes @ 0x6
  5398                           
  5399  0078                     ??_lcd_move_char:	
  5400                           ; 0 bytes @ 0x6
  5401                           
  5402  0078                     ??_writeIntParam:	
  5403                           ; 0 bytes @ 0x6
  5404                           
  5405  0078                     ??_ReadOrWriteEE:	
  5406                           ; 0 bytes @ 0x6
  5407                           
  5408  0078                     ??_GetBatteryVoltage:	
  5409                           ; 0 bytes @ 0x6
  5410                           
  5411  0078                     ??_GetSolarPanelVoltage:	
  5412                           ; 0 bytes @ 0x6
  5413                           
  5414  0078                     ??_GetLoadCurrentVoltage:	
  5415                           ; 0 bytes @ 0x6
  5416                           
  5417                           
  5418                           	psect	cstackBANK0
  5419  0020                     __pcstackBANK0:	
  5420                           ; 0 bytes @ 0x6
  5421                           
  5422  0020                     ??_BatteryStateSwitch:	
  5423  0020                     ?___wmul:	
  5424                           ; 0 bytes @ 0x0
  5425                           
  5426  0020                     ?___ftpack:	
  5427                           ; 2 bytes @ 0x0
  5428                           
  5429  0020                     CTKSoftDelay@a:	
  5430                           ; 3 bytes @ 0x0
  5431                           
  5432  0020                     ___wmul@multiplier:	
  5433                           ; 2 bytes @ 0x0
  5434                           
  5435  0020                     ___ftpack@arg:	
  5436                           ; 2 bytes @ 0x0
  5437                           
  5438                           
  5439                           ; 3 bytes @ 0x0
  5440  0020                     	ds	2
  5441  0022                     CTKSoftDelay@b:	
  5442  0022                     ___wmul@multiplicand:	
  5443                           ; 2 bytes @ 0x2
  5444                           
  5445                           
  5446                           ; 2 bytes @ 0x2
  5447  0022                     	ds	1
  5448  0023                     ___ftpack@exp:	
  5449                           
  5450                           ; 1 bytes @ 0x3
  5451  0023                     	ds	1
  5452  0024                     ?_getADValueOneTime:	
  5453  0024                     lcd_write_command@command:	
  5454                           ; 2 bytes @ 0x4
  5455                           
  5456  0024                     lcd_write_data@data:	
  5457                           ; 1 bytes @ 0x4
  5458                           
  5459  0024                     ___ftpack@sign:	
  5460                           ; 1 bytes @ 0x4
  5461                           
  5462  0024                     BatteryStateSwitch@adjust:	
  5463                           ; 1 bytes @ 0x4
  5464                           
  5465                           
  5466                           ; 2 bytes @ 0x4
  5467  0024                     	ds	1
  5468  0025                     ??___ftpack:	
  5469  0025                     ??_API_LCD_MOVE_POINT:	
  5470                           ; 0 bytes @ 0x5
  5471                           
  5472                           
  5473                           ; 0 bytes @ 0x5
  5474  0025                     	ds	1
  5475  0026                     ??_getADValueOneTime:	
  5476  0026                     API_LCD_MOVE_POINT@position:	
  5477                           ; 0 bytes @ 0x6
  5478                           
  5479                           
  5480                           ; 1 bytes @ 0x6
  5481  0026                     	ds	1
  5482  0027                     API_LCD_MOVE_POINT@i:	
  5483                           
  5484                           ; 1 bytes @ 0x7
  5485  0027                     	ds	1
  5486  0028                     ?___fttol:	
  5487  0028                     lcd_move_char@postion:	
  5488                           ; 4 bytes @ 0x8
  5489                           
  5490  0028                     getADValueOneTime@channel:	
  5491                           ; 1 bytes @ 0x8
  5492                           
  5493  0028                     ___fttol@f1:	
  5494                           ; 1 bytes @ 0x8
  5495                           
  5496                           
  5497                           ; 3 bytes @ 0x8
  5498  0028                     	ds	1
  5499  0029                     getADValueOneTime@AD_Result:	
  5500                           
  5501                           ; 2 bytes @ 0x9
  5502  0029                     	ds	2
  5503  002B                     ?_getADValue:	
  5504                           
  5505                           ; 2 bytes @ 0xB
  5506  002B                     	ds	1
  5507  002C                     ??___fttol:	
  5508                           
  5509                           ; 0 bytes @ 0xC
  5510  002C                     	ds	1
  5511  002D                     ??_getADValue:	
  5512                           
  5513                           ; 0 bytes @ 0xD
  5514  002D                     	ds	2
  5515  002F                     getADValue@channel:	
  5516  002F                     ___fttol@sign1:	
  5517                           ; 1 bytes @ 0xF
  5518                           
  5519                           
  5520                           ; 1 bytes @ 0xF
  5521  002F                     	ds	1
  5522  0030                     getADValue@AD_Result:	
  5523  0030                     ___fttol@lval:	
  5524                           ; 2 bytes @ 0x10
  5525                           
  5526                           
  5527                           ; 4 bytes @ 0x10
  5528  0030                     	ds	2
  5529  0032                     getADValue@max:	
  5530                           
  5531                           ; 2 bytes @ 0x12
  5532  0032                     	ds	2
  5533  0034                     ___fttol@exp1:	
  5534  0034                     getADValue@min:	
  5535                           ; 1 bytes @ 0x14
  5536                           
  5537                           
  5538                           ; 2 bytes @ 0x14
  5539  0034                     	ds	1
  5540  0035                     ?___lwtoft:	
  5541  0035                     ___lwtoft@c:	
  5542                           ; 3 bytes @ 0x15
  5543                           
  5544                           
  5545                           ; 2 bytes @ 0x15
  5546  0035                     	ds	1
  5547  0036                     getADValue@i:	
  5548                           
  5549                           ; 2 bytes @ 0x16
  5550  0036                     	ds	2
  5551  0038                     ?___ftdiv:	
  5552  0038                     ?___ftmul:	
  5553                           ; 3 bytes @ 0x18
  5554                           
  5555  0038                     getADValue@AD_OneResult:	
  5556                           ; 3 bytes @ 0x18
  5557                           
  5558  0038                     ___ftdiv@f2:	
  5559                           ; 2 bytes @ 0x18
  5560                           
  5561  0038                     ___ftmul@f1:	
  5562                           ; 3 bytes @ 0x18
  5563                           
  5564                           
  5565                           ; 3 bytes @ 0x18
  5566  0038                     	ds	2
  5567  003A                     ?_GetBatteryVoltage:	
  5568  003A                     ?_GetSolarPanelVoltage:	
  5569                           ; 2 bytes @ 0x1A
  5570                           
  5571  003A                     ?_GetLoadCurrentVoltage:	
  5572                           ; 2 bytes @ 0x1A
  5573                           
  5574                           
  5575                           ; 2 bytes @ 0x1A
  5576  003A                     	ds	1
  5577  003B                     ___ftdiv@f1:	
  5578  003B                     ___ftmul@f2:	
  5579                           ; 3 bytes @ 0x1B
  5580                           
  5581                           
  5582                           ; 3 bytes @ 0x1B
  5583  003B                     	ds	2
  5584  003D                     ??_KaiJi:	
  5585  003D                     ??_SwitchBatteryState:	
  5586                           ; 0 bytes @ 0x1D
  5587                           
  5588  003D                     ??_SolarPanelDealWith:	
  5589                           ; 0 bytes @ 0x1D
  5590                           
  5591  003D                     PWMCharge@ChangeBatteryVoltag:	
  5592                           ; 0 bytes @ 0x1D
  5593                           
  5594                           
  5595                           ; 2 bytes @ 0x1D
  5596  003D                     	ds	1
  5597  003E                     ??___ftdiv:	
  5598  003E                     ??___ftmul:	
  5599                           ; 0 bytes @ 0x1E
  5600                           
  5601                           
  5602                           ; 0 bytes @ 0x1E
  5603  003E                     	ds	3
  5604  0041                     ___ftdiv@cntr:	
  5605  0041                     ___ftmul@exp:	
  5606                           ; 1 bytes @ 0x21
  5607                           
  5608                           
  5609                           ; 1 bytes @ 0x21
  5610  0041                     	ds	1
  5611  0042                     ___ftdiv@f3:	
  5612  0042                     ___ftmul@f3_as_product:	
  5613                           ; 3 bytes @ 0x22
  5614                           
  5615                           
  5616                           ; 3 bytes @ 0x22
  5617  0042                     	ds	1
  5618  0043                     SolarPanelDealWith@SolarPanelVoltage:	
  5619                           
  5620                           ; 2 bytes @ 0x23
  5621  0043                     	ds	2
  5622  0045                     ___ftdiv@exp:	
  5623  0045                     ___ftmul@cntr:	
  5624                           ; 1 bytes @ 0x25
  5625                           
  5626                           
  5627                           ; 1 bytes @ 0x25
  5628  0045                     	ds	1
  5629  0046                     ___ftdiv@sign:	
  5630  0046                     ___ftmul@sign:	
  5631                           ; 1 bytes @ 0x26
  5632                           
  5633                           
  5634                           ; 1 bytes @ 0x26
  5635  0046                     	ds	1
  5636  0047                     ?_writeIntParam:	
  5637  0047                     ?_readIntParam:	
  5638                           ; 0 bytes @ 0x27
  5639                           
  5640  0047                     writeIntParam@value:	
  5641                           ; 2 bytes @ 0x27
  5642                           
  5643                           
  5644                           ; 2 bytes @ 0x27
  5645  0047                     	ds	2
  5646  0049                     ??_readIntParam:	
  5647  0049                     writeIntParam@addr:	
  5648                           ; 0 bytes @ 0x29
  5649                           
  5650                           
  5651                           ; 1 bytes @ 0x29
  5652  0049                     	ds	1
  5653  004A                     writeIntParam@data:	
  5654                           
  5655                           ; 2 bytes @ 0x2A
  5656  004A                     	ds	1
  5657  004B                     readIntParam@value:	
  5658                           
  5659                           ; 2 bytes @ 0x2B
  5660  004B                     	ds	2
  5661  004D                     readIntParam@addr:	
  5662                           
  5663                           ; 1 bytes @ 0x2D
  5664  004D                     	ds	1
  5665                           
  5666                           	psect	intentry
  5667  0004                     __pintentry:	
  5668 ;; =============== function _SelectMode ends ============
  5669                           
  5670                           
  5671 ;; *************** function _ISR_Timer *****************
  5672 ;; Defined at:
  5673 ;;		line 249 in file "C:\CTK\CTK80A 150928\CTK80A_Jas\main.c"
  5674 ;; Parameters:    Size  Location     Type
  5675 ;;		None
  5676 ;; Auto vars:     Size  Location     Type
  5677 ;;		None
  5678 ;; Return value:  Size  Location     Type
  5679 ;;		None               void
  5680 ;; Registers used:
  5681 ;;		wreg, status,2, status,0, pclath, cstack
  5682 ;; Tracked objects:
  5683 ;;		On entry : 0/0
  5684 ;;		On exit  : 1F/0
  5685 ;;		Unchanged: FFE00/0
  5686 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5687 ;;      Params:         0       0       0       0
  5688 ;;      Locals:         0       0       0       0
  5689 ;;      Temps:          0       0       0       0
  5690 ;;      Totals:         0       0       0       0
  5691 ;;Total ram usage:        0 bytes
  5692 ;; Hardware stack levels used:    1
  5693 ;; Hardware stack levels required when called:    3
  5694 ;; This function calls:
  5695 ;;		_handlerKeyEventInput
  5696 ;;		_handlerPWMInterrupt
  5697 ;; This function is called by:
  5698 ;;		Interrupt level 1
  5699 ;; This function uses a non-reentrant model
  5700 ;;
  5701  0004                     _ISR_Timer:	
  5702                           
  5703                           ; Regs used in _ISR_Timer: [wreg+status,2+status,0+pclath+cstack]
  5704  0004  3180               	pagesel	$
  5705                           
  5706                           ;main.c: 250: if(IOCBF3 && lcd_state != 0 && lcd_state != 1)
  5707  0005  0027               	movlb	7	; select bank7
  5708  0006  1D96               	btfss	22,3
  5709  0007  2819               	goto	i1l10798
  5710  0008  0020               	movlb	0	; select bank0
  5711  0009  086D               	movf	_lcd_state,w
  5712  000A  1903               	btfsc	3,2
  5713  000B  2819               	goto	i1l10798
  5714  000C  036D               	decf	_lcd_state,w
  5715  000D  1903               	skipnz
  5716  000E  2819               	goto	i1l10798
  5717                           
  5718                           ;main.c: 251: {
  5719                           ;main.c: 253: if (RB3 == 0) {
  5720  000F  198D               	btfsc	13,3
  5721  0010  2817               	goto	i1l10796
  5722                           
  5723                           ;main.c: 254: handlerKeyEventInput(3);
  5724  0011  3003               	movlw	3
  5725  0012  00F2               	movwf	?_handlerKeyEventInput
  5726  0013  01F3               	clrf	?_handlerKeyEventInput+1
  5727  0014  3180  209B  3180   	fcall	_handlerKeyEventInput
  5728  0017                     i1l10796:	
  5729                           
  5730                           ;main.c: 255: }
  5731                           ;main.c: 256: IOCBF3 = 0;
  5732  0017  0027               	movlb	7	; select bank7
  5733  0018  1196               	bcf	22,3
  5734  0019                     i1l10798:	
  5735                           
  5736                           ;main.c: 257: }
  5737                           ;main.c: 258: if(IOCBF5 && lcd_state != 0 && lcd_state != 1)
  5738  0019  0027               	movlb	7	; select bank7
  5739  001A  1E96               	btfss	22,5
  5740  001B  282D               	goto	i1l10810
  5741  001C  0020               	movlb	0	; select bank0
  5742  001D  086D               	movf	_lcd_state,w
  5743  001E  1903               	btfsc	3,2
  5744  001F  282D               	goto	i1l10810
  5745  0020  036D               	decf	_lcd_state,w
  5746  0021  1903               	skipnz
  5747  0022  282D               	goto	i1l10810
  5748                           
  5749                           ;main.c: 259: {
  5750                           ;main.c: 260: if (RB5 == 0) {
  5751  0023  1A8D               	btfsc	13,5
  5752  0024  282B               	goto	i1l10808
  5753                           
  5754                           ;main.c: 261: handlerKeyEventInput(4);
  5755  0025  3004               	movlw	4
  5756  0026  00F2               	movwf	?_handlerKeyEventInput
  5757  0027  01F3               	clrf	?_handlerKeyEventInput+1
  5758  0028  3180  209B  3180   	fcall	_handlerKeyEventInput
  5759  002B                     i1l10808:	
  5760                           
  5761                           ;main.c: 262: }
  5762                           ;main.c: 263: IOCBF5 = 0;
  5763  002B  0027               	movlb	7	; select bank7
  5764  002C  1296               	bcf	22,5
  5765  002D                     i1l10810:	
  5766                           
  5767                           ;main.c: 264: }
  5768                           ;main.c: 266: if(IOCBF4)
  5769  002D  0027               	movlb	7	; select bank7
  5770  002E  1E16               	btfss	22,4
  5771  002F  283B               	goto	i1l10818
  5772                           
  5773                           ;main.c: 267: {
  5774                           ;main.c: 269: if (RB4 == 0) {
  5775  0030  0020               	movlb	0	; select bank0
  5776  0031  1A0D               	btfsc	13,4
  5777  0032  2839               	goto	i1l10816
  5778                           
  5779                           ;main.c: 270: handlerKeyEventInput(2);
  5780  0033  3002               	movlw	2
  5781  0034  00F2               	movwf	?_handlerKeyEventInput
  5782  0035  01F3               	clrf	?_handlerKeyEventInput+1
  5783  0036  3180  209B  3180   	fcall	_handlerKeyEventInput
  5784  0039                     i1l10816:	
  5785                           
  5786                           ;main.c: 271: }
  5787                           ;main.c: 273: IOCBF4 = 0;
  5788  0039  0027               	movlb	7	; select bank7
  5789  003A  1216               	bcf	22,4
  5790  003B                     i1l10818:	
  5791                           
  5792                           ;main.c: 277: {
  5793                           ;main.c: 278: OS_Time ++;
  5794  003B  0020               	movlb	0	; select bank0
  5795  003C  1C11               	btfss	17,0
  5796  003D  2843               	goto	i1l10824
  5797                           
  5798                           ;main.c: 279: TMR1IF = 0;
  5799  003E  1011               	bcf	17,0
  5800                           
  5801                           ;main.c: 280: TMR1H = (65536 - (100000 / 4)) >> 8;
  5802  003F  309E               	movlw	158
  5803  0040  0097               	movwf	23	;volatile
  5804                           
  5805                           ;main.c: 281: TMR1L = (65536 - (100000 / 4)) & 0xFF;
  5806  0041  3058               	movlw	88
  5807  0042  0096               	movwf	22	;volatile
  5808  0043                     i1l10824:	
  5809                           
  5810                           ;main.c: 282: }
  5811                           ;main.c: 283: if(TMR2IF)
  5812  0043  1C91               	btfss	17,1
  5813  0044  2853               	goto	i1l10836
  5814                           
  5815                           ;main.c: 284: {
  5816                           ;main.c: 285: TMR2IF = 0;
  5817  0045  1091               	bcf	17,1
  5818                           
  5819                           ;main.c: 286: if(PWMFlag == 1)
  5820  0046  1D71               	btfss	_PWMFlag/(0+8),_PWMFlag& (0+7)
  5821  0047  2850               	goto	i1l10834
  5822                           
  5823                           ;main.c: 287: {
  5824                           ;main.c: 288: PwmCount++;
  5825  0048  0AEB               	incf	_PwmCount,f
  5826                           
  5827                           ;main.c: 290: if(PwmCount >= DutyRatio)
  5828  0049  0879               	movf	_DutyRatio,w
  5829  004A  026B               	subwf	_PwmCount,w
  5830  004B  1C03               	skipc
  5831  004C  284F               	goto	i1l2312
  5832                           
  5833                           ;main.c: 291: (PORTA |= (1 << 0));
  5834  004D  140C               	bsf	12,0	;volatile
  5835  004E  2850               	goto	i1l10834
  5836  004F                     i1l2312:	
  5837                           
  5838                           ;main.c: 292: else
  5839                           ;main.c: 293: (PORTA &= ~(1 << 0));
  5840  004F  100C               	bcf	12,0	;volatile
  5841  0050                     i1l10834:	
  5842                           
  5843                           ;main.c: 294: }
  5844                           ;main.c: 295: handlerPWMInterrupt();
  5845  0050  3180  20B8  3180   	fcall	_handlerPWMInterrupt
  5846  0053                     i1l10836:	
  5847                           
  5848                           ;main.c: 296: }
  5849                           ;main.c: 297: if(TMR4IF)
  5850  0053  1C93               	btfss	19,1
  5851  0054  2858               	goto	i1l10842
  5852                           
  5853                           ;main.c: 298: {
  5854                           ;main.c: 299: TMR4IF = 0;
  5855  0055  1093               	bcf	19,1
  5856                           
  5857                           ;main.c: 300: RE2 = ~RE2;
  5858  0056  3004               	movlw	4
  5859  0057  0690               	xorwf	16,f
  5860  0058                     i1l10842:	
  5861                           
  5862                           ;main.c: 301: }
  5863                           ;main.c: 302: if(TMR6IF)
  5864  0058  1993               	btfsc	19,3
  5865                           
  5866                           ;main.c: 303: {
  5867                           ;main.c: 304: TMR6IF = 0;
  5868  0059  1193               	bcf	19,3
  5869  005A  0009               	retfie
  5870  005B                     __end_of_ISR_Timer:	
  5871                           
  5872                           	psect	text1130
  5873  00B8                     __ptext1130:	
  5874 ;; =============== function _ISR_Timer ends ============
  5875                           
  5876                           
  5877 ;; *************** function _handlerPWMInterrupt *****************
  5878 ;; Defined at:
  5879 ;;		line 144 in file "C:\CTK\CTK80A 150928\CTK80A_Jas\main.c"
  5880 ;; Parameters:    Size  Location     Type
  5881 ;;		None
  5882 ;; Auto vars:     Size  Location     Type
  5883 ;;		None
  5884 ;; Return value:  Size  Location     Type
  5885 ;;		None               void
  5886 ;; Registers used:
  5887 ;;		wreg, status,2, status,0, pclath, cstack
  5888 ;; Tracked objects:
  5889 ;;		On entry : 1F/0
  5890 ;;		On exit  : 1F/0
  5891 ;;		Unchanged: FFE00/0
  5892 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5893 ;;      Params:         0       0       0       0
  5894 ;;      Locals:         0       0       0       0
  5895 ;;      Temps:          0       0       0       0
  5896 ;;      Totals:         0       0       0       0
  5897 ;;Total ram usage:        0 bytes
  5898 ;; Hardware stack levels used:    1
  5899 ;; Hardware stack levels required when called:    2
  5900 ;; This function calls:
  5901 ;;		_openOrClosePWM
  5902 ;; This function is called by:
  5903 ;;		_ISR_Timer
  5904 ;; This function uses a non-reentrant model
  5905 ;;
  5906  00B8                     _handlerPWMInterrupt:	
  5907                           
  5908                           ;main.c: 145: if(PWM_CONTROL_FLAG == 0){
  5909                           
  5910                           ; Regs used in _handlerPWMInterrupt: [wreg+status,2+status,0+pclath+cstack]
  5911  00B8  08EA               	movf	_PWM_CONTROL_FLAG,f
  5912  00B9  1D03               	skipz
  5913  00BA  0008               	return
  5914                           
  5915                           ;main.c: 146: openOrClosePWM(0);
  5916  00BB  3000               	movlw	0
  5917  00BC  28BD               	ljmp	_openOrClosePWM
  5918  00BD                     __end_of_handlerPWMInterrupt:	
  5919  00BD                     __ptext1131:	
  5920 ;; =============== function _handlerPWMInterrupt ends ============
  5921                           
  5922                           
  5923 ;; *************** function _openOrClosePWM *****************
  5924 ;; Defined at:
  5925 ;;		line 139 in file "C:\CTK\CTK80A 150928\CTK80A_Jas\main.c"
  5926 ;; Parameters:    Size  Location     Type
  5927 ;;  open            1    wreg     unsigned char 
  5928 ;; Auto vars:     Size  Location     Type
  5929 ;;  open            1    1[COMMON] unsigned char 
  5930 ;; Return value:  Size  Location     Type
  5931 ;;		None               void
  5932 ;; Registers used:
  5933 ;;		wreg, status,2, status,0, pclath, cstack
  5934 ;; Tracked objects:
  5935 ;;		On entry : 1F/0
  5936 ;;		On exit  : 1F/0
  5937 ;;		Unchanged: FFE00/0
  5938 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5939 ;;      Params:         0       0       0       0
  5940 ;;      Locals:         1       0       0       0
  5941 ;;      Temps:          0       0       0       0
  5942 ;;      Totals:         1       0       0       0
  5943 ;;Total ram usage:        1 bytes
  5944 ;; Hardware stack levels used:    1
  5945 ;; Hardware stack levels required when called:    1
  5946 ;; This function calls:
  5947 ;;		_setPWM
  5948 ;; This function is called by:
  5949 ;;		_handlerPWMInterrupt
  5950 ;; This function uses a non-reentrant model
  5951 ;;
  5952  00BD                     _openOrClosePWM:	
  5953                           
  5954                           ; Regs used in _openOrClosePWM: [wreg+status,2+status,0+pclath+cstack]
  5955                           ;openOrClosePWM@open stored from wreg
  5956  00BD  00F3               	movwf	openOrClosePWM@open
  5957                           
  5958                           ;main.c: 140: PWM_CONTROL_FLAG = open;
  5959  00BE  00EA               	movwf	_PWM_CONTROL_FLAG
  5960                           
  5961                           ;main.c: 141: TMR2IE = open;
  5962  00BF  1C73               	btfss	openOrClosePWM@open,0
  5963  00C0  28C4               	goto	u162_20
  5964  00C1  0021               	movlb	1	; select bank1
  5965  00C2  1491               	bsf	17,1
  5966  00C3  28C6               	goto	i1l10742
  5967  00C4                     u162_20:	
  5968  00C4  0021               	movlb	1	; select bank1
  5969  00C5  1091               	bcf	17,1
  5970  00C6                     i1l10742:	
  5971                           
  5972                           ;main.c: 142: setPWM(open);
  5973  00C6  0873               	movf	openOrClosePWM@open,w
  5974  00C7  28C8               	ljmp	_setPWM
  5975  00C8                     __end_of_openOrClosePWM:	
  5976  00C8                     __ptext1132:	
  5977 ;; =============== function _openOrClosePWM ends ============
  5978                           
  5979                           
  5980 ;; *************** function _setPWM *****************
  5981 ;; Defined at:
  5982 ;;		line 132 in file "C:\CTK\CTK80A 150928\CTK80A_Jas\main.c"
  5983 ;; Parameters:    Size  Location     Type
  5984 ;;  open            1    wreg     unsigned char 
  5985 ;; Auto vars:     Size  Location     Type
  5986 ;;  open            1    0[COMMON] unsigned char 
  5987 ;; Return value:  Size  Location     Type
  5988 ;;		None               void
  5989 ;; Registers used:
  5990 ;;		wreg
  5991 ;; Tracked objects:
  5992 ;;		On entry : 1F/1
  5993 ;;		On exit  : 1F/0
  5994 ;;		Unchanged: FFFE0/0
  5995 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5996 ;;      Params:         0       0       0       0
  5997 ;;      Locals:         1       0       0       0
  5998 ;;      Temps:          0       0       0       0
  5999 ;;      Totals:         1       0       0       0
  6000 ;;Total ram usage:        1 bytes
  6001 ;; Hardware stack levels used:    1
  6002 ;; This function calls:
  6003 ;;		Nothing
  6004 ;; This function is called by:
  6005 ;;		_openOrClosePWM
  6006 ;; This function uses a non-reentrant model
  6007 ;;
  6008  00C8                     _setPWM:	
  6009                           
  6010                           ; Regs used in _setPWM: [wreg]
  6011                           ;setPWM@open stored from wreg
  6012  00C8  00F2               	movwf	setPWM@open
  6013                           
  6014                           ;main.c: 133: if(open == 1){
  6015  00C9  0B72               	decfsz	setPWM@open,w
  6016  00CA  28CE               	goto	i1l2266
  6017                           
  6018                           ;main.c: 134: (PORTA &= ~(1 << 0));
  6019  00CB  0020               	movlb	0	; select bank0
  6020  00CC  100C               	bcf	12,0	;volatile
  6021                           
  6022                           ;main.c: 135: }else{
  6023  00CD  0008               	return
  6024  00CE                     i1l2266:	
  6025                           
  6026                           ;main.c: 136: (PORTA |= (1 << 0));
  6027  00CE  0020               	movlb	0	; select bank0
  6028  00CF  140C               	bsf	12,0	;volatile
  6029  00D0  0008               	return
  6030  00D1                     __end_of_setPWM:	
  6031                           
  6032                           	psect	text1133
  6033  009B                     __ptext1133:	
  6034 ;; =============== function _setPWM ends ============
  6035                           
  6036                           
  6037 ;; *************** function _handlerKeyEventInput *****************
  6038 ;; Defined at:
  6039 ;;		line 33 in file "C:\CTK\CTK80A 150928\CTK80A_Jas\main.c"
  6040 ;; Parameters:    Size  Location     Type
  6041 ;;  keyCode         2    0[COMMON] int 
  6042 ;; Auto vars:     Size  Location     Type
  6043 ;;		None
  6044 ;; Return value:  Size  Location     Type
  6045 ;;		None               void
  6046 ;; Registers used:
  6047 ;;		wreg
  6048 ;; Tracked objects:
  6049 ;;		On entry : 1F/0
  6050 ;;		On exit  : 1F/0
  6051 ;;		Unchanged: FFFE0/0
  6052 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6053 ;;      Params:         2       0       0       0
  6054 ;;      Locals:         0       0       0       0
  6055 ;;      Temps:          2       0       0       0
  6056 ;;      Totals:         4       0       0       0
  6057 ;;Total ram usage:        4 bytes
  6058 ;; Hardware stack levels used:    1
  6059 ;; This function calls:
  6060 ;;		Nothing
  6061 ;; This function is called by:
  6062 ;;		_ISR_Timer
  6063 ;; This function uses a non-reentrant model
  6064 ;;
  6065  009B                     _handlerKeyEventInput:	
  6066                           
  6067                           ;main.c: 35: if(keyCode == 2 || keyCode == 3 || keyCode == 4){
  6068                           
  6069                           ; Regs used in _handlerKeyEventInput: [wreg]
  6070  009B  0872               	movf	handlerKeyEventInput@keyCode,w
  6071  009C  3A02               	xorlw	2
  6072  009D  0473               	iorwf	handlerKeyEventInput@keyCode+1,w
  6073  009E  1903               	skipnz
  6074  009F  28AA               	goto	i1l10732
  6075  00A0  0872               	movf	handlerKeyEventInput@keyCode,w
  6076  00A1  3A03               	xorlw	3
  6077  00A2  0473               	iorwf	handlerKeyEventInput@keyCode+1,w
  6078  00A3  1903               	skipnz
  6079  00A4  28AA               	goto	i1l10732
  6080  00A5  0872               	movf	handlerKeyEventInput@keyCode,w
  6081  00A6  3A04               	xorlw	4
  6082  00A7  0473               	iorwf	handlerKeyEventInput@keyCode+1,w
  6083  00A8  1D03               	skipz
  6084  00A9  0008               	return
  6085  00AA                     i1l10732:	
  6086                           
  6087                           ;main.c: 36: if(KeyEvent_PendKeyCode != keyCode){
  6088  00AA  086E               	movf	_KeyEvent_PendKeyCode,w
  6089  00AB  00F4               	movwf	??_handlerKeyEventInput
  6090  00AC  01F5               	clrf	??_handlerKeyEventInput+1
  6091  00AD  0873               	movf	handlerKeyEventInput@keyCode+1,w
  6092  00AE  0675               	xorwf	??_handlerKeyEventInput+1,w
  6093  00AF  1D03               	skipz
  6094  00B0  28B3               	goto	u160_25
  6095  00B1  0872               	movf	handlerKeyEventInput@keyCode,w
  6096  00B2  0674               	xorwf	??_handlerKeyEventInput,w
  6097  00B3                     u160_25:	
  6098  00B3  1903               	skipnz
  6099  00B4  0008               	return
  6100                           
  6101                           ;main.c: 38: KeyEvent_KeyTime = OS_Time;
  6102  00B5  0872               	movf	handlerKeyEventInput@keyCode,w
  6103  00B6  00EE               	movwf	_KeyEvent_PendKeyCode
  6104  00B7  0008               	return
  6105  00B8                     __end_of_handlerKeyEventInput:	
  6106                           
  6107                           	psect	text1134
  6108  0000                     __ptext1134:	
  6109 ;; =============== function _handlerKeyEventInput ends ============
  6110                           
  6111  007E                     btemp	set	126	;btemp
  6112  007E                     wtemp0	set	126


HI-TECH Software PICC Macro Assembler V9.80 build 6738 
Symbol Table                                                                                   Mon Nov 09 09:34:30 2015

             __size_of_ReadOrWriteEE 0038                                   _RD 0CA8  
                                 _WR 0CA9         PWMCharge@ChangeBatteryVoltag 003D  
                ___wmul@multiplicand 0022                       ?_lcd_move_char 0072  
                     _isSaveSettings 038C                           ReadEE@addr 0076  
                                _GIE 005F                                  _RC1 0071  
                                _RB3 006B                                  _RC2 0072  
                                _RB4 006C                                  _RC3 0073  
                                _RB5 006D                                  _RB6 006E  
                                _RE2 0082                                  _PR2 001B  
                                _PR4 0416                 ??_SwitchBatteryState 003D  
                                wreg 0009          __end_of_LoadParamFromEPPROM 0B0B  
                       _PVChargeFlag 0387                         ___ftdiv@cntr 0041  
                       ___ftdiv@sign 0046                                 l4335 0000  
                               l4338 0000                                 l4346 0000  
                               l4349 0000                                 l4367 0000  
                               l4377 0000                                 l6552 0000  
                               l9026 0DE5                                 l6562 0000  
                               l9053 0F6F                                 l6549 0000  
                               _ADGO 04E9                                 l6559 0000  
                               l8702 0000                                 l8711 0000  
                               l9159 0000                                 l8720 0000  
                               l8705 0DB7                                 l8714 0000  
                               l8811 0D2E                                 l8803 0D38  
                               l8708 0DBF                                 l8717 0AB8  
                               l8733 0000                                 l8805 0CFC  
                               l8750 0AFC                                 l8807 0D11  
                               l8752 0AFA                                 l8736 0000  
                               l8745 0000                                 l8915 0CDE  
                               l8739 0000                                 l8916 0CE2  
                               l8757 0B02                                 l8917 0CE6  
                               l8766 0B46                                 l8846 092F  
                               l8838 08CB                                 l8696 0F25  
                               l8792 0C3A                                 _CFGS 0CAE  
                               l8778 0B3E                                 l8699 0F36  
                               l8939 0000                                 l8867 099D  
                               l8795 0C75                                 l8884 0000  
                               l8788 0C16                                 STR_1 005F  
                               _LATB 010D                                 _LATC 010E  
                               u4125 0C56                                 u4215 0D03  
                               u3380 0000                                 u3605 0A7E  
                               u4245 0D20                                 u4175 0C99  
                               u3385 0F4B                                 u3465 0AC4  
                               u3635 0D79                                 _PEIE 005E  
                               u3495 0E05                                 u3585 0D8E  
                               u3595 0A72                                 u3675 0BD4  
                               u3835 08DC                                 u3855 0902  
                               u3895 092A                                 u3995 0989  
                               _WREN 0CAA               __end_of_lcd_write_data 0A2C  
                               _main 0862           __size_of_system_state_init 0048  
                       ___ftpack@arg 0020                         ___ftpack@exp 0023  
                               fsr0h 0005                                 fsr1h 0007  
                               fsr0l 0004                                 indf0 0000  
                               fsr1l 0006                                 btemp 007E  
                               start 005B           API_LCD_MOVE_POINT@position 0026  
                       ___ftmul@cntr 0045                         ___ftmul@sign 0046  
                       ___fttol@exp1 0034                         ___fttol@lval 0030  
                         _LedDisplay 0CDA                    _GetBatteryVoltage 09D6  
                              l12000 0000                                l12010 0E45  
                              l12002 0000                                l12012 0E4A  
                              l12004 0E3D                                l12100 0000  
                              l12022 0000                                l12014 0E53  
                              l12030 0F43                                l12102 0000  
                              l12110 0000                                l12024 0000  
                              l12016 0E58                                l12008 0E41  
                              l12040 0000                                l12032 0F48  
                              l12104 0000                                l12112 0000  
                              l12120 0000                                l12026 0000  
                              l12018 0E5C                                l12050 0000  
                              l12042 0000                                l12034 0000  
                              l12106 0000                                l12114 0000  
                              l12122 0000                                l12130 0000  
                              l12210 0000                                l12060 0000  
                              l12052 0F6B                                l12036 0000  
                              l12028 0000                                l12108 0000  
                              l12116 0000                                l12124 0000  
                              l12132 0000                                l12220 0000  
                              l12212 0000                                l12204 0FB1  
                              l12062 0F86                                l12038 0000  
                              l12070 0000                                l12118 0000  
                              l12126 0000                                l12142 0000  
                              l12134 0000                                l12230 0000  
                              l12222 0FC5                                l12214 0000  
                              l12206 0000                                l12302 0000  
                              l12310 0D44                                l12048 0F64  
                              l12080 0000                                l12072 0000  
                              l12128 0000                                l12144 0000  
                              l12136 0000                                l12160 0000  
                              l12240 0000                                l12232 0000  
                              l12216 0000                                l12208 0000  
                              l12312 0000                                l12400 0000  
                              l12058 0F78                                l12090 0000  
                              l12082 0000                                l12074 0000  
                              l12066 0000                                l12138 0000  
                              l12170 0000                                l12162 0000  
                              l12154 0DD4                                l12242 0000  
                              l12234 0FD4                                l12226 0FCA  
                              l12218 0000                                l12306 0000  
                              l12322 0D5C                                l12330 0000  
                              l12410 0B2F                                l12402 0000  
                              l12092 0000                                l12084 0000  
                              l12076 0000                                l12068 0000  
                              l12172 0000                                l12164 0000  
                              l12148 0000                                l12244 0000  
                              l12228 0000                                l12252 0000  
                              l12260 0000                                l12324 0D6C  
                              l12308 0000                                l12340 0000  
                              l12420 0000                                l12404 0000  
                              l10750 0000                                l12094 0000  
                              l12086 0000                                l12078 0000  
                              l12182 0000                                l12174 0000  
                              l12166 0000                                l12238 0FD9  
                              l12254 0000                                l12270 0000  
                              l12326 0000                                l12318 0D48  
                              l12334 0000                                l12342 0000  
                              l12350 0000                                l12422 0000  
                              l12414 0000                                l12406 0B28  
                              l12502 0000                                l12510 0914  
                              l12430 0000                                l10760 0AF5  
                              l12096 0000                                l12088 0000  
                              l12184 0E0E                                l12176 0000  
                              l12168 0000                                l12192 0000  
                              l12248 0000                                l12256 0000  
                              l12272 0000                                l12328 0000  
                              l12336 0000                                l12360 0BB3  
                              l12424 0000                                l12504 0000  
                              l12440 0000                                l12432 0000  
                              l10762 0AF8                                l10754 0000  
                              l12098 0000                                l12186 0000  
                              l12178 0DF8                                l12258 0000  
                              l12266 0000                                l12346 0000  
                              l12354 0BA3                                l12370 0000  
                              l12602 0000                                l12610 0972  
                              l12530 0000                                l12522 0000  
                              l12514 0000                                l12506 0000  
                              l12450 08B7                                l12442 0000  
                              l12434 0000                                l12426 0000  
                              l11900 0000                                l12188 0000  
                              l12268 0000                                l12276 0000  
                              l12284 0A62                                l12364 0BDF  
                              l12348 0000                                l12380 0000  
                              l12604 0000                                l12540 0000  
                              l12532 0000                                l12524 091F  
                              l12516 0000                                l12508 0000  
                              l12460 0000                                l12444 0000  
                              l12436 0000                                l12428 089D  
                              l10766 0000                                l10758 0000  
                              l12198 0FA0                                l12286 0000  
                              l12278 0000                                l12390 0000  
                              l12382 0000                                l12630 0000  
                              l12622 0000                                l12614 0000  
                              l12606 0000                                l12542 0000  
                              l12534 0000                                l12526 0000  
                              l12518 0000                                l12470 0000  
                              l12454 0000                                l12462 08BF  
                              l12446 08AD                                l12438 0000  
                              l12702 09BE                                l12710 0000  
                              l10776 0000                                l11904 0000  
                              l11920 0000                                l12296 0A84  
                              l12288 0000                                l12368 0000  
                              l12392 0000                                l12632 0000  
                              l12624 097D                                l12616 0000  
                              l12608 0000                                l12552 0000  
                              l12560 0958                                l12544 094A  
                              l12536 093B                                l12480 0000  
                              l12456 0000                                l12720 0000  
                              l12712 0000                                l12704 0000  
                              l11906 0000                                l11922 0000  
                              l11914 0000                                l11930 0000  
                              l12298 0000                                l12378 0000  
                              l12626 0000                                l12618 0000  
                              l12554 0000                                l12490 0000  
                              l12474 0000                                l12466 0000  
                              l12458 0000                                l12730 0000  
                              l12714 0000                                l11908 0000  
                              l11924 0000                                l11916 0000  
                              l11932 0000                                l12396 0B1D  
                              l12388 0000                                l12652 0000  
                              l12660 0995                                l12580 0000  
                              l12572 0000                                l12564 0000  
                              l12556 0000                                l12548 094F  
                              l12492 0000                                l12476 0000  
                              l12484 08E5                                l12468 0000  
                              l12740 0000                                l12724 0000  
                              l12716 0C05                                l12820 0000  
                              l12804 0D17                                l11926 0000  
                              l11918 0000                                l12398 0000  
                              l12654 0000                                l12582 0000  
                              l12574 0963                                l12566 0000  
                              l12558 0000                                l12494 0000  
                              l12478 0000                                l12750 0000  
                              l12734 0000                                l12726 0000  
                              l12742 0C21                                l12822 0000  
                              l12814 0D35                                l12806 0D19  
                              l12830 0000                                l11880 0CBA  
                              l11928 0000                                l12680 0000  
                              l12664 0000                                l12656 0000  
                              l12648 098C                                l12576 0000  
                              l12568 0000                                l12496 0904  
                              l12488 0000                                l12760 0C3C  
                              l12752 0000                                l12736 0000  
                              l12728 0000                                l12840 0000  
                              l12832 0000                                l12824 0000  
                              l11882 0CBF                                l12690 0000  
                              l12682 0000                                l12674 099F  
                              l12666 0000                                l12658 0000  
                              l12498 090B                                l12770 0C5C  
                              l12754 0000                                l12746 0000  
                              l12738 0000                                l12818 0D3E  
                              l12842 0000                                l12834 0000  
                              l12826 0000                                l12692 0000  
                              l12684 0000                                l12668 0000  
                              l12780 0000                                l12764 0000  
                              l12748 0000                                l12756 0C31  
                              l12860 0886                                l12852 0000  
                              l12844 0000                                l12836 086E  
                              l12828 0000                                l11894 0000  
                              l11990 0CA6                                l12694 0000  
                              l12686 0000                                l12678 0000  
                              l12598 0969                                l12782 0000  
                              l12766 0000                                l12870 0000  
                              l12854 0881                                l12846 0000  
                              l12838 0000                                l11992 0000  
                              l11984 0000                                l12688 0000  
                              l12696 09B1                                l12768 0000  
                              l12880 0000                                l12872 0000  
                              l12864 0000                                l12848 0000  
                              l11994 0000                                l11986 0CA0  
                              l12698 0000                                l12794 0000  
                              l12786 0000                                l12874 0895  
                              l12866 088F                                l12858 0000  
                      _isSettingMode 038D                                l12788 0000  
                              l12798 0000                 __end_of_API_LCD_INIT 0A4E  
                              ?_main 0072                      __end_of___ftdiv 0E25  
                              _EEPGD 0CAF                      __end_of_WriteEE 0F3A  
                    __end_of___ftmul 0FF3                                _T1CON 0018  
                    __end_of___fttol 0F8F                                _T2CON 001C  
                              _T4CON 0417                                _IOCBN 0395  
                              _IOCBP 0394                        ?_CTKSoftDelay 0076  
                 ?_GetBatteryVoltage 003A                                _TMR1H 0017  
                              _TMR1L 0016                                _PORTA 000C  
                              _PORTB 000D                                _PORTD 000F  
                              _PORTE 0010                                _TRISA 008C  
                              _TRISB 008D                                _TRISC 008E  
                              _TRISD 008F                                _TRISE 0090  
                 __size_of_ISR_Timer 0057                                _KaiJi 0B94  
                ??_GetBatteryVoltage 0078                        _ReadOrWriteEE 0D44  
                      ___ftpack@sign 0024                          _Battery_12V 00A0  
                        _Battery_24V 00B6                       __pbitbssCOMMON 0380  
                 __size_of_PWMCharge 0053                      ?_lcd_write_data 0072  
                              status 0003                                wtemp0 007E  
         __size_of_lcd_write_command 000C                  _PWM_CONTROL_TIMEOUT 00E2  
                       __end_of_main 089C            __end_of_GetBatteryVoltage 09DD  
                    ??_lcd_move_char 0078                       _openOrClosePWM 00BD  
                 _gSolarPanelVoltage 0062          __size_of_BatteryStateSwitch 0044  
                     ??_CTKSoftDelay 0078                               ??_main 0078  
                      ___fttol@sign1 002F                        ?_readIntParam 0047  
                             ?_KaiJi 0072                __end_of_API_LCD_CLEAR 0CF1  
                     ?_ReadOrWriteEE 00E8                               _ADCON0 009D  
                             _ADCON1 009E                               _ADRESH 009C  
                             _ADRESL 009B                               _EEADRL 0191  
                             _EEDATL 0193                               _EECON2 0196  
                             _ADBase 004E                               _ANSELA 018C  
                             _ANSELB 018D                               _ANSELE 0190  
                   __end_of___ftpack 0E6F                               _IOCBF3 1CB3  
                             _IOCBF4 1CB4                               _IOCBF5 1CB5  
                             i1l2312 004F                               i1l2271 0000  
                             i1l2266 00CE                           _SelectMode 0AD8  
                             u160_25 00B3                               u162_20 00C4  
                             _FVRCON 0117                               _T2Flag 038B  
                   __end_of___lwtoft 0E35                               _OSCCON 0099  
                             _TMR0IE 005D                               _TMR1IE 0488  
                             _TMR1IF 0088                        getADValue@max 0032  
                             _TMR2IE 0489                               _TMR2IF 0089  
                      getADValue@min 0034                               _TMR4IE 0499  
                             _TMR4IF 0099                               _TMR6IF 009B  
                             _WDTCON 0097                     readIntParam@addr 004D  
                         _gFbVoltage 00E6                               _ReadEE 0DB6  
                  __end_of_ISR_Timer 005B               __end_of_openOrClosePWM 00C8  
                             ___wmul 0C9E                            ??___ftdiv 003E  
                          ??_WriteEE 0077                            ??___ftmul 003E  
                          ??___fttol 002C                          ?_LedDisplay 0072  
       __end_of_GetSolarPanelVoltage 0CBA                      _needInitSetting 038E  
                 _SolarPanelDealWith 0BEE                               _setPWM 00C8  
                  __end_of_PWMCharge 0D44                       ??_readIntParam 0049  
                             clrloop 00D2          __end_of_handlerPWMInterrupt 00BD  
              ___ftmul@f3_as_product 0042                  ?_SolarPanelDealWith 0072  
                       _BatteryState 0066           __end_of_API_LCD_MOVE_POINT 0A3F  
             __size_of_writeIntParam 002A                         _ClampVoltage 0052  
                         ___ftdiv@f1 003B                           ___ftdiv@f2 0038  
                         ___ftdiv@f3 0042                 ??_SolarPanelDealWith 003D  
                         ___ftmul@f1 0038                        __end_of_KaiJi 0BEE  
                         ___ftmul@f2 003B                           ___fttol@f1 0028  
                     __pcstackCOMMON 0072                __size_of_API_LCD_INIT 000F  
                       __pidataBANK0 0000                         __pidataBANK1 006F  
                    ?_openOrClosePWM 0072           __size_of_GetBatteryVoltage 0007  
              _GetLoadCurrentVoltage 0CD3  SolarPanelDealWith@SolarPanelVoltage 0043  
             getADValue@AD_OneResult 0038         __size_of_LoadCurrentDealWith 0041  
                         ___lwtoft@c 0035                          _ParamConfig 00CC  
       __end_of_handlerKeyEventInput 00B8                              ??_KaiJi 003D  
                    ??_ReadOrWriteEE 0078                           _getADValue 0A5A  
                         __pbssBANK0 004E                           __pbssBANK1 00CC  
                        ?_SelectMode 0072                  __size_of_LedDisplay 0011  
                       _API_LCD_INIT 0A3F                 __end_of_CTKSoftDelay 0CD3  
                            ?_ReadEE 0072                    _getADValueOneTime 0AA8  
   BatteryStateSwitch@BatteryVoltage 0076                           __pmaintext 0862  
               lcd_move_char@postion 0028                   ?_getADValueOneTime 0024  
                            ?___wmul 0020                           __pintentry 0004  
             ReadOrWriteEE@startAddr 00EA                           __ptext1100 0B94  
                         __ptext1101 0B07                           __ptext1110 0A2E  
                         __ptext1102 0CD3                           __ptext1111 0CEB  
                         __ptext1103 0CB3                           __ptext1120 0F3A  
                         __ptext1112 0A3F                           __ptext1104 09D6  
                         __ptext1121 0E35                           __ptext1113 0E25  
                         __ptext1105 0D44                           __ptext1130 00B8  
                         __ptext1122 0C9E                           __ptext1114 0F8F  
                         __ptext1106 0A2C                           __ptext1131 00BD  
                         __ptext1123 09DD                           __ptext1115 0DC3  
                         __ptext1107 0A5A                           __ptext1132 00C8  
                         __ptext1124 0F24                           __ptext1116 0AA8  
                         __ptext1108 0EFA                           __ptext1133 009B  
                         __ptext1125 0DB6                           __ptext1117 0A21  
                         __ptext1109 0D7C                           __ptext1134 0000  
                         __ptext1126 0CBA                           __ptext1118 0A4E  
                         __ptext1127 0CDA                           __ptext1119 0B4C  
                         __ptext1128 0AD8                           __ptext1096 0CF1  
                         __ptext1097 0BEE                           __ptext1098 089C  
                         __ptext1099 0B0B                   openOrClosePWM@open 0073  
                            ?_setPWM 0072                        _writeIntParam 0EFA  
                          ?___ftpack 0020                              _DAYTIME 0380  
                ??_getADValueOneTime 0026                            ?___lwtoft 0035  
                            i1l10802 0000                              i1l10810 002D  
                            i1l10732 00AA                              i1l10740 0000  
                            i1l10726 0000                              i1l10742 00C6  
                            i1l10830 0000                              i1l10822 0000  
                            i1l10736 0000                              i1l10744 0000  
                            i1l10840 0000                              i1l10824 0043  
                            i1l10816 0039                              i1l10808 002B  
                            i1l10738 0000                              i1l10842 0058  
                            i1l10834 0050                              i1l10818 003B  
                            i1l10836 0053                              i1l10790 0000  
                            i1l10786 0000                              i1l10796 0017  
                            i1l10798 0019          __size_of_SwitchBatteryState 013A  
                            _LPVFlag 0384                     ??_lcd_write_data 0078  
                            _PWMFlag 038A                           __stringtab 005E  
                            _PVCount 0069                   lcd_write_data@data 0024  
                            _PVState 0388                 _GetSolarPanelVoltage 0CB3  
       __size_of_LoadParamFromEPPROM 0004                    readIntParam@value 004B  
          __end_of_getADValueOneTime 0AD8                 __end_of_readIntParam 0DB6  
                    __size_of_ReadEE 000D                  API_LCD_MOVE_POINT@i 0027  
                            ___ftdiv 0DC3                              _WriteEE 0F24  
                    __size_of___wmul 0015                              ___ftmul 0F8F  
                            ___fttol 0F3A               ?_GetLoadCurrentVoltage 003A  
                     ?_writeIntParam 0047             BatteryStateSwitch@adjust 0024  
                         ??___ftpack 0025                      __size_of_setPWM 0009  
                __size_of_SelectMode 002F                           ??___lwtoft 0076  
                  _EnhanceChargeFlag 0381                            _ADVoltage 0050  
                        ?_getADValue 002B                 end_of_initialization 0860  
              ?_GetSolarPanelVoltage 003A                              init_ram 00D7  
                            initloop 00D8                 _handlerKeyEventInput 009B  
                 _FloatingChargeFlag 0383           __end_of_BatteryStateSwitch 0A21  
                       ??_LedDisplay 0076                            _ISR_Timer 0004  
                  writeIntParam@addr 0049                    writeIntParam@data 004A  
              __end_of_lcd_move_char 0A2E                 _EqualizingChargeFlag 0382  
        handlerKeyEventInput@keyCode 0072                     _SDBatteryVoltage 005A  
                          _PWMCharge 0CF1             lcd_write_command@command 0024  
                      CTKSoftDelay@a 0020                        CTKSoftDelay@b 0022  
                      CTKSoftDelay@x 0076                __size_of_CTKSoftDelay 0019  
                 __end_of_LedDisplay 0CEB                  _LoadCurrentDealWith 0B0B  
                        ___ftdiv@exp 0045           __size_of_getADValueOneTime 0030  
              ?_handlerKeyEventInput 0072                     ??_openOrClosePWM 0073  
                 _API_LCD_MOVE_POINT 0A2E                          ___ftmul@exp 0041  
                     __end_of_ReadEE 0DC3             getADValueOneTime@channel 0028  
                    ??_writeIntParam 0078               __size_of_API_LCD_CLEAR 0006  
                getADValue@AD_Result 0030                           ?_ISR_Timer 0072  
                __size_of_getADValue 004E                       __end_of___wmul 0CB3  
                ?_API_LCD_MOVE_POINT 0072                 ?_LoadCurrentDealWith 0072  
                    _gBatteryVoltage 0060                       __end_of_setPWM 00D1  
                       _CTKSoftDelay 0CBA                        __pbitnvCOMMON 03C0  
                start_initialization 083D                           ?_PWMCharge 0072  
                          _LoadShort 0386                            _LoadState 03C1  
                          _LightTime 0068         __size_of_handlerPWMInterrupt 0005  
             ??_GetSolarPanelVoltage 0078                            _DutyRatio 0079  
              __size_of_readIntParam 003A                 ??_API_LCD_MOVE_POINT 0025  
                       ??_SelectMode 0076                _lcd_extinguwish_timer 006C  
                           ??_ReadEE 0076          __size_of_SolarPanelDealWith 00B0  
                           ??___wmul 0076                          __pdataBANK0 006E  
                        __pdataBANK1 00A0                             ??_setPWM 0072  
              ??_LoadCurrentDealWith 0078                  _LoadParamFromEPPROM 0B07  
                        WriteEE@addr 0076                          WriteEE@data 0077  
                 __end_of_SelectMode 0B07                    __size_of___ftpack 003A  
                       _readIntParam 0D7C                          __pbssCOMMON 0079  
                  __size_of___lwtoft 0010                        __pcstackBANK0 0020  
                      __pcstackBANK1 00E8                __end_of_ReadOrWriteEE 0D7C  
                      _API_LCD_CLEAR 0CEB                     _BatteryLastState 0064  
                   _PWM_CONTROL_FLAG 006A                           setPWM@open 0072  
               ?_LoadParamFromEPPROM 0072               ??_handlerKeyEventInput 0074  
               _KeyEvent_PendKeyCode 006E              ??_GetLoadCurrentVoltage 0078  
                _SDSolarPanelVoltage 005C                             ?___ftdiv 0038  
                           ?_WriteEE 0076                          ??_ISR_Timer 0076  
                           ?___ftmul 0038                             ?___fttol 0028  
         getADValueOneTime@AD_Result 0029                            __pstrings 005E  
                          _lcd_state 006D           __end_of_SwitchBatteryState 09D6  
                     __size_of_KaiJi 005A                          ??_PWMCharge 0078  
                     ?_API_LCD_CLEAR 0072                         ??_getADValue 002D  
              ??_LoadParamFromEPPROM 0078                       ___wmul@product 0076  
                     _SystemModeType 006F                             _LPVCount 0067  
                 __end_of_getADValue 0AA8                    ___wmul@multiplier 0020  
                  ReadOrWriteEE@read 00E8                   _BatteryStateSwitch 09DD  
                           _LoadFlag 03C0                             _LoadOpen 0385  
                ?_BatteryStateSwitch 0076                         _TimeModeHour 005E  
            __size_of_lcd_write_data 000B                          getADValue@i 0036  
                           _PwmCount 006B                  _handlerPWMInterrupt 00B8  
                   __size_of___ftdiv 0062                     __size_of_WriteEE 0016  
                   __size_of___ftmul 0064                     __size_of___fttol 0055  
               ??_BatteryStateSwitch 0020                             ___ftpack 0E35  
                           ___lwtoft 0E25                         _OverLoadTime 0058  
                    ??_API_LCD_CLEAR 0078                 ?_handlerPWMInterrupt 0072  
                    _BatteryStandard 0065                        ?_API_LCD_INIT 0072  
                      __size_of_main 003A               __size_of_lcd_move_char 0002  
                 _EnhanceCharge_Time 0054                    _system_state_init 0B4C  
                           clear_ram 00D1                   ?_system_state_init 0072  
              __end_of_writeIntParam 0F24                  ??_system_state_init 0078  
              ??_handlerPWMInterrupt 0074                             intlevel1 0000  
        __size_of_API_LCD_MOVE_POINT 0011                       ??_API_LCD_INIT 0078  
      __size_of_GetSolarPanelVoltage 0007            __end_of_system_state_init 0B94  
         __end_of_SolarPanelDealWith 0C9E          __end_of_LoadCurrentDealWith 0B4C  
     __size_of_GetLoadCurrentVoltage 0007        __end_of_GetLoadCurrentVoltage 0CDA  
                  _lcd_write_command 0A4E                    getADValue@channel 002F  
            __size_of_openOrClosePWM 000B                   ?_lcd_write_command 0072  
                      _lcd_move_char 0A2C                   writeIntParam@value 0047  
                ??_lcd_write_command 0078                        _PWMChargeFlag 0389  
                     ReadOrWriteEE@i 00EB                _EqualizingCharge_Time 0056  
                 _SwitchBatteryState 089C                       _lcd_write_data 0A21  
      __size_of_handlerKeyEventInput 001D                  ?_SwitchBatteryState 0072  
          __end_of_lcd_write_command 0A5A  
