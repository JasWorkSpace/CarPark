

HI-TECH Software PIC PRO Macro Assembler V9.80 build 6738 
                                                                                               Wed Nov 04 17:35:37 2015

HI-TECH Software Omniscient Code Generator (PRO mode) build 6738
     1                           	processor	16F1934
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	config,global,class=CONFIG,delta=2
     5                           	psect	idataBANK0,global,class=CODE,delta=2
     6                           	psect	idataBANK1,global,class=CODE,delta=2
     7                           	psect	strings,global,class=STRING,delta=2
     8                           	psect	bitnvBANK0,global,bit,class=BANK0,space=1,delta=1
     9                           	psect	cinit,global,class=CODE,delta=2
    10                           	psect	bitbssBANK0,global,bit,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	clrtext,global,class=CODE,delta=2
    15                           	psect	inittext,global,class=CODE,delta=2
    16                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    18                           	psect	text587,local,class=CODE,delta=2
    19                           	psect	text604,local,class=CODE,delta=2
    20                           	psect	intentry,global,class=CODE,delta=2
    21                           	psect	pa_nodes,global,class=CODE,delta=2
    22                           	dabs	1,0x7E,2
    23  000A                     	;#
    24                           
    25                           	psect	config
    26  8007  061C               	dw	1564	;#
    27  8008  0233               	dw	563	;#
    28                           
    29                           	psect	idataBANK0
    30  0000                     __pidataBANK0:	
    31                           
    32                           	psect	idataBANK1
    33  0339                     __pidataBANK1:	
    34                           
    35                           ;initializer for _batteryStatePointer
    36  0339  34CE               	retlw	(_state2_2| (0+32768))& (0+255)
    37  033A  34DA               	retlw	(_state2_3| (0+32768))& (0+255)
    38  033B  34C1               	retlw	(_state2_4| (0+32768))& (0+255)
    39                           
    40                           ;initializer for _Battery_12V
    41  033C  3400               	retlw	0
    42  033D  3401               	retlw	1
    43  033E  342F               	retlw	47
    44  033F  3401               	retlw	1
    45  0340  341C               	retlw	28
    46  0341  3401               	retlw	1
    47  0342  3439               	retlw	57
    48  0343  3401               	retlw	1
    49  0344  3487               	retlw	135
    50  0345  3401               	retlw	1
    51  0346  3463               	retlw	99
    52  0347  3401               	retlw	1
    53  0348  345F               	retlw	95
    54  0349  3401               	retlw	1
    55  034A  3455               	retlw	85
    56  034B  3401               	retlw	1
    57  034C  3447               	retlw	71
    58  034D  3401               	retlw	1
    59  034E  347D               	retlw	125
    60  034F  340F               	retlw	15
    61  0350  3484               	retlw	132
    62  0351  3403               	retlw	3
    63                           
    64                           ;initializer for _Battery_24V
    65  0352  3400               	retlw	0
    66  0353  3402               	retlw	2
    67  0354  345E               	retlw	94
    68  0355  3402               	retlw	2
    69  0356  3438               	retlw	56
    70  0357  3402               	retlw	2
    71  0358  3472               	retlw	114
    72  0359  3402               	retlw	2
    73  035A  340E               	retlw	14
    74  035B  3403               	retlw	3
    75  035C  34C6               	retlw	198
    76  035D  3402               	retlw	2
    77  035E  34BE               	retlw	190
    78  035F  3402               	retlw	2
    79  0360  34AA               	retlw	170
    80  0361  3402               	retlw	2
    81  0362  348E               	retlw	142
    82  0363  3402               	retlw	2
    83  0364  3427               	retlw	39
    84  0365  3420               	retlw	32
    85  0366  3405               	retlw	5
    86  0367  340D               	retlw	13
    87                           
    88                           ;initializer for _checking
    89  0368  3443               	retlw	67
    90  0369  3448               	retlw	72
    91  036A  3445               	retlw	69
    92  036B  3443               	retlw	67
    93  036C  344B               	retlw	75
    94  036D  3449               	retlw	73
    95  036E  344E               	retlw	78
    96  036F  3447               	retlw	71
    97  0370  342E               	retlw	46
    98  0371  342E               	retlw	46
    99  0372  342E               	retlw	46
   100  0373  3400               	retlw	0
   101                           
   102                           ;initializer for _systemType1
   103  0374  3431               	retlw	49
   104  0375  3432               	retlw	50
   105  0376  3456               	retlw	86
   106  0377  3420               	retlw	32
   107  0378  3453               	retlw	83
   108  0379  3459               	retlw	89
   109  037A  3453               	retlw	83
   110  037B  3454               	retlw	84
   111  037C  3445               	retlw	69
   112  037D  344D               	retlw	77
   113  037E  3400               	retlw	0
   114                           
   115                           ;initializer for _welcome
   116  037F  3457               	retlw	87
   117  0380  3445               	retlw	69
   118  0381  344C               	retlw	76
   119  0382  3443               	retlw	67
   120  0383  344F               	retlw	79
   121  0384  344D               	retlw	77
   122  0385  3445               	retlw	69
   123  0386  3400               	retlw	0
   124                           
   125                           	psect	strings
   126  0200                     __pstrings:	
   127  0200                     __stringtab:	
   128  0200  3400               	retlw	0
   129  0201                     _state3_1:	
   130  0201  3445               	retlw	69
   131  0202  346E               	retlw	110
   132  0203  345F               	retlw	95
   133  0204  3443               	retlw	67
   134  0205  3468               	retlw	104
   135  0206  3461               	retlw	97
   136  0207  3472               	retlw	114
   137  0208  3467               	retlw	103
   138  0209  3465               	retlw	101
   139  020A  343A               	retlw	58
   140  020B  3420               	retlw	32
   141  020C  3478               	retlw	120
   142  020D  3478               	retlw	120
   143  020E  342E               	retlw	46
   144  020F  3478               	retlw	120
   145  0210  3456               	retlw	86
   146  0211  3400               	retlw	0
   147  0212                     _state3_2:	
   148  0212  3445               	retlw	69
   149  0213  3471               	retlw	113
   150  0214  345F               	retlw	95
   151  0215  3443               	retlw	67
   152  0216  3468               	retlw	104
   153  0217  3461               	retlw	97
   154  0218  3472               	retlw	114
   155  0219  3467               	retlw	103
   156  021A  3465               	retlw	101
   157  021B  343A               	retlw	58
   158  021C  3420               	retlw	32
   159  021D  3478               	retlw	120
   160  021E  3478               	retlw	120
   161  021F  342E               	retlw	46
   162  0220  3478               	retlw	120
   163  0221  3456               	retlw	86
   164  0222  3400               	retlw	0
   165  0223                     _state4_1:	
   166  0223  3446               	retlw	70
   167  0224  346C               	retlw	108
   168  0225  346F               	retlw	111
   169  0226  345F               	retlw	95
   170  0227  3463               	retlw	99
   171  0228  3468               	retlw	104
   172  0229  3461               	retlw	97
   173  022A  3472               	retlw	114
   174  022B  3467               	retlw	103
   175  022C  3465               	retlw	101
   176  022D  343A               	retlw	58
   177  022E  3478               	retlw	120
   178  022F  3478               	retlw	120
   179  0230  342E               	retlw	46
   180  0231  3478               	retlw	120
   181  0232  3456               	retlw	86
   182  0233  3400               	retlw	0
   183  0234                     _state5_1:	
   184  0234  3455               	retlw	85
   185  0235  344E               	retlw	78
   186  0236  3444               	retlw	68
   187  0237  3445               	retlw	69
   188  0238  3452               	retlw	82
   189  0239  3420               	retlw	32
   190  023A  3456               	retlw	86
   191  023B  344F               	retlw	79
   192  023C  344C               	retlw	76
   193  023D  343A               	retlw	58
   194  023E  3420               	retlw	32
   195  023F  3478               	retlw	120
   196  0240  3478               	retlw	120
   197  0241  342E               	retlw	46
   198  0242  3478               	retlw	120
   199  0243  3456               	retlw	86
   200  0244  3400               	retlw	0
   201  0245                     _state7_2:	
   202  0245  344E               	retlw	78
   203  0246  3449               	retlw	73
   204  0247  3447               	retlw	71
   205  0248  3448               	retlw	72
   206  0249  3454               	retlw	84
   207  024A  3420               	retlw	32
   208  024B  3456               	retlw	86
   209  024C  344F               	retlw	79
   210  024D  344C               	retlw	76
   211  024E  343A               	retlw	58
   212  024F  3420               	retlw	32
   213  0250  3478               	retlw	120
   214  0251  3478               	retlw	120
   215  0252  342E               	retlw	46
   216  0253  3478               	retlw	120
   217  0254  3476               	retlw	118
   218  0255  3400               	retlw	0
   219  0256                     _state1_1:	
   220  0256  3442               	retlw	66
   221  0257  3476               	retlw	118
   222  0258  3478               	retlw	120
   223  0259  3478               	retlw	120
   224  025A  342E               	retlw	46
   225  025B  3478               	retlw	120
   226  025C  3476               	retlw	118
   227  025D  3420               	retlw	32
   228  025E  3453               	retlw	83
   229  025F  346F               	retlw	111
   230  0260  3463               	retlw	99
   231  0261  34FF               	retlw	255
   232  0262  34FF               	retlw	255
   233  0263  34FF               	retlw	255
   234  0264  34FF               	retlw	255
   235  0265  3400               	retlw	0
   236  0266                     _state1_2:	
   237  0266  346C               	retlw	108
   238  0267  3463               	retlw	99
   239  0268  3478               	retlw	120
   240  0269  3478               	retlw	120
   241  026A  342E               	retlw	46
   242  026B  3478               	retlw	120
   243  026C  3441               	retlw	65
   244  026D  3420               	retlw	32
   245  026E  346C               	retlw	108
   246  026F  346F               	retlw	111
   247  0270  3478               	retlw	120
   248  0271  3478               	retlw	120
   249  0272  342E               	retlw	46
   250  0273  3478               	retlw	120
   251  0274  3441               	retlw	65
   252  0275  3400               	retlw	0
   253  0276                     _state5_2:	
   254  0276  3452               	retlw	82
   255  0277  3445               	retlw	69
   256  0278  3420               	retlw	32
   257  0279  3455               	retlw	85
   258  027A  344E               	retlw	78
   259  027B  3444               	retlw	68
   260  027C  3445               	retlw	69
   261  027D  3452               	retlw	82
   262  027E  343A               	retlw	58
   263  027F  3420               	retlw	32
   264  0280  3478               	retlw	120
   265  0281  3478               	retlw	120
   266  0282  342E               	retlw	46
   267  0283  3478               	retlw	120
   268  0284  3456               	retlw	86
   269  0285  3400               	retlw	0
   270  0286                     _state6_1:	
   271  0286  344F               	retlw	79
   272  0287  3456               	retlw	86
   273  0288  3445               	retlw	69
   274  0289  3452               	retlw	82
   275  028A  3420               	retlw	32
   276  028B  3456               	retlw	86
   277  028C  344F               	retlw	79
   278  028D  344C               	retlw	76
   279  028E  343A               	retlw	58
   280  028F  3420               	retlw	32
   281  0290  3458               	retlw	88
   282  0291  3458               	retlw	88
   283  0292  342E               	retlw	46
   284  0293  3458               	retlw	88
   285  0294  3456               	retlw	86
   286  0295  3400               	retlw	0
   287  0296                     _state6_2:	
   288  0296  3452               	retlw	82
   289  0297  3445               	retlw	69
   290  0298  3420               	retlw	32
   291  0299  344F               	retlw	79
   292  029A  3456               	retlw	86
   293  029B  3445               	retlw	69
   294  029C  3452               	retlw	82
   295  029D  343A               	retlw	58
   296  029E  3420               	retlw	32
   297  029F  3478               	retlw	120
   298  02A0  3478               	retlw	120
   299  02A1  342E               	retlw	46
   300  02A2  3478               	retlw	120
   301  02A3  3456               	retlw	86
   302  02A4  3400               	retlw	0
   303  02A5                     _state7_1:	
   304  02A5  3444               	retlw	68
   305  02A6  3441               	retlw	65
   306  02A7  3459               	retlw	89
   307  02A8  3420               	retlw	32
   308  02A9  3456               	retlw	86
   309  02AA  344F               	retlw	79
   310  02AB  344C               	retlw	76
   311  02AC  343A               	retlw	58
   312  02AD  3420               	retlw	32
   313  02AE  3478               	retlw	120
   314  02AF  3478               	retlw	120
   315  02B0  342E               	retlw	46
   316  02B1  3478               	retlw	120
   317  02B2  3456               	retlw	86
   318  02B3  3400               	retlw	0
   319  02B4                     _state2_1:	
   320  02B4  3442               	retlw	66
   321  02B5  3461               	retlw	97
   322  02B6  3474               	retlw	116
   323  02B7  3474               	retlw	116
   324  02B8  3465               	retlw	101
   325  02B9  3472               	retlw	114
   326  02BA  3479               	retlw	121
   327  02BB  3420               	retlw	32
   328  02BC  3474               	retlw	116
   329  02BD  3479               	retlw	121
   330  02BE  3470               	retlw	112
   331  02BF  3465               	retlw	101
   332  02C0  3400               	retlw	0
   333  02C1                     _state2_4:	
   334  02C1  3453               	retlw	83
   335  02C2  3465               	retlw	101
   336  02C3  346C               	retlw	108
   337  02C4  3466               	retlw	102
   338  02C5  3420               	retlw	32
   339  02C6  3473               	retlw	115
   340  02C7  3465               	retlw	101
   341  02C8  3474               	retlw	116
   342  02C9  3474               	retlw	116
   343  02CA  3469               	retlw	105
   344  02CB  346E               	retlw	110
   345  02CC  3467               	retlw	103
   346  02CD  3400               	retlw	0
   347  02CE                     _state2_2:	
   348  02CE  3447               	retlw	71
   349  02CF  3465               	retlw	101
   350  02D0  346C               	retlw	108
   351  02D1  3420               	retlw	32
   352  02D2  3462               	retlw	98
   353  02D3  3461               	retlw	97
   354  02D4  3474               	retlw	116
   355  02D5  3474               	retlw	116
   356  02D6  3465               	retlw	101
   357  02D7  3472               	retlw	114
   358  02D8  3479               	retlw	121
   359  02D9  3400               	retlw	0
   360  02DA                     _state2_3:	
   361  02DA  344F               	retlw	79
   362  02DB  3470               	retlw	112
   363  02DC  3465               	retlw	101
   364  02DD  346E               	retlw	110
   365  02DE  3420               	retlw	32
   366  02DF  3463               	retlw	99
   367  02E0  3465               	retlw	101
   368  02E1  346C               	retlw	108
   369  02E2  346C               	retlw	108
   370  02E3  3400               	retlw	0
   371                           
   372                           	psect	bitnvBANK0
   373  0370                     __pbitnvBANK0:	
   374  0370                     _LoadFlag:	
   375  0370                     	ds	1
   376  0371                     _LoadState:	
   377  0371                     	ds	1
   378  000C                     _PORTA	set	12
   379  000D                     _PORTB	set	13
   380  000F                     _PORTD	set	15
   381  0010                     _PORTE	set	16
   382  001B                     _PR2	set	27
   383  0018                     _T1CON	set	24
   384  001C                     _T2CON	set	28
   385  0017                     _TMR1H	set	23
   386  0016                     _TMR1L	set	22
   387  005F                     _GIE	set	95
   388  005E                     _PEIE	set	94
   389  006B                     _RB3	set	107
   390  006C                     _RB4	set	108
   391  006D                     _RB5	set	109
   392  006E                     _RB6	set	110
   393  0071                     _RC1	set	113
   394  0072                     _RC2	set	114
   395  0073                     _RC3	set	115
   396  0082                     _RE2	set	130
   397  005D                     _TMR0IE	set	93
   398  0088                     _TMR1IF	set	136
   399  0089                     _TMR2IF	set	137
   400  0099                     _TMR4IF	set	153
   401  009B                     _TMR6IF	set	155
   402  009D                     _ADCON0	set	157
   403  009E                     _ADCON1	set	158
   404  009C                     _ADRESH	set	156
   405  009B                     _ADRESL	set	155
   406  0099                     _OSCCON	set	153
   407  008C                     _TRISA	set	140
   408  008D                     _TRISB	set	141
   409  008E                     _TRISC	set	142
   410  008F                     _TRISD	set	143
   411  0090                     _TRISE	set	144
   412  0097                     _WDTCON	set	151
   413  04E9                     _ADGO	set	1257
   414  0488                     _TMR1IE	set	1160
   415  0489                     _TMR2IE	set	1161
   416  0499                     _TMR4IE	set	1177
   417  0117                     _FVRCON	set	279
   418  010D                     _LATB	set	269
   419  010E                     _LATC	set	270
   420  018C                     _ANSELA	set	396
   421  018D                     _ANSELB	set	397
   422  0190                     _ANSELE	set	400
   423  0191                     _EEADRL	set	401
   424  0193                     _EEDATL	set	403
   425  0CAE                     _CFGS	set	3246
   426  0CAF                     _EEPGD	set	3247
   427  0CA8                     _RD	set	3240
   428  0395                     _IOCBN	set	917
   429  0394                     _IOCBP	set	916
   430  1CB3                     _IOCBF3	set	7347
   431  1CB4                     _IOCBF4	set	7348
   432  1CB5                     _IOCBF5	set	7349
   433  0416                     _PR4	set	1046
   434  0417                     _T4CON	set	1047
   435                           
   436                           	psect	cinit
   437  0387                     start_initialization:	
   438                           
   439                           ; Clear objects allocated to BITBANK0
   440  0387  01EB               	clrf	(__pbitbssBANK0/(0+8))& (0+127)
   441  0388  01EC               	clrf	((__pbitbssBANK0/(0+8)+1))& (0+127)
   442  0389  01ED               	clrf	((__pbitbssBANK0/(0+8)+2))& (0+127)
   443                           
   444                           ; Clear objects allocated to BANK0
   445  038A  3020               	movlw	low __pbssBANK0
   446  038B  0084               	movwf	4
   447  038C  3000               	movlw	high __pbssBANK0
   448  038D  0085               	movwf	5
   449  038E  302B               	movlw	43
   450  038F  3183  23A2  3183   	fcall	clear_ram
   451                           
   452                           ;initializer for _SystemModeType
   453  0392  3003               	movlw	3
   454  0393  00EF               	movwf	__pdataBANK0& (0+127)
   455                           
   456                           ; Initialize objects allocated to BANK1
   457  0394  3039               	movlw	low __pidataBANK1
   458  0395  0084               	movwf	4
   459  0396  3083               	movlw	(high __pidataBANK1)| (0+128)
   460  0397  0085               	movwf	5
   461  0398  30A0               	movlw	low __pdataBANK1
   462  0399  0086               	movwf	6
   463  039A  3000               	movlw	high __pdataBANK1
   464  039B  0087               	movwf	7
   465  039C  304E               	movlw	78
   466  039D  3183  23A8         	fcall	init_ram
   467  039F                     end_of_initialization:	
   468                           ;End of C runtime variable initialization code
   469                           
   470  039F  0020               	movlb	0
   471  03A0  3188  2843         	ljmp	_main	;jump to C main() function
   472                           
   473                           	psect	bitbssBANK0
   474  0358                     __pbitbssBANK0:	
   475  0358                     _DAYTIME:	
   476  0358                     	ds	1
   477  0359                     _EnhanceChargeFlag:	
   478  0359                     	ds	1
   479  035A                     _EqualizingChargeFlag:	
   480  035A                     	ds	1
   481  035B                     _FloatingChargeFlag:	
   482  035B                     	ds	1
   483  035C                     _LPVFlag:	
   484  035C                     	ds	1
   485  035D                     _LoadOpen:	
   486  035D                     	ds	1
   487  035E                     _LoadShort:	
   488  035E                     	ds	1
   489  035F                     _PVChargeFlag:	
   490  035F                     	ds	1
   491  0360                     _PVState:	
   492  0360                     	ds	1
   493  0361                     _PWMChargeFlag:	
   494  0361                     	ds	1
   495  0362                     _PWMFlag:	
   496  0362                     	ds	1
   497  0363                     _T2Flag:	
   498  0363                     	ds	1
   499  0364                     _isNeedChange:	
   500  0364                     	ds	1
   501  0365                     _isSaveSettings:	
   502  0365                     	ds	1
   503  0366                     _isSettingMode:	
   504  0366                     	ds	1
   505  0367                     _is_second_setting:	
   506  0367                     	ds	1
   507  0368                     _needInitSetting:	
   508  0368                     	ds	1
   509  0369                     _rb4_flag:	
   510  0369                     	ds	1
   511                           
   512                           	psect	bssBANK0
   513  0020                     __pbssBANK0:	
   514  0020                     _ADBase:	
   515  0020                     	ds	2
   516  0022                     _ADVoltage:	
   517  0022                     	ds	2
   518  0024                     _ClampVoltage:	
   519  0024                     	ds	2
   520  0026                     _EnhanceCharge_Time:	
   521  0026                     	ds	2
   522  0028                     _EqualizingCharge_Time:	
   523  0028                     	ds	2
   524  002A                     _OverLoadTime:	
   525  002A                     	ds	2
   526  002C                     _SDBatteryVoltage:	
   527  002C                     	ds	2
   528  002E                     _SDSolarPanelVoltage:	
   529  002E                     	ds	2
   530  0030                     _SystemErrorCount:	
   531  0030                     	ds	2
   532  0032                     _TimeModeHour:	
   533  0032                     	ds	2
   534  0034                     _charPointer:	
   535  0034                     	ds	2
   536  0036                     _gBatteryVoltage:	
   537  0036                     	ds	2
   538  0038                     _gFbVoltage:	
   539  0038                     	ds	2
   540  003A                     _gSolarPanelVoltage:	
   541  003A                     	ds	2
   542  003C                     _BatteryLastState:	
   543  003C                     	ds	1
   544  003D                     _BatteryStandard:	
   545  003D                     	ds	1
   546  003E                     _BatteryState:	
   547  003E                     	ds	1
   548  003F                     _DutyRatio:	
   549  003F                     	ds	1
   550  0040                     _LPVCount:	
   551  0040                     	ds	1
   552  0041                     _LightTime:	
   553  0041                     	ds	1
   554  0042                     _PVCount:	
   555  0042                     	ds	1
   556  0043                     _PwmCount:	
   557  0043                     	ds	1
   558  0044                     _batteryType:	
   559  0044                     	ds	1
   560  0045                     _enter_settings_timer:	
   561  0045                     	ds	1
   562  0046                     _lcd_extinguwish_timer:	
   563  0046                     	ds	1
   564  0047                     _lcd_state:	
   565  0047                     	ds	1
   566  0048                     _lcd_timer:	
   567  0048                     	ds	1
   568  0049                     _setting_no_save_timer:	
   569  0049                     	ds	1
   570  004A                     _setting_save_timer:	
   571  004A                     	ds	1
   572                           
   573                           	psect	dataBANK0
   574  006F                     __pdataBANK0:	
   575  006F                     _SystemModeType:	
   576  006F                     	ds	1
   577                           
   578                           	psect	dataBANK1
   579  00A0                     __pdataBANK1:	
   580  00A0                     _batteryStatePointer:	
   581  00A0                     	ds	3
   582  00A3                     _Battery_12V:	
   583  00A3                     	ds	22
   584  00B9                     _Battery_24V:	
   585  00B9                     	ds	22
   586  00CF                     _checking:	
   587  00CF                     	ds	12
   588  00DB                     _systemType1:	
   589  00DB                     	ds	11
   590  00E6                     _welcome:	
   591  00E6                     	ds	8
   592                           
   593                           	psect	clrtext
   594  03A2                     clear_ram:	
   595                           ;	Called with FSR0 containing the base address, and
   596                           ;	WREG with the size to clear
   597                           
   598  03A2  0064               	clrwdt	;clear the watchdog before getting into this loop
   599  03A3                     clrloop:	
   600  03A3  0180               	clrf	0	;clear RAM location pointed to by FSR
   601  03A4  3101               	addfsr 0,1
   602  03A5  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
   603  03A6  2BA3               	goto	clrloop	;have we reached the end yet?
   604  03A7  3400               	retlw	0	;all done for this memory range, return
   605                           
   606                           	psect	inittext
   607  03A8                     init_ram:	
   608  03A8  00FE               	movwf	126
   609  03A9                     initloop:	
   610  03A9  0012               	moviw fsr0++
   611  03AA  001E               	movwi fsr1++
   612  03AB  0BFE               	decfsz	126,f
   613  03AC  2BA9               	goto	initloop
   614  03AD  3400               	retlw	0
   615                           
   616                           	psect	cstackCOMMON
   617  0070                     __pcstackCOMMON:	
   618  0070                     ?_lcd_move_char:	
   619  0070                     ?_lcd_write_data:	
   620                           ; 0 bytes @ 0x0
   621                           
   622  0070                     ?_lcd_write_command:	
   623                           ; 0 bytes @ 0x0
   624                           
   625  0070                     ?_delay:	
   626                           ; 0 bytes @ 0x0
   627                           
   628  0070                     ?_Delay:	
   629                           ; 0 bytes @ 0x0
   630                           
   631  0070                     ?_system_state_init:	
   632                           ; 0 bytes @ 0x0
   633                           
   634  0070                     ??_ReadEE:	
   635                           ; 0 bytes @ 0x0
   636                           
   637  0070                     ?_load_system_state:	
   638                           ; 0 bytes @ 0x0
   639                           
   640  0070                     ?_SelectMode:	
   641                           ; 0 bytes @ 0x0
   642                           
   643  0070                     ??_SelectMode:	
   644                           ; 0 bytes @ 0x0
   645                           
   646  0070                     ?_LoadCurrentDealWith:	
   647                           ; 0 bytes @ 0x0
   648                           
   649  0070                     ?_SolarPanelDealWith:	
   650                           ; 0 bytes @ 0x0
   651                           
   652  0070                     ?_PWMCharge:	
   653                           ; 0 bytes @ 0x0
   654                           
   655  0070                     ?_SwitchBatteryState:	
   656                           ; 0 bytes @ 0x0
   657                           
   658  0070                     ?_KaiJi:	
   659                           ; 0 bytes @ 0x0
   660                           
   661  0070                     ?_LedDisplay:	
   662                           ; 0 bytes @ 0x0
   663                           
   664  0070                     ??_LedDisplay:	
   665                           ; 0 bytes @ 0x0
   666                           
   667  0070                     ?_lcd_init:	
   668                           ; 0 bytes @ 0x0
   669                           
   670  0070                     ?_main:	
   671                           ; 0 bytes @ 0x0
   672                           
   673  0070                     ?_ISR_Timer:	
   674                           ; 0 bytes @ 0x0
   675                           
   676  0070                     ??_ISR_Timer:	
   677                           ; 0 bytes @ 0x0
   678                           
   679  0070                     ?_ReadEE:	
   680                           ; 0 bytes @ 0x0
   681                           
   682  0070                     ?_BatteryStateSwitch:	
   683                           ; 1 bytes @ 0x0
   684                           
   685  0070                     ?___wmul:	
   686                           ; 1 bytes @ 0x0
   687                           
   688  0070                     ?___ftpack:	
   689                           ; 2 bytes @ 0x0
   690                           
   691  0070                     ReadEE@addr:	
   692                           ; 3 bytes @ 0x0
   693                           
   694  0070                     delay@x:	
   695                           ; 1 bytes @ 0x0
   696                           
   697  0070                     Delay@x:	
   698                           ; 2 bytes @ 0x0
   699                           
   700  0070                     BatteryStateSwitch@BatteryVoltage:	
   701                           ; 2 bytes @ 0x0
   702                           
   703  0070                     ___wmul@multiplier:	
   704                           ; 2 bytes @ 0x0
   705                           
   706  0070                     ___ftpack@arg:	
   707                           ; 2 bytes @ 0x0
   708                           
   709                           
   710                           ; 3 bytes @ 0x0
   711  0070                     	ds	2
   712  0072                     ??_delay:	
   713  0072                     ??_Delay:	
   714                           ; 0 bytes @ 0x2
   715                           
   716  0072                     ??_BatteryStateSwitch:	
   717                           ; 0 bytes @ 0x2
   718                           
   719  0072                     delay@a:	
   720                           ; 0 bytes @ 0x2
   721                           
   722  0072                     Delay@a:	
   723                           ; 2 bytes @ 0x2
   724                           
   725  0072                     ___wmul@multiplicand:	
   726                           ; 2 bytes @ 0x2
   727                           
   728                           
   729                           ; 2 bytes @ 0x2
   730  0072                     	ds	1
   731  0073                     ___ftpack@exp:	
   732                           
   733                           ; 1 bytes @ 0x3
   734  0073                     	ds	1
   735  0074                     ??___wmul:	
   736  0074                     ___ftpack@sign:	
   737                           ; 0 bytes @ 0x4
   738                           
   739  0074                     delay@b:	
   740                           ; 1 bytes @ 0x4
   741                           
   742  0074                     Delay@b:	
   743                           ; 2 bytes @ 0x4
   744                           
   745  0074                     ___wmul@product:	
   746                           ; 2 bytes @ 0x4
   747                           
   748                           
   749                           ; 2 bytes @ 0x4
   750  0074                     	ds	1
   751  0075                     ??___ftpack:	
   752                           
   753                           ; 0 bytes @ 0x5
   754  0075                     	ds	1
   755  0076                     ??_lcd_write_data:	
   756  0076                     ??_lcd_write_command:	
   757                           ; 0 bytes @ 0x6
   758                           
   759  0076                     ??_system_state_init:	
   760                           ; 0 bytes @ 0x6
   761                           
   762  0076                     ?_getADValueOneTime:	
   763                           ; 0 bytes @ 0x6
   764                           
   765  0076                     lcd_write_command@command:	
   766                           ; 2 bytes @ 0x6
   767                           
   768  0076                     lcd_write_data@data:	
   769                           ; 1 bytes @ 0x6
   770                           
   771  0076                     BatteryStateSwitch@adjust:	
   772                           ; 1 bytes @ 0x6
   773                           
   774                           
   775                           ; 2 bytes @ 0x6
   776  0076                     	ds	1
   777  0077                     ??_lcd_move_char:	
   778  0077                     ??_lcd_init:	
   779                           ; 0 bytes @ 0x7
   780                           
   781  0077                     ?_lcd_print_line1:	
   782                           ; 0 bytes @ 0x7
   783                           
   784  0077                     ?_lcd_print_line2:	
   785                           ; 0 bytes @ 0x7
   786                           
   787  0077                     lcd_move_char@postion:	
   788                           ; 0 bytes @ 0x7
   789                           
   790  0077                     lcd_print_line1@charPointer:	
   791                           ; 1 bytes @ 0x7
   792                           
   793  0077                     lcd_print_line2@charPointer:	
   794                           ; 2 bytes @ 0x7
   795                           
   796                           
   797                           ; 2 bytes @ 0x7
   798  0077                     	ds	1
   799  0078                     ??_getADValueOneTime:	
   800  0078                     ?___fttol:	
   801                           ; 0 bytes @ 0x8
   802                           
   803  0078                     lcd_move_char@i:	
   804                           ; 4 bytes @ 0x8
   805                           
   806  0078                     ___fttol@f1:	
   807                           ; 1 bytes @ 0x8
   808                           
   809                           
   810                           ; 3 bytes @ 0x8
   811  0078                     	ds	1
   812  0079                     lcd_print_line1@postion:	
   813  0079                     lcd_print_line2@postion:	
   814                           ; 1 bytes @ 0x9
   815                           
   816                           
   817                           ; 1 bytes @ 0x9
   818  0079                     	ds	1
   819  007A                     ??_lcd_print_line2:	
   820  007A                     getADValueOneTime@channel:	
   821                           ; 0 bytes @ 0xA
   822                           
   823  007A                     lcd_print_line1@clear:	
   824                           ; 1 bytes @ 0xA
   825                           
   826                           
   827                           ; 1 bytes @ 0xA
   828  007A                     	ds	1
   829  007B                     ??_lcd_print_line1:	
   830  007B                     getADValueOneTime@AD_Result:	
   831                           ; 0 bytes @ 0xB
   832                           
   833                           
   834                           ; 2 bytes @ 0xB
   835  007B                     	ds	1
   836  007C                     ??___lwtoft:	
   837  007C                     ?_readFromEEPROM:	
   838                           ; 0 bytes @ 0xC
   839                           
   840                           
   841                           ; 2 bytes @ 0xC
   842  007C                     	ds	1
   843  007D                     ??_GetBatteryVoltage:	
   844  007D                     ??_GetSolarPanelVoltage:	
   845                           ; 0 bytes @ 0xD
   846                           
   847  007D                     ??_GetLoadCurrentVoltage:	
   848                           ; 0 bytes @ 0xD
   849                           
   850                           
   851                           ; 0 bytes @ 0xD
   852  007D                     	ds	1
   853  007E                     ??_readFromEEPROM:	
   854  007E                     ??_load_system_state:	
   855                           ; 0 bytes @ 0xE
   856                           
   857  007E                     ??_LoadCurrentDealWith:	
   858                           ; 0 bytes @ 0xE
   859                           
   860  007E                     ??_PWMCharge:	
   861                           ; 0 bytes @ 0xE
   862                           
   863  007E                     ??_main:	
   864                           ; 0 bytes @ 0xE
   865                           
   866                           
   867                           	psect	cstackBANK0
   868  004B                     __pcstackBANK0:	
   869                           ; 0 bytes @ 0xE
   870                           
   871  004B                     ??___fttol:	
   872  004B                     ?_getADValue:	
   873                           ; 0 bytes @ 0x0
   874                           
   875                           
   876                           ; 2 bytes @ 0x0
   877  004B                     	ds	2
   878  004D                     ??_getADValue:	
   879                           
   880                           ; 0 bytes @ 0x2
   881  004D                     	ds	1
   882  004E                     ___fttol@sign1:	
   883                           
   884                           ; 1 bytes @ 0x3
   885  004E                     	ds	1
   886  004F                     getADValue@channel:	
   887  004F                     ___fttol@lval:	
   888                           ; 1 bytes @ 0x4
   889                           
   890                           
   891                           ; 4 bytes @ 0x4
   892  004F                     	ds	1
   893  0050                     getADValue@AD_Result:	
   894                           
   895                           ; 2 bytes @ 0x5
   896  0050                     	ds	2
   897  0052                     getADValue@max:	
   898                           
   899                           ; 2 bytes @ 0x7
   900  0052                     	ds	1
   901  0053                     ___fttol@exp1:	
   902                           
   903                           ; 1 bytes @ 0x8
   904  0053                     	ds	1
   905  0054                     ?___lwtoft:	
   906  0054                     getADValue@min:	
   907                           ; 3 bytes @ 0x9
   908                           
   909  0054                     ___lwtoft@c:	
   910                           ; 2 bytes @ 0x9
   911                           
   912                           
   913                           ; 2 bytes @ 0x9
   914  0054                     	ds	2
   915  0056                     getADValue@i:	
   916                           
   917                           ; 2 bytes @ 0xB
   918  0056                     	ds	1
   919  0057                     ?___ftdiv:	
   920  0057                     ___ftdiv@f2:	
   921                           ; 3 bytes @ 0xC
   922                           
   923                           
   924                           ; 3 bytes @ 0xC
   925  0057                     	ds	1
   926  0058                     getADValue@AD_OneResult:	
   927                           
   928                           ; 2 bytes @ 0xD
   929  0058                     	ds	2
   930  005A                     ?_GetBatteryVoltage:	
   931  005A                     ?_GetSolarPanelVoltage:	
   932                           ; 2 bytes @ 0xF
   933                           
   934  005A                     ?_GetLoadCurrentVoltage:	
   935                           ; 2 bytes @ 0xF
   936                           
   937  005A                     ___ftdiv@f1:	
   938                           ; 2 bytes @ 0xF
   939                           
   940                           
   941                           ; 3 bytes @ 0xF
   942  005A                     	ds	2
   943  005C                     ??_SolarPanelDealWith:	
   944  005C                     ??_SwitchBatteryState:	
   945                           ; 0 bytes @ 0x11
   946                           
   947  005C                     ??_KaiJi:	
   948                           ; 0 bytes @ 0x11
   949                           
   950  005C                     PWMCharge@ChangeBatteryVoltag:	
   951                           ; 0 bytes @ 0x11
   952                           
   953                           
   954                           ; 2 bytes @ 0x11
   955  005C                     	ds	1
   956  005D                     ??___ftdiv:	
   957                           
   958                           ; 0 bytes @ 0x12
   959  005D                     	ds	3
   960  0060                     ___ftdiv@cntr:	
   961                           
   962                           ; 1 bytes @ 0x15
   963  0060                     	ds	1
   964  0061                     ___ftdiv@f3:	
   965                           
   966                           ; 3 bytes @ 0x16
   967  0061                     	ds	1
   968  0062                     SolarPanelDealWith@SolarPanelVoltage:	
   969                           
   970                           ; 2 bytes @ 0x17
   971  0062                     	ds	2
   972  0064                     ___ftdiv@exp:	
   973                           
   974                           ; 1 bytes @ 0x19
   975  0064                     	ds	1
   976  0065                     ___ftdiv@sign:	
   977                           
   978                           ; 1 bytes @ 0x1A
   979  0065                     	ds	1
   980  0066                     readFromEEPROM@l_byte:	
   981                           
   982                           ; 1 bytes @ 0x1B
   983  0066                     	ds	1
   984  0067                     readFromEEPROM@h_byte:	
   985                           
   986                           ; 1 bytes @ 0x1C
   987  0067                     	ds	1
   988  0068                     readFromEEPROM@read_data:	
   989                           
   990                           ; 2 bytes @ 0x1D
   991  0068                     	ds	2
   992  006A                     readFromEEPROM@type:	
   993                           
   994                           ; 1 bytes @ 0x1F
   995  006A                     	ds	1
   996                           
   997                           	psect	text587
   998  02E4                     __ptext587:	
   999 ;; =============== function _SwitchBatteryState ends ============
  1000                           
  1001                           
  1002 ;; *************** function _PWMCharge *****************
  1003 ;; Defined at:
  1004 ;;		line 628 in file "C:\CTK\CTK80A 150928\CTK80A_Jas\mypic.h"
  1005 ;; Parameters:    Size  Location     Type
  1006 ;;		None
  1007 ;; Auto vars:     Size  Location     Type
  1008 ;;  ChangeBatter    2   17[BANK0 ] unsigned int 
  1009 ;; Return value:  Size  Location     Type
  1010 ;;		None               void
  1011 ;; Registers used:
  1012 ;;		wreg, status,2, status,0, pclath, cstack
  1013 ;; Tracked objects:
  1014 ;;		On entry : 1F/0
  1015 ;;		On exit  : 1F/0
  1016 ;;		Unchanged: FFFE0/0
  1017 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1018 ;;      Params:         0       0       0       0
  1019 ;;      Locals:         0       2       0       0
  1020 ;;      Temps:          0       0       0       0
  1021 ;;      Totals:         0       2       0       0
  1022 ;;Total ram usage:        2 bytes
  1023 ;; Hardware stack levels used:    1
  1024 ;; Hardware stack levels required when called:    5
  1025 ;; This function calls:
  1026 ;;		_GetBatteryVoltage
  1027 ;; This function is called by:
  1028 ;;		_main
  1029 ;; This function uses a non-reentrant model
  1030 ;;
  1031  02E4                     _PWMCharge:	
  1032                           
  1033                           ;mypic.h: 629: unsigned int ChangeBatteryVoltag;
  1034                           ;mypic.h: 630: ChangeBatteryVoltag = GetBatteryVoltage();
  1035                           
  1036                           ; Regs used in _PWMCharge: [wreg+status,2+status,0+pclath+cstack]
  1037  02E4  318C  2453  3182   	fcall	_GetBatteryVoltage
  1038  02E7  085B               	movf	?_GetBatteryVoltage+1,w
  1039  02E8  00DD               	movwf	PWMCharge@ChangeBatteryVoltag+1
  1040  02E9  085A               	movf	?_GetBatteryVoltage,w
  1041  02EA  00DC               	movwf	PWMCharge@ChangeBatteryVoltag
  1042                           
  1043                           ;mypic.h: 631: if((EnhanceChargeFlag == 1) || (EqualizingChargeFlag == 1) || (FloatingCh
      +                          argeFlag == 1))
  1044  02EB  1CEB               	btfss	_EnhanceChargeFlag/(0+8),_EnhanceChargeFlag& (0+7)
  1045  02EC  196B               	btfsc	_EqualizingChargeFlag/(0+8),_EqualizingChargeFlag& (0+7)
  1046  02ED  2AF0               	goto	l2344
  1047  02EE  1DEB               	btfss	_FloatingChargeFlag/(0+8),_FloatingChargeFlag& (0+7)
  1048  02EF  2B28               	goto	l2342
  1049  02F0                     l2344:	
  1050                           
  1051                           ;mypic.h: 632: {
  1052                           ;mypic.h: 633: (PORTB &= ~(1 << 0));
  1053  02F0  100D               	bcf	13,0	;volatile
  1054                           
  1055                           ;mypic.h: 635: if(ChangeBatteryVoltag < ClampVoltage)
  1056  02F1  0825               	movf	_ClampVoltage+1,w
  1057  02F2  025D               	subwf	PWMCharge@ChangeBatteryVoltag+1,w
  1058  02F3  1D03               	skipz
  1059  02F4  2AF7               	goto	u3155
  1060  02F5  0824               	movf	_ClampVoltage,w
  1061  02F6  025C               	subwf	PWMCharge@ChangeBatteryVoltag,w
  1062  02F7                     u3155:	
  1063  02F7  1803               	skipnc
  1064  02F8  2B0C               	goto	l5468
  1065                           
  1066                           ;mypic.h: 636: {
  1067                           ;mypic.h: 637: PVChargeFlag = 1;
  1068  02F9  17EB               	bsf	_PVChargeFlag/(0+8),_PVChargeFlag& (0+7)
  1069                           
  1070                           ;mypic.h: 638: if(DutyRatio > 249)
  1071  02FA  30FA               	movlw	250
  1072  02FB  023F               	subwf	_DutyRatio,w
  1073  02FC  1C03               	skipc
  1074  02FD  2B05               	goto	l2346
  1075                           
  1076                           ;mypic.h: 639: {
  1077                           ;mypic.h: 640: TMR2IE = 0;
  1078  02FE  0021               	movlb	1	; select bank1
  1079  02FF  1091               	bcf	17,1
  1080                           
  1081                           ;mypic.h: 641: T2Flag = 0;
  1082  0300  0020               	movlb	0	; select bank0
  1083  0301  11EC               	bcf	_T2Flag/(0+8),_T2Flag& (0+7)
  1084                           
  1085                           ;mypic.h: 642: PWMFlag = 0;
  1086  0302  116C               	bcf	_PWMFlag/(0+8),_PWMFlag& (0+7)
  1087                           
  1088                           ;mypic.h: 643: (PORTA &= ~(1 << 0));
  1089  0303  100C               	bcf	12,0	;volatile
  1090                           
  1091                           ;mypic.h: 644: }
  1092  0304  2B0C               	goto	l5468
  1093  0305                     l2346:	
  1094                           
  1095                           ;mypic.h: 645: else
  1096                           ;mypic.h: 646: {
  1097                           ;mypic.h: 647: if(T2Flag == 0)
  1098  0305  19EC               	btfsc	_T2Flag/(0+8),_T2Flag& (0+7)
  1099  0306  2B0A               	goto	l5466
  1100                           
  1101                           ;mypic.h: 648: {
  1102                           ;mypic.h: 649: TMR2IE = 1;
  1103  0307  0021               	movlb	1	; select bank1
  1104                           
  1105                           ;mypic.h: 650: T2Flag = 1;
  1106                           
  1107                           ;mypic.h: 651: PWMFlag = 1;
  1108  0308  2334  3182         	fcall	PL19	;call to abstracted procedure
  1109  030A                     l5466:	
  1110                           
  1111                           ;mypic.h: 652: }
  1112                           ;mypic.h: 653: DutyRatio = DutyRatio+10;
  1113  030A  300A               	movlw	10
  1114  030B  07BF               	addwf	_DutyRatio,f
  1115  030C                     l5468:	
  1116                           
  1117                           ;mypic.h: 654: }
  1118                           ;mypic.h: 655: }
  1119                           ;mypic.h: 656: if(ChangeBatteryVoltag > ClampVoltage)
  1120  030C  085D               	movf	PWMCharge@ChangeBatteryVoltag+1,w
  1121  030D  0225               	subwf	_ClampVoltage+1,w
  1122  030E  1D03               	skipz
  1123  030F  2B12               	goto	u3185
  1124  0310  085C               	movf	PWMCharge@ChangeBatteryVoltag,w
  1125  0311  0224               	subwf	_ClampVoltage,w
  1126  0312                     u3185:	
  1127  0312  1803               	skipnc
  1128  0313  0008               	return
  1129                           
  1130                           ;mypic.h: 657: {
  1131                           ;mypic.h: 658: if(DutyRatio < 9)
  1132  0314  3009               	movlw	9
  1133  0315  023F               	subwf	_DutyRatio,w
  1134  0316  1803               	skipnc
  1135  0317  2B20               	goto	l2350
  1136                           
  1137                           ;mypic.h: 659: {
  1138                           ;mypic.h: 660: TMR2IE = 0;
  1139  0318  0021               	movlb	1	; select bank1
  1140  0319  1091               	bcf	17,1
  1141                           
  1142                           ;mypic.h: 661: T2Flag = 0;
  1143  031A  0020               	movlb	0	; select bank0
  1144  031B  11EC               	bcf	_T2Flag/(0+8),_T2Flag& (0+7)
  1145                           
  1146                           ;mypic.h: 662: PWMFlag = 0;
  1147  031C  116C               	bcf	_PWMFlag/(0+8),_PWMFlag& (0+7)
  1148                           
  1149                           ;mypic.h: 663: (PORTA |= (1 << 0));
  1150  031D  140C               	bsf	12,0	;volatile
  1151                           
  1152                           ;mypic.h: 664: PVChargeFlag = 0;
  1153  031E  13EB               	bcf	_PVChargeFlag/(0+8),_PVChargeFlag& (0+7)
  1154                           
  1155                           ;mypic.h: 665: }
  1156  031F  0008               	return
  1157  0320                     l2350:	
  1158                           
  1159                           ;mypic.h: 666: else
  1160                           ;mypic.h: 667: {
  1161                           ;mypic.h: 668: PVChargeFlag = 1;
  1162  0320  17EB               	bsf	_PVChargeFlag/(0+8),_PVChargeFlag& (0+7)
  1163                           
  1164                           ;mypic.h: 669: if(T2Flag == 0)
  1165  0321  19EC               	btfsc	_T2Flag/(0+8),_T2Flag& (0+7)
  1166  0322  2B25               	goto	l5476
  1167                           
  1168                           ;mypic.h: 670: {
  1169                           ;mypic.h: 671: TMR2IE = 1;
  1170  0323  0021               	movlb	1	; select bank1
  1171                           
  1172                           ;mypic.h: 672: T2Flag = 1;
  1173                           
  1174                           ;mypic.h: 673: PWMFlag = 1;
  1175  0324  2334               	fcall	PL19	;call to abstracted procedure
  1176  0325                     l5476:	
  1177                           
  1178                           ;mypic.h: 674: }
  1179                           ;mypic.h: 675: DutyRatio = DutyRatio-10;
  1180  0325  30F6               	movlw	246
  1181  0326  07BF               	addwf	_DutyRatio,f
  1182  0327  0008               	return
  1183  0328                     l2342:	
  1184                           
  1185                           ;mypic.h: 679: else
  1186                           ;mypic.h: 680: {
  1187                           ;mypic.h: 681: if(T2Flag == 1)
  1188  0328  1DEC               	btfss	_T2Flag/(0+8),_T2Flag& (0+7)
  1189  0329  2B2F               	goto	l5480
  1190                           
  1191                           ;mypic.h: 682: {
  1192                           ;mypic.h: 683: TMR2IE = 0;
  1193  032A  0021               	movlb	1	; select bank1
  1194  032B  1091               	bcf	17,1
  1195                           
  1196                           ;mypic.h: 684: T2Flag = 0;
  1197  032C  0020               	movlb	0	; select bank0
  1198  032D  11EC               	bcf	_T2Flag/(0+8),_T2Flag& (0+7)
  1199                           
  1200                           ;mypic.h: 685: PWMFlag = 0;
  1201  032E  116C               	bcf	_PWMFlag/(0+8),_PWMFlag& (0+7)
  1202  032F                     l5480:	
  1203                           
  1204                           ;mypic.h: 686: }
  1205                           ;mypic.h: 687: PwmCount = 0;
  1206  032F  01C3               	clrf	_PwmCount
  1207                           
  1208                           ;mypic.h: 688: DutyRatio = 0;
  1209  0330  01BF               	clrf	_DutyRatio
  1210                           
  1211                           ;mypic.h: 689: (PORTB |= (1 << 0));
  1212  0331  140D               	bsf	13,0	;volatile
  1213                           
  1214                           ;mypic.h: 691: PVChargeFlag = 0;
  1215  0332  13EB               	bcf	_PVChargeFlag/(0+8),_PVChargeFlag& (0+7)
  1216  0333  0008               	return
  1217  0334                     __end_of_PWMCharge:	
  1218  0334                     PL19:	
  1219  0334  1491               	bsf	17,1
  1220  0335  0020               	movlb	0	; select bank0
  1221  0336  15EC               	bsf	_T2Flag/(0+8),_T2Flag& (0+7)
  1222  0337  156C               	bsf	_PWMFlag/(0+8),_PWMFlag& (0+7)
  1223  0338  0008               	return
  1224                           
  1225                           	psect	text604
  1226  080A                     __ptext604:	
  1227 ;; =============== function _lcd_write_data ends ============
  1228                           
  1229                           
  1230 ;; *************** function _getADValueOneTime *****************
  1231 ;; Defined at:
  1232 ;;		line 358 in file "C:\CTK\CTK80A 150928\CTK80A_Jas\mypic.h"
  1233 ;; Parameters:    Size  Location     Type
  1234 ;;  channel         1    wreg     unsigned char 
  1235 ;; Auto vars:     Size  Location     Type
  1236 ;;  channel         1   10[COMMON] unsigned char 
  1237 ;;  AD_Result       2   11[COMMON] unsigned int 
  1238 ;; Return value:  Size  Location     Type
  1239 ;;                  2    6[COMMON] unsigned int 
  1240 ;; Registers used:
  1241 ;;		wreg, status,2, status,0, pclath, cstack
  1242 ;; Tracked objects:
  1243 ;;		On entry : 1F/0
  1244 ;;		On exit  : 1F/1
  1245 ;;		Unchanged: FFFE0/0
  1246 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1247 ;;      Params:         2       0       0       0
  1248 ;;      Locals:         3       0       0       0
  1249 ;;      Temps:          2       0       0       0
  1250 ;;      Totals:         7       0       0       0
  1251 ;;Total ram usage:        7 bytes
  1252 ;; Hardware stack levels used:    1
  1253 ;; Hardware stack levels required when called:    2
  1254 ;; This function calls:
  1255 ;;		_Delay
  1256 ;; This function is called by:
  1257 ;;		_getADValue
  1258 ;; This function uses a non-reentrant model
  1259 ;;
  1260  080A                     _getADValueOneTime:	
  1261                           
  1262                           ; Regs used in _getADValueOneTime: [wreg+status,2+status,0+pclath+cstack]
  1263                           ;getADValueOneTime@channel stored from wreg
  1264  080A  00FA               	movwf	getADValueOneTime@channel
  1265                           
  1266                           ;mypic.h: 360: FVRCON = 0b00000000;
  1267  080B  0022               	movlb	2	; select bank2
  1268  080C  0197               	clrf	23	;volatile
  1269                           
  1270                           ;mypic.h: 361: ADCON0 = (channel & 0xff);
  1271  080D  087A               	movf	getADValueOneTime@channel,w
  1272  080E  0021               	movlb	1	; select bank1
  1273  080F  009D               	movwf	29	;volatile
  1274                           
  1275                           ;mypic.h: 362: ADCON1 = 0b10010000;;
  1276  0810  3090               	movlw	144
  1277  0811  009E               	movwf	30	;volatile
  1278                           
  1279                           ;mypic.h: 363: Delay(20);
  1280  0812  3014               	movlw	20
  1281  0813  00F0               	movwf	?_Delay
  1282  0814  01F1               	clrf	?_Delay+1
  1283  0815  2301  3188         	fcall	_Delay
  1284                           
  1285                           ;mypic.h: 364: ADGO = 1;
  1286  0817  149D               	bsf	29,1
  1287  0818                     l2256:	
  1288                           ;mypic.h: 365: while(ADGO);
  1289                           
  1290  0818  189D               	btfsc	29,1
  1291  0819  2818               	goto	l2256
  1292                           
  1293                           ;mypic.h: 366: AD_Result = ADRESL & 0x00FF;
  1294  081A  081B               	movf	27,w	;volatile
  1295  081B  00FB               	movwf	getADValueOneTime@AD_Result
  1296  081C  01FC               	clrf	getADValueOneTime@AD_Result+1
  1297                           
  1298                           ;mypic.h: 367: AD_Result |= ADRESH <<8 ;
  1299  081D  081C               	movf	28,w	;volatile
  1300  081E  00F8               	movwf	??_getADValueOneTime
  1301  081F  01F9               	clrf	??_getADValueOneTime+1
  1302  0820  3008               	movlw	8
  1303  0821                     u2765:	
  1304  0821  35F8               	lslf	??_getADValueOneTime,f
  1305  0822  0DF9               	rlf	??_getADValueOneTime+1,f
  1306  0823  0B89               	decfsz	9,f
  1307  0824  2821               	goto	u2765
  1308  0825  0878               	movf	??_getADValueOneTime,w
  1309  0826  04FB               	iorwf	getADValueOneTime@AD_Result,f
  1310  0827  0879               	movf	??_getADValueOneTime+1,w
  1311  0828  04FC               	iorwf	getADValueOneTime@AD_Result+1,f
  1312                           
  1313                           ;mypic.h: 368: ADCON0 = 0b00101000;
  1314  0829  3028               	movlw	40
  1315  082A  009D               	movwf	29	;volatile
  1316                           
  1317                           ;mypic.h: 369: Delay(20);
  1318  082B  3014               	movlw	20
  1319  082C  00F0               	movwf	?_Delay
  1320  082D  01F1               	clrf	?_Delay+1
  1321  082E  2301               	fcall	_Delay
  1322                           
  1323                           ;mypic.h: 370: return AD_Result;
  1324  082F  087C               	movf	getADValueOneTime@AD_Result+1,w
  1325  0830  00F7               	movwf	?_getADValueOneTime+1
  1326  0831  087B               	movf	getADValueOneTime@AD_Result,w
  1327  0832  00F6               	movwf	?_getADValueOneTime
  1328  0833  0008               	return
  1329  0834                     __end_of_getADValueOneTime:	
  1330  0834                     __ptext596:	
  1331 ;; =============== function _lcd_print_line1 ends ============
  1332                           
  1333                           
  1334 ;; *************** function _lcd_init *****************
  1335 ;; Defined at:
  1336 ;;		line 73 in file "C:\CTK\CTK80A 150928\CTK80A_Jas\LM016.h"
  1337 ;; Parameters:    Size  Location     Type
  1338 ;;		None
  1339 ;; Auto vars:     Size  Location     Type
  1340 ;;		None
  1341 ;; Return value:  Size  Location     Type
  1342 ;;		None               void
  1343 ;; Registers used:
  1344 ;;		wreg, status,2, status,0, pclath, cstack
  1345 ;; Tracked objects:
  1346 ;;		On entry : 17F/0
  1347 ;;		On exit  : 17F/0
  1348 ;;		Unchanged: FFE80/0
  1349 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1350 ;;      Params:         0       0       0       0
  1351 ;;      Locals:         0       0       0       0
  1352 ;;      Temps:          0       0       0       0
  1353 ;;      Totals:         0       0       0       0
  1354 ;;Total ram usage:        0 bytes
  1355 ;; Hardware stack levels used:    1
  1356 ;; Hardware stack levels required when called:    3
  1357 ;; This function calls:
  1358 ;;		_lcd_write_command
  1359 ;;		_delay
  1360 ;; This function is called by:
  1361 ;;		_main
  1362 ;; This function uses a non-reentrant model
  1363 ;;
  1364  0834                     _lcd_init:	
  1365                           
  1366                           ;LM016.h: 74: lcd_write_command(0x38);
  1367                           
  1368                           ; Regs used in _lcd_init: [wreg+status,2+status,0+pclath+cstack]
  1369  0834  3038               	movlw	56
  1370  0835  21A0  3188         	fcall	_lcd_write_command
  1371                           
  1372                           ;LM016.h: 75: lcd_write_command(0x0c);
  1373  0837  300C               	movlw	12
  1374  0838  21A0  3188         	fcall	_lcd_write_command
  1375                           
  1376                           ;LM016.h: 76: lcd_write_command(0x06);
  1377  083A  3006               	movlw	6
  1378  083B  21A0  3188         	fcall	_lcd_write_command
  1379                           
  1380                           ;LM016.h: 77: lcd_write_command(0x01);
  1381  083D  3001               	movlw	1
  1382  083E  21A0  3188         	fcall	_lcd_write_command
  1383                           
  1384                           ;LM016.h: 78: delay(1000);
  1385  0840  26BD  3188         	fcall	PL21	;call to abstracted procedure
  1386  0842  29C5               	ljmp	l4640
  1387  0843                     __end_of_lcd_init:	
  1388  0843                     __pmaintext:	
  1389 ;;Data sizes: Strings 0, constant 227, data 79, bss 43, persistent 0 stack 0
  1390 ;;Auto spaces:   Size  Autos    Used
  1391 ;; COMMON          14     14      14
  1392 ;; BANK0           80     32      80
  1393 ;; BANK1           80      0      78
  1394 ;; BANK2           80      0       0
  1395 ;;
  1396 ;; Pointer list with targets:
  1397 ;; ?___ftpack	float  size(1) Largest target is 0
  1398 ;;
  1399 ;; ?_readFromEEPROM	unsigned int  size(1) Largest target is 0
  1400 ;;
  1401 ;; ?___ftdiv	float  size(1) Largest target is 0
  1402 ;;
  1403 ;; ?___fttol	long  size(1) Largest target is 0
  1404 ;;
  1405 ;; ?___lwtoft	float  size(1) Largest target is 0
  1406 ;;
  1407 ;; ?___wmul	unsigned int  size(1) Largest target is 0
  1408 ;;
  1409 ;; ?_GetLoadCurrentVoltage	unsigned int  size(1) Largest target is 0
  1410 ;;
  1411 ;; ?_GetSolarPanelVoltage	unsigned int  size(1) Largest target is 0
  1412 ;;
  1413 ;; ?_GetBatteryVoltage	unsigned int  size(1) Largest target is 0
  1414 ;;
  1415 ;; ?_getADValue	unsigned int  size(1) Largest target is 0
  1416 ;;
  1417 ;; ?_getADValueOneTime	unsigned int  size(1) Largest target is 0
  1418 ;;
  1419 ;; charPointer	PTR const unsigned char  size(2) Largest target is 4096
  1420 ;;		 -> ROM(CODE[4096]), state7_2(CODE[17]), state7_1(CODE[15]), state6_2(CODE[15]), 
  1421 ;;		 -> state6_1(CODE[16]), state5_2(CODE[16]), state5_1(CODE[17]), state4_1(CODE[17]), 
  1422 ;;		 -> state3_2(CODE[17]), state3_1(CODE[17]), state2_1(CODE[13]), state1_2(CODE[16]), 
  1423 ;;		 -> state1_1(CODE[16]), systemType1(BANK1[11]), checking(BANK1[12]), welcome(BANK1[8]), 
  1424 ;;		 -> state2_4(CODE[13]), state2_3(CODE[10]), state2_2(CODE[12]), 
  1425 ;;
  1426 ;; lcd_print_line2@charPointer	PTR const unsigned char  size(2) Largest target is 4096
  1427 ;;		 -> ROM(CODE[4096]), state7_2(CODE[17]), state7_1(CODE[15]), state6_2(CODE[15]), 
  1428 ;;		 -> state6_1(CODE[16]), state5_2(CODE[16]), state5_1(CODE[17]), state4_1(CODE[17]), 
  1429 ;;		 -> state3_2(CODE[17]), state3_1(CODE[17]), state2_1(CODE[13]), state1_2(CODE[16]), 
  1430 ;;		 -> state1_1(CODE[16]), systemType1(BANK1[11]), checking(BANK1[12]), welcome(BANK1[8]), 
  1431 ;;		 -> state2_4(CODE[13]), state2_3(CODE[10]), state2_2(CODE[12]), 
  1432 ;;
  1433 ;; lcd_print_line1@charPointer	PTR const unsigned char  size(2) Largest target is 4096
  1434 ;;		 -> ROM(CODE[4096]), state7_2(CODE[17]), state7_1(CODE[15]), state6_2(CODE[15]), 
  1435 ;;		 -> state6_1(CODE[16]), state5_2(CODE[16]), state5_1(CODE[17]), state4_1(CODE[17]), 
  1436 ;;		 -> state3_2(CODE[17]), state3_1(CODE[17]), state2_1(CODE[13]), state1_2(CODE[16]), 
  1437 ;;		 -> state1_1(CODE[16]), systemType1(BANK1[11]), checking(BANK1[12]), welcome(BANK1[8]), 
  1438 ;;		 -> state2_4(CODE[13]), state2_3(CODE[10]), state2_2(CODE[12]), 
  1439 ;;
  1440 ;; batteryStatePointer	PTR unsigned char [3] size(1) Largest target is 13
  1441 ;;		 -> state2_4(CODE[13]), state2_3(CODE[10]), state2_2(CODE[12]), 
  1442 ;;
  1443 ;; BatteryStandard	PTR unsigned int  size(1) Largest target is 22
  1444 ;;		 -> Battery_24V(BANK1[22]), Battery_12V(BANK1[22]), NULL(NULL[0]), 
  1445 ;;
  1446 ;;
  1447 ;; Critical Paths under _main in COMMON
  1448 ;;
  1449 ;;   _KaiJi->_GetBatteryVoltage
  1450 ;;   _KaiJi->_GetSolarPanelVoltage
  1451 ;;   _KaiJi->_GetLoadCurrentVoltage
  1452 ;;   _SwitchBatteryState->_GetBatteryVoltage
  1453 ;;   _PWMCharge->_GetBatteryVoltage
  1454 ;;   _SolarPanelDealWith->_GetSolarPanelVoltage
  1455 ;;   _LoadCurrentDealWith->_GetLoadCurrentVoltage
  1456 ;;   _load_system_state->_readFromEEPROM
  1457 ;;   _lcd_print_line2->_lcd_write_command
  1458 ;;   _lcd_print_line2->_lcd_write_data
  1459 ;;   _lcd_print_line1->_lcd_write_command
  1460 ;;   _lcd_print_line1->_lcd_write_data
  1461 ;;   _lcd_init->_lcd_write_command
  1462 ;;   _lcd_move_char->_lcd_write_command
  1463 ;;   _getADValue->_getADValueOneTime
  1464 ;;   _readFromEEPROM->___fttol
  1465 ;;   ___lwtoft->___fttol
  1466 ;;   ___ftdiv->___fttol
  1467 ;;   _lcd_write_command->_delay
  1468 ;;   _lcd_write_data->_delay
  1469 ;;   _getADValueOneTime->_Delay
  1470 ;;   _system_state_init->_Delay
  1471 ;;   ___fttol->___ftpack
  1472 ;;
  1473 ;; Critical Paths under _ISR_Timer in COMMON
  1474 ;;
  1475 ;;   None.
  1476 ;;
  1477 ;; Critical Paths under _main in BANK0
  1478 ;;
  1479 ;;   _KaiJi->_GetBatteryVoltage
  1480 ;;   _KaiJi->_GetSolarPanelVoltage
  1481 ;;   _KaiJi->_GetLoadCurrentVoltage
  1482 ;;   _SwitchBatteryState->_GetBatteryVoltage
  1483 ;;   _PWMCharge->_GetBatteryVoltage
  1484 ;;   _SolarPanelDealWith->_GetSolarPanelVoltage
  1485 ;;   _LoadCurrentDealWith->_GetLoadCurrentVoltage
  1486 ;;   _GetLoadCurrentVoltage->_getADValue
  1487 ;;   _GetSolarPanelVoltage->_getADValue
  1488 ;;   _GetBatteryVoltage->_getADValue
  1489 ;;   _load_system_state->_readFromEEPROM
  1490 ;;   _readFromEEPROM->___ftdiv
  1491 ;;   ___lwtoft->___fttol
  1492 ;;   ___ftdiv->___lwtoft
  1493 ;;
  1494 ;; Critical Paths under _ISR_Timer in BANK0
  1495 ;;
  1496 ;;   None.
  1497 ;;
  1498 ;; Critical Paths under _main in BANK1
  1499 ;;
  1500 ;;   None.
  1501 ;;
  1502 ;; Critical Paths under _ISR_Timer in BANK1
  1503 ;;
  1504 ;;   None.
  1505 ;;
  1506 ;; Critical Paths under _main in BANK2
  1507 ;;
  1508 ;;   None.
  1509 ;;
  1510 ;; Critical Paths under _ISR_Timer in BANK2
  1511 ;;
  1512 ;;   None.
  1513 ;;
  1514 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1515 ;;
  1516 ;;
  1517 ;;Call Graph Tables:
  1518 ;;
  1519 ;; ---------------------------------------------------------------------------------
  1520 ;; (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
  1521 ;; ---------------------------------------------------------------------------------
  1522 ;; (0) _main                                                 0     0      0    7362
  1523 ;;                  _system_state_init
  1524 ;;                  _load_system_state
  1525 ;;                           _lcd_init
  1526 ;;                  _lcd_write_command
  1527 ;;                    _lcd_print_line1
  1528 ;;                    _lcd_print_line2
  1529 ;;                              _KaiJi
  1530 ;;                         _SelectMode
  1531 ;;                _LoadCurrentDealWith
  1532 ;;                 _SwitchBatteryState
  1533 ;;                         _LedDisplay
  1534 ;;                 _SolarPanelDealWith
  1535 ;;                          _PWMCharge
  1536 ;;                      _lcd_move_char
  1537 ;; ---------------------------------------------------------------------------------
  1538 ;; (1) _KaiJi                                                2     2      0    1529
  1539 ;;                                             17 BANK0      2     2      0
  1540 ;;                  _GetBatteryVoltage
  1541 ;;               _GetSolarPanelVoltage
  1542 ;;                             ___wmul
  1543 ;;              _GetLoadCurrentVoltage
  1544 ;; ---------------------------------------------------------------------------------
  1545 ;; (1) _SwitchBatteryState                                   6     6      0    1309
  1546 ;;                                             17 BANK0      6     6      0
  1547 ;;                  _GetBatteryVoltage
  1548 ;;                 _BatteryStateSwitch
  1549 ;;                      _lcd_move_char
  1550 ;;                     _lcd_write_data
  1551 ;;                              _Delay
  1552 ;; ---------------------------------------------------------------------------------
  1553 ;; (1) _PWMCharge                                            2     2      0     524
  1554 ;;                                             17 BANK0      2     2      0
  1555 ;;                  _GetBatteryVoltage
  1556 ;; ---------------------------------------------------------------------------------
  1557 ;; (1) _SolarPanelDealWith                                   8     8      0     777
  1558 ;;                                             17 BANK0      8     8      0
  1559 ;;                              _Delay
  1560 ;;               _GetSolarPanelVoltage
  1561 ;;                             ___wmul
  1562 ;; ---------------------------------------------------------------------------------
  1563 ;; (1) _LoadCurrentDealWith                                  2     2      0     547
  1564 ;;                                             17 BANK0      2     2      0
  1565 ;;              _GetLoadCurrentVoltage
  1566 ;; ---------------------------------------------------------------------------------
  1567 ;; (2) _GetLoadCurrentVoltage                                3     1      2     479
  1568 ;;                                             13 COMMON     1     1      0
  1569 ;;                                             15 BANK0      2     0      2
  1570 ;;                         _getADValue
  1571 ;; ---------------------------------------------------------------------------------
  1572 ;; (2) _GetSolarPanelVoltage                                 3     1      2     479
  1573 ;;                                             13 COMMON     1     1      0
  1574 ;;                                             15 BANK0      2     0      2
  1575 ;;                         _getADValue
  1576 ;; ---------------------------------------------------------------------------------
  1577 ;; (2) _GetBatteryVoltage                                    3     1      2     479
  1578 ;;                                             13 COMMON     1     1      0
  1579 ;;                                             15 BANK0      2     0      2
  1580 ;;                         _getADValue
  1581 ;; ---------------------------------------------------------------------------------
  1582 ;; (1) _load_system_state                                    0     0      0    1180
  1583 ;;                     _readFromEEPROM
  1584 ;; ---------------------------------------------------------------------------------
  1585 ;; (1) _lcd_print_line2                                      3     0      3     339
  1586 ;;                                              7 COMMON     3     0      3
  1587 ;;                  _lcd_write_command
  1588 ;;                     _lcd_write_data
  1589 ;; ---------------------------------------------------------------------------------
  1590 ;; (1) _lcd_print_line1                                      4     0      4     475
  1591 ;;                                              7 COMMON     4     0      4
  1592 ;;                  _lcd_write_command
  1593 ;;                              _delay
  1594 ;;                     _lcd_write_data
  1595 ;; ---------------------------------------------------------------------------------
  1596 ;; (1) _lcd_init                                             0     0      0     250
  1597 ;;                  _lcd_write_command
  1598 ;;                              _delay
  1599 ;; ---------------------------------------------------------------------------------
  1600 ;; (1) _lcd_move_char                                        2     2      0     182
  1601 ;;                                              7 COMMON     2     2      0
  1602 ;;                  _lcd_write_command
  1603 ;; ---------------------------------------------------------------------------------
  1604 ;; (3) _getADValue                                          15    13      2     456
  1605 ;;                                              0 BANK0     15    13      2
  1606 ;;                  _getADValueOneTime
  1607 ;; ---------------------------------------------------------------------------------
  1608 ;; (2) _readFromEEPROM                                       7     5      2    1180
  1609 ;;                                             12 COMMON     2     0      2
  1610 ;;                                             27 BANK0      5     5      0
  1611 ;;                             _ReadEE
  1612 ;;                           ___lwtoft
  1613 ;;                            ___ftdiv
  1614 ;;                            ___fttol
  1615 ;; ---------------------------------------------------------------------------------
  1616 ;; (3) ___lwtoft                                             3     0      3     231
  1617 ;;                                              9 BANK0      3     0      3
  1618 ;;                           ___ftpack
  1619 ;;                            ___fttol (ARG)
  1620 ;; ---------------------------------------------------------------------------------
  1621 ;; (3) ___ftdiv                                             15     9      6     489
  1622 ;;                                             12 BANK0     15     9      6
  1623 ;;                           ___ftpack
  1624 ;;                           ___lwtoft (ARG)
  1625 ;;                            ___fttol (ARG)
  1626 ;; ---------------------------------------------------------------------------------
  1627 ;; (2) _lcd_write_command                                    1     1      0     136
  1628 ;;                                              6 COMMON     1     1      0
  1629 ;;                              _delay
  1630 ;; ---------------------------------------------------------------------------------
  1631 ;; (2) _lcd_write_data                                       1     1      0     136
  1632 ;;                                              6 COMMON     1     1      0
  1633 ;;                              _delay
  1634 ;; ---------------------------------------------------------------------------------
  1635 ;; (4) _getADValueOneTime                                    7     5      2     161
  1636 ;;                                              6 COMMON     7     5      2
  1637 ;;                              _Delay
  1638 ;; ---------------------------------------------------------------------------------
  1639 ;; (1) _system_state_init                                    0     0      0     114
  1640 ;;                              _Delay
  1641 ;; ---------------------------------------------------------------------------------
  1642 ;; (3) ___fttol                                             13     9      4     252
  1643 ;;                                              8 COMMON     4     0      4
  1644 ;;                                              0 BANK0      9     9      0
  1645 ;;                           ___ftpack (ARG)
  1646 ;; ---------------------------------------------------------------------------------
  1647 ;; (4) ___ftpack                                             8     3      5     209
  1648 ;;                                              0 COMMON     8     3      5
  1649 ;; ---------------------------------------------------------------------------------
  1650 ;; (2) ___wmul                                               6     2      4      92
  1651 ;;                                              0 COMMON     6     2      4
  1652 ;; ---------------------------------------------------------------------------------
  1653 ;; (1) _LedDisplay                                           0     0      0       0
  1654 ;; ---------------------------------------------------------------------------------
  1655 ;; (2) _BatteryStateSwitch                                   8     6      2     398
  1656 ;;                                              0 COMMON     8     6      2
  1657 ;; ---------------------------------------------------------------------------------
  1658 ;; (1) _SelectMode                                           0     0      0       0
  1659 ;; ---------------------------------------------------------------------------------
  1660 ;; (3) _ReadEE                                               1     1      0      22
  1661 ;;                                              0 COMMON     1     1      0
  1662 ;; ---------------------------------------------------------------------------------
  1663 ;; (5) _Delay                                                6     4      2     114
  1664 ;;                                              0 COMMON     6     4      2
  1665 ;; ---------------------------------------------------------------------------------
  1666 ;; (3) _delay                                                6     4      2     114
  1667 ;;                                              0 COMMON     6     4      2
  1668 ;; ---------------------------------------------------------------------------------
  1669 ;; Estimated maximum stack depth 5
  1670 ;; ---------------------------------------------------------------------------------
  1671 ;; (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
  1672 ;; ---------------------------------------------------------------------------------
  1673 ;; (6) _ISR_Timer                                            0     0      0       0
  1674 ;; ---------------------------------------------------------------------------------
  1675 ;; Estimated maximum stack depth 6
  1676 ;; ---------------------------------------------------------------------------------
  1677 ;; Call Graph Graphs:
  1678 ;; _main (ROOT)
  1679 ;;   _system_state_init
  1680 ;;     _Delay
  1681 ;;   _load_system_state
  1682 ;;     _readFromEEPROM
  1683 ;;       _ReadEE
  1684 ;;       ___lwtoft
  1685 ;;         ___ftpack
  1686 ;;         ___fttol (ARG)
  1687 ;;           ___ftpack (ARG)
  1688 ;;       ___ftdiv
  1689 ;;         ___ftpack
  1690 ;;         ___lwtoft (ARG)
  1691 ;;           ___ftpack
  1692 ;;           ___fttol (ARG)
  1693 ;;             ___ftpack (ARG)
  1694 ;;         ___fttol (ARG)
  1695 ;;           ___ftpack (ARG)
  1696 ;;       ___fttol
  1697 ;;         ___ftpack (ARG)
  1698 ;;   _lcd_init
  1699 ;;     _lcd_write_command
  1700 ;;       _delay
  1701 ;;     _delay
  1702 ;;   _lcd_write_command
  1703 ;;     _delay
  1704 ;;   _lcd_print_line1
  1705 ;;     _lcd_write_command
  1706 ;;       _delay
  1707 ;;     _delay
  1708 ;;     _lcd_write_data
  1709 ;;       _delay
  1710 ;;   _lcd_print_line2
  1711 ;;     _lcd_write_command
  1712 ;;       _delay
  1713 ;;     _lcd_write_data
  1714 ;;       _delay
  1715 ;;   _KaiJi
  1716 ;;     _GetBatteryVoltage
  1717 ;;       _getADValue
  1718 ;;         _getADValueOneTime
  1719 ;;           _Delay
  1720 ;;     _GetSolarPanelVoltage
  1721 ;;       _getADValue
  1722 ;;         _getADValueOneTime
  1723 ;;           _Delay
  1724 ;;     ___wmul
  1725 ;;     _GetLoadCurrentVoltage
  1726 ;;       _getADValue
  1727 ;;         _getADValueOneTime
  1728 ;;           _Delay
  1729 ;;   _SelectMode
  1730 ;;   _LoadCurrentDealWith
  1731 ;;     _GetLoadCurrentVoltage
  1732 ;;       _getADValue
  1733 ;;         _getADValueOneTime
  1734 ;;           _Delay
  1735 ;;   _SwitchBatteryState
  1736 ;;     _GetBatteryVoltage
  1737 ;;       _getADValue
  1738 ;;         _getADValueOneTime
  1739 ;;           _Delay
  1740 ;;     _BatteryStateSwitch
  1741 ;;     _lcd_move_char
  1742 ;;       _lcd_write_command
  1743 ;;         _delay
  1744 ;;     _lcd_write_data
  1745 ;;       _delay
  1746 ;;     _Delay
  1747 ;;   _LedDisplay
  1748 ;;   _SolarPanelDealWith
  1749 ;;     _Delay
  1750 ;;     _GetSolarPanelVoltage
  1751 ;;       _getADValue
  1752 ;;         _getADValueOneTime
  1753 ;;           _Delay
  1754 ;;     ___wmul
  1755 ;;   _PWMCharge
  1756 ;;     _GetBatteryVoltage
  1757 ;;       _getADValue
  1758 ;;         _getADValueOneTime
  1759 ;;           _Delay
  1760 ;;   _lcd_move_char
  1761 ;;     _lcd_write_command
  1762 ;;       _delay
  1763 ;;
  1764 ;; _ISR_Timer (ROOT)
  1765 ;;
  1766 ;; Address spaces:
  1767 ;;Name               Size   Autos  Total    Cost      Usage
  1768 ;;BIGRAM              F0      0       0       0        0.0%
  1769 ;;EEDATA             100      0       0       0        0.0%
  1770 ;;NULL                 0      0       0       0        0.0%
  1771 ;;CODE                 0      0       0       0        0.0%
  1772 ;;BITCOMMON            E      0       0       1        0.0%
  1773 ;;BITSFR0              0      0       0       1        0.0%
  1774 ;;SFR0                 0      0       0       1        0.0%
  1775 ;;COMMON               E      E       E       2      100.0%
  1776 ;;BITSFR1              0      0       0       2        0.0%
  1777 ;;SFR1                 0      0       0       2        0.0%
  1778 ;;BITSFR2              0      0       0       3        0.0%
  1779 ;;SFR2                 0      0       0       3        0.0%
  1780 ;;STACK                0      0       5       3        0.0%
  1781 ;;BITSFR3              0      0       0       4        0.0%
  1782 ;;SFR3                 0      0       0       4        0.0%
  1783 ;;ABS                  0      0      AC       4        0.0%
  1784 ;;BITBANK0            50      0       4       5        5.0%
  1785 ;;BITSFR4              0      0       0       5        0.0%
  1786 ;;SFR4                 0      0       0       5        0.0%
  1787 ;;BANK0               50     20      50       6      100.0%
  1788 ;;BITSFR5              0      0       0       6        0.0%
  1789 ;;SFR5                 0      0       0       6        0.0%
  1790 ;;BITBANK1            50      0       0       7        0.0%
  1791 ;;BITSFR6              0      0       0       7        0.0%
  1792 ;;SFR6                 0      0       0       7        0.0%
  1793 ;;BANK1               50      0      4E       8       97.5%
  1794 ;;BITSFR7              0      0       0       8        0.0%
  1795 ;;SFR7                 0      0       0       8        0.0%
  1796 ;;BITBANK2            50      0       0       9        0.0%
  1797 ;;BITSFR8              0      0       0       9        0.0%
  1798 ;;SFR8                 0      0       0       9        0.0%
  1799 ;;BANK2               50      0       0      10        0.0%
  1800 ;;BITSFR9              0      0       0      10        0.0%
  1801 ;;SFR9                 0      0       0      10        0.0%
  1802 ;;BITSFR10             0      0       0      11        0.0%
  1803 ;;SFR10                0      0       0      11        0.0%
  1804 ;;DATA                 0      0      B1      11        0.0%
  1805 ;;BITSFR11             0      0       0      12        0.0%
  1806 ;;SFR11                0      0       0      12        0.0%
  1807 ;;BITSFR12             0      0       0      13        0.0%
  1808 ;;SFR12                0      0       0      13        0.0%
  1809 ;;BITSFR13             0      0       0      14        0.0%
  1810 ;;SFR13                0      0       0      14        0.0%
  1811 ;;BITSFR14             0      0       0      15        0.0%
  1812 ;;SFR14                0      0       0      15        0.0%
  1813 ;;BITSFR15             0      0       0      16        0.0%
  1814 ;;SFR15                0      0       0      16        0.0%
  1815 ;;BITSFR16             0      0       0      17        0.0%
  1816 ;;SFR16                0      0       0      17        0.0%
  1817 ;;BITSFR17             0      0       0      18        0.0%
  1818 ;;SFR17                0      0       0      18        0.0%
  1819 ;;BITSFR18             0      0       0      19        0.0%
  1820 ;;SFR18                0      0       0      19        0.0%
  1821 ;;BITSFR19             0      0       0      20        0.0%
  1822 ;;SFR19                0      0       0      20        0.0%
  1823 ;;BITSFR20             0      0       0      21        0.0%
  1824 ;;SFR20                0      0       0      21        0.0%
  1825 ;;BITSFR21             0      0       0      22        0.0%
  1826 ;;SFR21                0      0       0      22        0.0%
  1827 ;;BITSFR22             0      0       0      23        0.0%
  1828 ;;SFR22                0      0       0      23        0.0%
  1829 ;;BITSFR23             0      0       0      24        0.0%
  1830 ;;SFR23                0      0       0      24        0.0%
  1831 ;;BITSFR24             0      0       0      25        0.0%
  1832 ;;SFR24                0      0       0      25        0.0%
  1833 ;;BITSFR25             0      0       0      26        0.0%
  1834 ;;SFR25                0      0       0      26        0.0%
  1835 ;;BITSFR26             0      0       0      27        0.0%
  1836 ;;SFR26                0      0       0      27        0.0%
  1837 ;;BITSFR27             0      0       0      28        0.0%
  1838 ;;SFR27                0      0       0      28        0.0%
  1839 ;;BITSFR28             0      0       0      29        0.0%
  1840 ;;SFR28                0      0       0      29        0.0%
  1841 ;;BITSFR29             0      0       0      30        0.0%
  1842 ;;SFR29                0      0       0      30        0.0%
  1843 ;;BITSFR30             0      0       0      31        0.0%
  1844 ;;SFR30                0      0       0      31        0.0%
  1845 ;;BITSFR31             0      0       0      32        0.0%
  1846 ;;SFR31                0      0       0      32        0.0%
  1847                           
  1848                           
  1849 ;; *************** function _main *****************
  1850 ;; Defined at:
  1851 ;;		line 19 in file "C:\CTK\CTK80A 150928\CTK80A_Jas\main.c"
  1852 ;; Parameters:    Size  Location     Type
  1853 ;;		None
  1854 ;; Auto vars:     Size  Location     Type
  1855 ;;		None
  1856 ;; Return value:  Size  Location     Type
  1857 ;;		None               void
  1858 ;; Registers used:
  1859 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1860 ;; Tracked objects:
  1861 ;;		On entry : 17F/0
  1862 ;;		On exit  : 1F/0
  1863 ;;		Unchanged: FFE00/0
  1864 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1865 ;;      Params:         0       0       0       0
  1866 ;;      Locals:         0       0       0       0
  1867 ;;      Temps:          0       0       0       0
  1868 ;;      Totals:         0       0       0       0
  1869 ;;Total ram usage:        0 bytes
  1870 ;; Hardware stack levels required when called:    6
  1871 ;; This function calls:
  1872 ;;		_system_state_init
  1873 ;;		_load_system_state
  1874 ;;		_lcd_init
  1875 ;;		_lcd_write_command
  1876 ;;		_lcd_print_line1
  1877 ;;		_lcd_print_line2
  1878 ;;		_KaiJi
  1879 ;;		_SelectMode
  1880 ;;		_LoadCurrentDealWith
  1881 ;;		_SwitchBatteryState
  1882 ;;		_LedDisplay
  1883 ;;		_SolarPanelDealWith
  1884 ;;		_PWMCharge
  1885 ;;		_lcd_move_char
  1886 ;; This function is called by:
  1887 ;;		Startup code after reset
  1888 ;; This function uses a non-reentrant model
  1889 ;;
  1890  0843                     _main:	
  1891                           
  1892                           ;main.c: 22: system_state_init();
  1893                           
  1894                           ; Regs used in _main: [wreg-status,0+pclath+cstack]
  1895  0843  24EC  3188         	fcall	_system_state_init
  1896                           
  1897                           ;main.c: 23: load_system_state();
  1898  0845  2583  3188         	fcall	_load_system_state
  1899                           
  1900                           ;main.c: 26: lcd_init();
  1901  0847  2034  3188         	fcall	_lcd_init
  1902                           
  1903                           ;main.c: 27: lcd_write_command(0x80);
  1904  0849  3080               	movlw	128
  1905  084A  21A0  3188         	fcall	_lcd_write_command
  1906                           
  1907                           ;main.c: 28: charPointer = welcome;
  1908  084C  30E6               	movlw	_welcome& (0+255)
  1909  084D  00B4               	movwf	_charPointer
  1910  084E  01B5               	clrf	_charPointer+1
  1911                           
  1912                           ;main.c: 29: lcd_print_line1(charPointer, 0, 0);
  1913  084F  0835               	movf	_charPointer+1,w
  1914  0850  2669  3188         	fcall	PL7	;call to abstracted procedure
  1915  0852  217C  3188         	fcall	_lcd_print_line1
  1916                           
  1917                           ;main.c: 30: charPointer = checking;
  1918  0854  30CF               	movlw	_checking& (0+255)
  1919  0855  00B4               	movwf	_charPointer
  1920  0856  01B5               	clrf	_charPointer+1
  1921                           
  1922                           ;main.c: 31: lcd_print_line2(charPointer, 0);
  1923  0857  0835               	movf	_charPointer+1,w
  1924  0858  00F8               	movwf	?_lcd_print_line2+1
  1925  0859  0834               	movf	_charPointer,w
  1926  085A  00F7               	movwf	?_lcd_print_line2
  1927  085B  01F9               	clrf	?_lcd_print_line2+2
  1928  085C  21AB  3188         	fcall	_lcd_print_line2
  1929                           
  1930                           ;main.c: 35: (LATC |= (1 << 4));
  1931  085E  0022               	movlb	2	; select bank2
  1932  085F  160E               	bsf	14,4	;volatile
  1933                           
  1934                           ;main.c: 37: KaiJi();
  1935  0860  21DD  3188         	fcall	_KaiJi
  1936  0862                     l5806:	
  1937  0862  0064               	clrwdt	;#
  1938                           
  1939                           ;main.c: 42: SelectMode();
  1940  0863  24A9  3188         	fcall	_SelectMode
  1941                           
  1942                           ;main.c: 43: SystemModeType = 0x01;
  1943  0865  01EF               	clrf	_SystemModeType
  1944  0866  0AEF               	incf	_SystemModeType,f
  1945                           
  1946                           ;main.c: 44: LoadCurrentDealWith();
  1947  0867  27BF  3188         	fcall	_LoadCurrentDealWith
  1948                           
  1949                           ;main.c: 45: SwitchBatteryState();
  1950  0869  2319  3188         	fcall	_SwitchBatteryState
  1951                           
  1952                           ;main.c: 46: LedDisplay();
  1953  086B  24D8  3188         	fcall	_LedDisplay
  1954                           
  1955                           ;main.c: 47: if(PVCount > 50)
  1956  086D  3033               	movlw	51
  1957  086E  0020               	movlb	0	; select bank0
  1958  086F  0242               	subwf	_PVCount,w
  1959  0870  1C03               	skipc
  1960  0871  2875               	goto	l5822
  1961                           
  1962                           ;main.c: 48: {
  1963                           ;main.c: 49: PVCount = 0;
  1964  0872  01C2               	clrf	_PVCount
  1965                           
  1966                           ;main.c: 50: SolarPanelDealWith();
  1967  0873  2233  3188         	fcall	_SolarPanelDealWith
  1968  0875                     l5822:	
  1969                           
  1970                           ;main.c: 51: }
  1971                           ;main.c: 52: if(PWMChargeFlag == 1)
  1972  0875  1CEC               	btfss	_PWMChargeFlag/(0+8),_PWMChargeFlag& (0+7)
  1973  0876  287B               	goto	l5828
  1974                           
  1975                           ;main.c: 53: {
  1976                           ;main.c: 54: PWMChargeFlag = 0;
  1977  0877  10EC               	bcf	_PWMChargeFlag/(0+8),_PWMChargeFlag& (0+7)
  1978                           
  1979                           ;main.c: 55: PWMCharge();
  1980  0878  3182  22E4  3188   	fcall	_PWMCharge
  1981  087B                     l5828:	
  1982                           
  1983                           ;main.c: 56: }
  1984                           ;main.c: 59: if (isNeedChange) {
  1985  087B  1E6C               	btfss	_isNeedChange/(0+8),_isNeedChange& (0+7)
  1986  087C  2953               	goto	l5932
  1987                           
  1988                           ;main.c: 60: isNeedChange = 0;
  1989  087D  126C               	bcf	_isNeedChange/(0+8),_isNeedChange& (0+7)
  1990                           
  1991                           ;main.c: 61: switch(lcd_state) {
  1992  087E  293A               	goto	l5930
  1993  087F                     l5832:	
  1994                           
  1995                           ;main.c: 64: charPointer = systemType1;
  1996  087F  30DB               	movlw	_systemType1& (0+255)
  1997  0880  00B4               	movwf	_charPointer
  1998  0881  01B5               	clrf	_charPointer+1
  1999                           
  2000                           ;main.c: 65: lcd_print_line1(charPointer, 0 ,1);
  2001  0882  0835               	movf	_charPointer+1,w
  2002  0883  2669  3188         	fcall	PL7	;call to abstracted procedure
  2003  0885  0AFA               	incf	?_lcd_print_line1+3,f
  2004  0886  217C  3188         	fcall	_lcd_print_line1
  2005                           
  2006                           ;main.c: 66: break;
  2007  0888  2953               	goto	l5932
  2008  0889                     l5836:	
  2009                           
  2010                           ;main.c: 68: charPointer = state1_1;
  2011  0889  3056               	movlw	low (_state1_1| (0+32768))
  2012  088A  00B4               	movwf	_charPointer
  2013  088B  3082               	movlw	high (_state1_1| (0+32768))
  2014                           
  2015                           ;main.c: 69: lcd_print_line1(charPointer, 0, 1);
  2016  088C  265C  3188         	fcall	PL5	;call to abstracted procedure
  2017  088E  217C  3188         	fcall	_lcd_print_line1
  2018                           
  2019                           ;main.c: 70: charPointer = state1_2;
  2020  0890  3066               	movlw	low (_state1_2| (0+32768))
  2021  0891  00B4               	movwf	_charPointer
  2022  0892  3082               	movlw	high (_state1_2| (0+32768))
  2023                           
  2024                           ;main.c: 71: lcd_print_line2(charPointer, 0);
  2025  0893  2680  3188         	fcall	PL10	;call to abstracted procedure
  2026  0895  21AB  3188         	fcall	_lcd_print_line2
  2027                           
  2028                           ;main.c: 72: break;
  2029  0897  2953               	goto	l5932
  2030  0898                     l5842:	
  2031                           
  2032                           ;main.c: 106: charPointer = state2_1;
  2033  0898  30B4               	movlw	low (_state2_1| (0+32768))
  2034  0899  00B4               	movwf	_charPointer
  2035  089A  3082               	movlw	high (_state2_1| (0+32768))
  2036                           
  2037                           ;main.c: 107: lcd_print_line1(charPointer, 0, 1);
  2038  089B  265C  3188         	fcall	PL5	;call to abstracted procedure
  2039  089D  217C  3188         	fcall	_lcd_print_line1
  2040                           
  2041                           ;main.c: 108: charPointer = batteryStatePointer[batteryType];
  2042  089F  0844               	movf	_batteryType,w
  2043  08A0  3EA0               	addlw	_batteryStatePointer& (0+255)
  2044  08A1  0086               	movwf	6
  2045  08A2  0187               	clrf	7
  2046  08A3  0801               	movf	1,w
  2047  08A4  00B4               	movwf	_charPointer
  2048  08A5  3082               	movlw	(high __stringtab)| (0+128)
  2049                           
  2050                           ;main.c: 109: lcd_print_line2(charPointer, 0);
  2051  08A6  2680  3188         	fcall	PL10	;call to abstracted procedure
  2052  08A8  21AB  3188         	fcall	_lcd_print_line2
  2053                           
  2054                           ;main.c: 110: if (isSettingMode) {
  2055  08AA  1F6C               	btfss	_isSettingMode/(0+8),_isSettingMode& (0+7)
  2056  08AB  2953               	goto	l5932
  2057                           
  2058                           ;main.c: 111: if (is_second_setting) {
  2059  08AC  1FEC               	btfss	_is_second_setting/(0+8),_is_second_setting& (0+7)
  2060  08AD  28B2               	goto	l5856
  2061                           
  2062                           ;main.c: 112: lcd_move_char(0x40);
  2063  08AE  3040               	movlw	64
  2064  08AF  216B  3188         	fcall	_lcd_move_char
  2065                           
  2066                           ;main.c: 113: } else {
  2067  08B1  2953               	goto	l5932
  2068  08B2                     l5856:	
  2069                           
  2070                           ;main.c: 115: lcd_move_char(0x20);
  2071  08B2  3020               	movlw	32
  2072  08B3  216B  3188         	fcall	_lcd_move_char
  2073  08B5  2953               	goto	l5932
  2074  08B6                     l5858:	
  2075                           
  2076                           ;main.c: 120: charPointer = state3_1;
  2077  08B6  3001               	movlw	low (_state3_1| (0+32768))
  2078  08B7  00B4               	movwf	_charPointer
  2079  08B8  3082               	movlw	high (_state3_1| (0+32768))
  2080                           
  2081                           ;main.c: 121: lcd_print_line1(charPointer, 0, 1);
  2082  08B9  265C  3188         	fcall	PL5	;call to abstracted procedure
  2083  08BB  217C  3188         	fcall	_lcd_print_line1
  2084                           
  2085                           ;main.c: 122: charPointer = state3_2;
  2086  08BD  3012               	movlw	low (_state3_2| (0+32768))
  2087  08BE  00B4               	movwf	_charPointer
  2088  08BF  3082               	movlw	high (_state3_2| (0+32768))
  2089                           
  2090                           ;main.c: 123: lcd_print_line2(charPointer, 0);
  2091  08C0  2680  3188         	fcall	PL10	;call to abstracted procedure
  2092  08C2  21AB  3188         	fcall	_lcd_print_line2
  2093                           
  2094                           ;main.c: 124: if (isSettingMode) {
  2095  08C4  1F6C               	btfss	_isSettingMode/(0+8),_isSettingMode& (0+7)
  2096  08C5  2953               	goto	l5932
  2097                           
  2098                           ;main.c: 125: if (is_second_setting) {
  2099  08C6  1FEC               	btfss	_is_second_setting/(0+8),_is_second_setting& (0+7)
  2100  08C7  28CC               	goto	l5870
  2101                           
  2102                           ;main.c: 126: lcd_move_char(0xe + 0x40);
  2103  08C8  304E               	movlw	78
  2104  08C9  216B  3188         	fcall	_lcd_move_char
  2105                           
  2106                           ;main.c: 127: } else {
  2107  08CB  2953               	goto	l5932
  2108  08CC                     l5870:	
  2109                           
  2110                           ;main.c: 128: lcd_move_char(0xe);
  2111  08CC  300E               	movlw	14
  2112  08CD  216B  3188         	fcall	_lcd_move_char
  2113  08CF  2953               	goto	l5932
  2114  08D0                     l5872:	
  2115                           
  2116                           ;main.c: 133: charPointer = state4_1;
  2117  08D0  3023               	movlw	low (_state4_1| (0+32768))
  2118  08D1  00B4               	movwf	_charPointer
  2119  08D2  3082               	movlw	high (_state4_1| (0+32768))
  2120                           
  2121                           ;main.c: 134: lcd_print_line1(charPointer, 0, 1);
  2122  08D3  265C  3188         	fcall	PL5	;call to abstracted procedure
  2123  08D5  217C  3188         	fcall	_lcd_print_line1
  2124                           
  2125                           ;main.c: 135: charPointer = batteryStatePointer[1];
  2126  08D7  0021               	movlb	1	; select bank1
  2127  08D8  0821               	movf	(_batteryStatePointer+1)^(0+128),w
  2128  08D9  0020               	movlb	0	; select bank0
  2129  08DA  00B4               	movwf	_charPointer
  2130  08DB  3082               	movlw	(high __stringtab)| (0+128)
  2131                           
  2132                           ;main.c: 136: lcd_print_line2(charPointer, 0);
  2133  08DC  2680  3188         	fcall	PL10	;call to abstracted procedure
  2134  08DE  21AB  3188         	fcall	_lcd_print_line2
  2135                           
  2136                           ;main.c: 137: if (isSettingMode) {
  2137  08E0  1F6C               	btfss	_isSettingMode/(0+8),_isSettingMode& (0+7)
  2138  08E1  2953               	goto	l5932
  2139                           
  2140                           ;main.c: 138: if (is_second_setting) {
  2141  08E2  1FEC               	btfss	_is_second_setting/(0+8),_is_second_setting& (0+7)
  2142  08E3  28E8               	goto	l5884
  2143                           
  2144                           ;main.c: 139: lcd_move_char(0xC + 0x40);
  2145  08E4  304C               	movlw	76
  2146  08E5  216B  3188         	fcall	_lcd_move_char
  2147                           
  2148                           ;main.c: 140: } else {
  2149  08E7  2953               	goto	l5932
  2150  08E8                     l5884:	
  2151                           
  2152                           ;main.c: 141: lcd_move_char(0xe);
  2153  08E8  300E               	movlw	14
  2154  08E9  216B  3188         	fcall	_lcd_move_char
  2155  08EB  2953               	goto	l5932
  2156  08EC                     l5886:	
  2157                           
  2158                           ;main.c: 146: charPointer = state5_1;
  2159  08EC  3034               	movlw	low (_state5_1| (0+32768))
  2160  08ED  00B4               	movwf	_charPointer
  2161  08EE  3082               	movlw	high (_state5_1| (0+32768))
  2162                           
  2163                           ;main.c: 147: lcd_print_line1(charPointer, 0, 1);
  2164  08EF  265C  3188         	fcall	PL5	;call to abstracted procedure
  2165  08F1  217C  3188         	fcall	_lcd_print_line1
  2166                           
  2167                           ;main.c: 148: charPointer = state5_2;
  2168  08F3  3076               	movlw	low (_state5_2| (0+32768))
  2169  08F4  00B4               	movwf	_charPointer
  2170  08F5  3082               	movlw	high (_state5_2| (0+32768))
  2171                           
  2172                           ;main.c: 149: lcd_print_line2(charPointer, 0);
  2173  08F6  2680  3188         	fcall	PL10	;call to abstracted procedure
  2174  08F8  21AB  3188         	fcall	_lcd_print_line2
  2175                           
  2176                           ;main.c: 150: if (isSettingMode) {
  2177  08FA  1F6C               	btfss	_isSettingMode/(0+8),_isSettingMode& (0+7)
  2178  08FB  2953               	goto	l5932
  2179                           
  2180                           ;main.c: 151: if (is_second_setting) {
  2181  08FC  1FEC               	btfss	_is_second_setting/(0+8),_is_second_setting& (0+7)
  2182  08FD  2902               	goto	l5898
  2183                           
  2184                           ;main.c: 152: lcd_move_char(0xd + 0x40);
  2185  08FE  304D               	movlw	77
  2186  08FF  216B  3188         	fcall	_lcd_move_char
  2187                           
  2188                           ;main.c: 153: } else {
  2189  0901  2953               	goto	l5932
  2190  0902                     l5898:	
  2191                           
  2192                           ;main.c: 154: lcd_move_char(0xe);
  2193  0902  300E               	movlw	14
  2194  0903  216B  3188         	fcall	_lcd_move_char
  2195  0905  2953               	goto	l5932
  2196  0906                     l5900:	
  2197                           
  2198                           ;main.c: 159: charPointer = state6_1;
  2199  0906  3086               	movlw	low (_state6_1| (0+32768))
  2200  0907  00B4               	movwf	_charPointer
  2201  0908  3082               	movlw	high (_state6_1| (0+32768))
  2202                           
  2203                           ;main.c: 160: lcd_print_line1(charPointer, 0, 1);
  2204  0909  265C  3188         	fcall	PL5	;call to abstracted procedure
  2205  090B  217C  3188         	fcall	_lcd_print_line1
  2206                           
  2207                           ;main.c: 161: charPointer = state6_2;
  2208  090D  3096               	movlw	low (_state6_2| (0+32768))
  2209  090E  00B4               	movwf	_charPointer
  2210  090F  3082               	movlw	high (_state6_2| (0+32768))
  2211                           
  2212                           ;main.c: 162: lcd_print_line2(charPointer, 0);
  2213  0910  2680  3188         	fcall	PL10	;call to abstracted procedure
  2214  0912  21AB  3188         	fcall	_lcd_print_line2
  2215                           
  2216                           ;main.c: 163: if (isSettingMode) {
  2217  0914  1F6C               	btfss	_isSettingMode/(0+8),_isSettingMode& (0+7)
  2218  0915  2953               	goto	l5932
  2219                           
  2220                           ;main.c: 164: if (is_second_setting) {
  2221  0916  1FEC               	btfss	_is_second_setting/(0+8),_is_second_setting& (0+7)
  2222  0917  291C               	goto	l5912
  2223                           
  2224                           ;main.c: 165: lcd_move_char(0xc + 0x40);
  2225  0918  304C               	movlw	76
  2226  0919  216B  3188         	fcall	_lcd_move_char
  2227                           
  2228                           ;main.c: 166: } else {
  2229  091B  2953               	goto	l5932
  2230  091C                     l5912:	
  2231                           
  2232                           ;main.c: 167: lcd_move_char(0xd);
  2233  091C  300D               	movlw	13
  2234  091D  216B  3188         	fcall	_lcd_move_char
  2235  091F  2953               	goto	l5932
  2236  0920                     l5914:	
  2237                           
  2238                           ;main.c: 172: charPointer = state7_1;
  2239  0920  30A5               	movlw	low (_state7_1| (0+32768))
  2240  0921  00B4               	movwf	_charPointer
  2241  0922  3082               	movlw	high (_state7_1| (0+32768))
  2242                           
  2243                           ;main.c: 173: lcd_print_line1(charPointer, 0, 1);
  2244  0923  265C  3188         	fcall	PL5	;call to abstracted procedure
  2245  0925  217C  3188         	fcall	_lcd_print_line1
  2246                           
  2247                           ;main.c: 174: charPointer = state7_2;
  2248  0927  3045               	movlw	low (_state7_2| (0+32768))
  2249  0928  00B4               	movwf	_charPointer
  2250  0929  3082               	movlw	high (_state7_2| (0+32768))
  2251                           
  2252                           ;main.c: 175: lcd_print_line2(charPointer, 0);
  2253  092A  2680  3188         	fcall	PL10	;call to abstracted procedure
  2254  092C  21AB  3188         	fcall	_lcd_print_line2
  2255                           
  2256                           ;main.c: 176: if (isSettingMode) {
  2257  092E  1F6C               	btfss	_isSettingMode/(0+8),_isSettingMode& (0+7)
  2258  092F  2953               	goto	l5932
  2259                           
  2260                           ;main.c: 177: if (is_second_setting) {
  2261  0930  1FEC               	btfss	_is_second_setting/(0+8),_is_second_setting& (0+7)
  2262  0931  2936               	goto	l5926
  2263                           
  2264                           ;main.c: 178: lcd_move_char(0xe + 0x40);
  2265  0932  304E               	movlw	78
  2266  0933  216B  3188         	fcall	_lcd_move_char
  2267                           
  2268                           ;main.c: 179: } else {
  2269  0935  2953               	goto	l5932
  2270  0936                     l5926:	
  2271                           
  2272                           ;main.c: 180: lcd_move_char(0xc);
  2273  0936  300C               	movlw	12
  2274  0937  216B  3188         	fcall	_lcd_move_char
  2275  0939  2953               	goto	l5932
  2276  093A                     l5930:	
  2277  093A  0847               	movf	_lcd_state,w
  2278                           
  2279                           ; Switch size 1, requested type "space"
  2280                           ; Number of cases is 8, Range of values is 1 to 8
  2281                           ; switch strategies available:
  2282                           ; Name         Bytes Cycles
  2283                           ; simple_byte    25    13 (average)
  2284                           ; direct_byte    35    19 (fixed)
  2285                           ;	Chosen strategy is simple_byte
  2286  093B  3A01               	xorlw	1	; case 1
  2287  093C  1903               	skipnz
  2288  093D  287F               	goto	l5832
  2289  093E  3A03               	xorlw	3	; case 2
  2290  093F  1903               	skipnz
  2291  0940  2889               	goto	l5836
  2292  0941  3A01               	xorlw	1	; case 3
  2293  0942  1903               	skipnz
  2294  0943  2898               	goto	l5842
  2295  0944  3A07               	xorlw	7	; case 4
  2296  0945  1903               	skipnz
  2297  0946  28B6               	goto	l5858
  2298  0947  3A01               	xorlw	1	; case 5
  2299  0948  1903               	skipnz
  2300  0949  28D0               	goto	l5872
  2301  094A  3A03               	xorlw	3	; case 6
  2302  094B  1903               	skipnz
  2303  094C  28EC               	goto	l5886
  2304  094D  3A01               	xorlw	1	; case 7
  2305  094E  1903               	skipnz
  2306  094F  2906               	goto	l5900
  2307  0950  3A0F               	xorlw	15	; case 8
  2308  0951  1903               	skipnz
  2309  0952  2920               	goto	l5914
  2310  0953                     l5932:	
  2311                           
  2312                           ;main.c: 188: }
  2313                           ;main.c: 190: if (lcd_extinguwish_timer == 70) {
  2314  0953  0846               	movf	_lcd_extinguwish_timer,w
  2315  0954  3A46               	xorlw	70
  2316  0955  1D03               	skipz
  2317  0956  295B               	goto	l5938
  2318                           
  2319                           ;main.c: 192: lcd_extinguwish_timer++;
  2320  0957  0AC6               	incf	_lcd_extinguwish_timer,f
  2321                           
  2322                           ;main.c: 194: lcd_write_command(0x08);
  2323  0958  3008               	movlw	8
  2324  0959  21A0  3188         	fcall	_lcd_write_command
  2325  095B                     l5938:	
  2326                           
  2327                           ;main.c: 195: }
  2328                           ;main.c: 197: if (isSaveSettings) {
  2329  095B  1EEC               	btfss	_isSaveSettings/(0+8),_isSaveSettings& (0+7)
  2330  095C  2962               	goto	l5946
  2331                           
  2332                           ;main.c: 198: isSaveSettings = 0;
  2333  095D  12EC               	bcf	_isSaveSettings/(0+8),_isSaveSettings& (0+7)
  2334                           
  2335                           ;main.c: 199: isNeedChange = 1;
  2336  095E  166C               	bsf	_isNeedChange/(0+8),_isNeedChange& (0+7)
  2337                           
  2338                           ;main.c: 200: lcd_state = 2;
  2339  095F  3002               	movlw	2
  2340  0960  00C7               	movwf	_lcd_state
  2341                           
  2342                           ;main.c: 201: isSettingMode = 0;
  2343  0961  136C               	bcf	_isSettingMode/(0+8),_isSettingMode& (0+7)
  2344  0962                     l5946:	
  2345                           
  2346                           ;main.c: 203: }
  2347                           ;main.c: 205: if (isSettingMode && needInitSetting) {
  2348  0962  1B6C               	btfsc	_isSettingMode/(0+8),_isSettingMode& (0+7)
  2349  0963  1C6D               	btfss	_needInitSetting/(0+8),_needInitSetting& (0+7)
  2350  0964  2862               	goto	l5806
  2351                           
  2352                           ;main.c: 206: needInitSetting = 0;
  2353  0965  106D               	bcf	_needInitSetting/(0+8),_needInitSetting& (0+7)
  2354                           
  2355                           ;main.c: 207: isNeedChange = 1;
  2356  0966  166C               	bsf	_isNeedChange/(0+8),_isNeedChange& (0+7)
  2357                           
  2358                           ;main.c: 208: lcd_state = 3;
  2359  0967  3003               	movlw	3
  2360  0968  00C7               	movwf	_lcd_state
  2361                           
  2362                           ;main.c: 209: is_second_setting = 0;
  2363  0969  13EC               	bcf	_is_second_setting/(0+8),_is_second_setting& (0+7)
  2364  096A  2862               	goto	l5806
  2365  096B                     __end_of_main:	
  2366  096B                     __ptext597:	
  2367 ;; =============== function _lcd_init ends ============
  2368                           
  2369                           
  2370 ;; *************** function _lcd_move_char *****************
  2371 ;; Defined at:
  2372 ;;		line 146 in file "C:\CTK\CTK80A 150928\CTK80A_Jas\LM016.h"
  2373 ;; Parameters:    Size  Location     Type
  2374 ;;  postion         1    wreg     unsigned char 
  2375 ;; Auto vars:     Size  Location     Type
  2376 ;;  postion         1    7[COMMON] unsigned char 
  2377 ;;  i               1    8[COMMON] unsigned char 
  2378 ;; Return value:  Size  Location     Type
  2379 ;;		None               void
  2380 ;; Registers used:
  2381 ;;		wreg, status,2, status,0, pclath, cstack
  2382 ;; Tracked objects:
  2383 ;;		On entry : 1F/0
  2384 ;;		On exit  : 1F/0
  2385 ;;		Unchanged: FFFE0/0
  2386 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2387 ;;      Params:         0       0       0       0
  2388 ;;      Locals:         2       0       0       0
  2389 ;;      Temps:          0       0       0       0
  2390 ;;      Totals:         2       0       0       0
  2391 ;;Total ram usage:        2 bytes
  2392 ;; Hardware stack levels used:    1
  2393 ;; Hardware stack levels required when called:    3
  2394 ;; This function calls:
  2395 ;;		_lcd_write_command
  2396 ;; This function is called by:
  2397 ;;		_SwitchBatteryState
  2398 ;;		_main
  2399 ;; This function uses a non-reentrant model
  2400 ;;
  2401  096B                     _lcd_move_char:	
  2402                           
  2403                           ; Regs used in _lcd_move_char: [wreg+status,2+status,0+pclath+cstack]
  2404                           ;lcd_move_char@postion stored from wreg
  2405  096B  00F7               	movwf	lcd_move_char@postion
  2406                           
  2407                           ;LM016.h: 147: unsigned char i = 0;
  2408  096C  01F8               	clrf	lcd_move_char@i
  2409                           
  2410                           ;LM016.h: 148: lcd_write_command(0x0f);
  2411  096D  300F               	movlw	15
  2412  096E  21A0  3188         	fcall	_lcd_write_command
  2413                           
  2414                           ;LM016.h: 149: lcd_write_command(0x02);
  2415  0970  3002               	movlw	2
  2416  0971  21A0  3188         	fcall	_lcd_write_command
  2417  0973                     l5268:	
  2418                           ;LM016.h: 150: while(i < postion) {
  2419                           
  2420  0973  0877               	movf	lcd_move_char@postion,w
  2421  0974  0278               	subwf	lcd_move_char@i,w
  2422  0975  1803               	btfsc	3,0
  2423  0976  0008               	return
  2424                           
  2425                           ;LM016.h: 151: lcd_write_command(0x14);
  2426  0977  3014               	movlw	20
  2427  0978  21A0  3188         	fcall	_lcd_write_command
  2428                           
  2429                           ;LM016.h: 152: i++;
  2430  097A  0AF8               	incf	lcd_move_char@i,f
  2431  097B  2973               	goto	l5268
  2432  097C                     __end_of_lcd_move_char:	
  2433  097C                     __ptext595:	
  2434 ;; =============== function _lcd_print_line2 ends ============
  2435                           
  2436                           
  2437 ;; *************** function _lcd_print_line1 *****************
  2438 ;; Defined at:
  2439 ;;		line 122 in file "C:\CTK\CTK80A 150928\CTK80A_Jas\LM016.h"
  2440 ;; Parameters:    Size  Location     Type
  2441 ;;  charPointer     2    7[COMMON] PTR const unsigned char 
  2442 ;;		 -> ROM(4096), state7_2(17), state7_1(15), state6_2(15), 
  2443 ;;		 -> state6_1(16), state5_2(16), state5_1(17), state4_1(17), 
  2444 ;;		 -> state3_2(17), state3_1(17), state2_1(13), state1_2(16), 
  2445 ;;		 -> state1_1(16), systemType1(11), checking(12), welcome(8), 
  2446 ;;		 -> state2_4(13), state2_3(10), state2_2(12), 
  2447 ;;  postion         1    9[COMMON] unsigned char 
  2448 ;;  clear           1   10[COMMON] unsigned char 
  2449 ;; Auto vars:     Size  Location     Type
  2450 ;;		None
  2451 ;; Return value:  Size  Location     Type
  2452 ;;		None               void
  2453 ;; Registers used:
  2454 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2455 ;; Tracked objects:
  2456 ;;		On entry : 1F/0
  2457 ;;		On exit  : 1F/0
  2458 ;;		Unchanged: FFFE0/0
  2459 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2460 ;;      Params:         4       0       0       0
  2461 ;;      Locals:         0       0       0       0
  2462 ;;      Temps:          0       0       0       0
  2463 ;;      Totals:         4       0       0       0
  2464 ;;Total ram usage:        4 bytes
  2465 ;; Hardware stack levels used:    1
  2466 ;; Hardware stack levels required when called:    3
  2467 ;; This function calls:
  2468 ;;		_lcd_write_command
  2469 ;;		_delay
  2470 ;;		_lcd_write_data
  2471 ;; This function is called by:
  2472 ;;		_main
  2473 ;; This function uses a non-reentrant model
  2474 ;;
  2475  097C                     _lcd_print_line1:	
  2476                           
  2477                           ;LM016.h: 123: if (clear) {
  2478                           
  2479                           ; Regs used in _lcd_print_line1: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2480  097C  087A               	movf	lcd_print_line1@clear,w
  2481  097D  1903               	btfsc	3,2
  2482  097E  2986               	goto	l2511
  2483                           
  2484                           ;LM016.h: 124: lcd_write_command(0x01);
  2485  097F  3001               	movlw	1
  2486  0980  21A0  3188         	fcall	_lcd_write_command
  2487                           
  2488                           ;LM016.h: 125: delay(1000);
  2489  0982  26BD  3188         	fcall	PL21	;call to abstracted procedure
  2490  0984  21C5  3188         	fcall	_delay
  2491  0986                     l2511:	
  2492                           
  2493                           ;LM016.h: 126: }
  2494                           ;LM016.h: 127: lcd_write_command(0x0c);
  2495  0986  300C               	movlw	12
  2496  0987  21A0  3188         	fcall	_lcd_write_command
  2497                           
  2498                           ;LM016.h: 128: lcd_write_command(0x80 + postion);
  2499  0989  0879               	movf	lcd_print_line1@postion,w
  2500  098A  3E80               	addlw	128
  2501  098B  21A0  3188         	fcall	_lcd_write_command
  2502  098D                     l5280:	
  2503                           ;LM016.h: 129: while(*charPointer != '\0') {
  2504                           
  2505  098D  0877               	movf	lcd_print_line1@charPointer,w
  2506  098E  0084               	movwf	4
  2507  098F  0878               	movf	lcd_print_line1@charPointer+1,w
  2508  0990  0085               	movwf	5
  2509  0991  0800               	movf	0,w	;code access
  2510  0992  3800               	iorlw	0
  2511  0993  1903               	btfsc	3,2
  2512  0994  0008               	return
  2513                           
  2514                           ;LM016.h: 130: lcd_write_data(*charPointer);
  2515  0995  0877               	movf	lcd_print_line1@charPointer,w
  2516  0996  0084               	movwf	4
  2517  0997  0878               	movf	lcd_print_line1@charPointer+1,w
  2518  0998  0085               	movwf	5
  2519  0999  0800               	movf	0,w	;code access
  2520  099A  249E  3188         	fcall	_lcd_write_data
  2521                           
  2522                           ;LM016.h: 131: charPointer++;
  2523  099C  0AF7               	incf	lcd_print_line1@charPointer,f
  2524  099D  1903               	skipnz
  2525  099E  0AF8               	incf	lcd_print_line1@charPointer+1,f
  2526  099F  298D               	goto	l5280
  2527  09A0                     __end_of_lcd_print_line1:	
  2528  09A0                     __ptext602:	
  2529 ;; =============== function ___ftdiv ends ============
  2530                           
  2531                           
  2532 ;; *************** function _lcd_write_command *****************
  2533 ;; Defined at:
  2534 ;;		line 82 in file "C:\CTK\CTK80A 150928\CTK80A_Jas\LM016.h"
  2535 ;; Parameters:    Size  Location     Type
  2536 ;;  command         1    wreg     unsigned char 
  2537 ;; Auto vars:     Size  Location     Type
  2538 ;;  command         1    6[COMMON] unsigned char 
  2539 ;; Return value:  Size  Location     Type
  2540 ;;		None               void
  2541 ;; Registers used:
  2542 ;;		wreg, status,2, status,0, pclath, cstack
  2543 ;; Tracked objects:
  2544 ;;		On entry : 1F/0
  2545 ;;		On exit  : 1F/0
  2546 ;;		Unchanged: FFFE0/0
  2547 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2548 ;;      Params:         0       0       0       0
  2549 ;;      Locals:         1       0       0       0
  2550 ;;      Temps:          0       0       0       0
  2551 ;;      Totals:         1       0       0       0
  2552 ;;Total ram usage:        1 bytes
  2553 ;; Hardware stack levels used:    1
  2554 ;; Hardware stack levels required when called:    2
  2555 ;; This function calls:
  2556 ;;		_delay
  2557 ;; This function is called by:
  2558 ;;		_lcd_init
  2559 ;;		_lcd_print_line1
  2560 ;;		_lcd_print_line2
  2561 ;;		_lcd_move_char
  2562 ;;		_main
  2563 ;; This function uses a non-reentrant model
  2564 ;;
  2565  09A0                     _lcd_write_command:	
  2566                           
  2567                           ; Regs used in _lcd_write_command: [wreg+status,2+status,0+pclath+cstack]
  2568                           ;lcd_write_command@command stored from wreg
  2569  09A0  00F6               	movwf	lcd_write_command@command
  2570                           
  2571                           ;LM016.h: 83: RC1 = 0;
  2572  09A1  108E               	bcf	14,1
  2573                           
  2574                           ;LM016.h: 84: RC2 = 0;
  2575  09A2  110E               	bcf	14,2
  2576                           
  2577                           ;LM016.h: 85: PORTD = command;
  2578  09A3  008F               	movwf	15	;volatile
  2579                           
  2580                           ;LM016.h: 89: delay(50);
  2581  09A4  3032               	movlw	50
  2582  09A5  00F0               	movwf	?_delay
  2583  09A6  01F1               	clrf	?_delay+1
  2584  09A7  21C5               	fcall	_delay
  2585                           
  2586                           ;LM016.h: 90: RC3 = 1;
  2587  09A8  158E               	bsf	14,3
  2588                           
  2589                           ;LM016.h: 91: RC3 = 0;
  2590  09A9  118E               	bcf	14,3
  2591  09AA  0008               	return
  2592  09AB                     __end_of_lcd_write_command:	
  2593  09AB                     __ptext594:	
  2594 ;; =============== function _load_system_state ends ============
  2595                           
  2596                           
  2597 ;; *************** function _lcd_print_line2 *****************
  2598 ;; Defined at:
  2599 ;;		line 136 in file "C:\CTK\CTK80A 150928\CTK80A_Jas\LM016.h"
  2600 ;; Parameters:    Size  Location     Type
  2601 ;;  charPointer     2    7[COMMON] PTR const unsigned char 
  2602 ;;		 -> ROM(4096), state7_2(17), state7_1(15), state6_2(15), 
  2603 ;;		 -> state6_1(16), state5_2(16), state5_1(17), state4_1(17), 
  2604 ;;		 -> state3_2(17), state3_1(17), state2_1(13), state1_2(16), 
  2605 ;;		 -> state1_1(16), systemType1(11), checking(12), welcome(8), 
  2606 ;;		 -> state2_4(13), state2_3(10), state2_2(12), 
  2607 ;;  postion         1    9[COMMON] unsigned char 
  2608 ;; Auto vars:     Size  Location     Type
  2609 ;;		None
  2610 ;; Return value:  Size  Location     Type
  2611 ;;		None               void
  2612 ;; Registers used:
  2613 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2614 ;; Tracked objects:
  2615 ;;		On entry : 1F/0
  2616 ;;		On exit  : 1F/0
  2617 ;;		Unchanged: FFFE0/0
  2618 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2619 ;;      Params:         3       0       0       0
  2620 ;;      Locals:         0       0       0       0
  2621 ;;      Temps:          0       0       0       0
  2622 ;;      Totals:         3       0       0       0
  2623 ;;Total ram usage:        3 bytes
  2624 ;; Hardware stack levels used:    1
  2625 ;; Hardware stack levels required when called:    3
  2626 ;; This function calls:
  2627 ;;		_lcd_write_command
  2628 ;;		_lcd_write_data
  2629 ;; This function is called by:
  2630 ;;		_main
  2631 ;; This function uses a non-reentrant model
  2632 ;;
  2633  09AB                     _lcd_print_line2:	
  2634                           
  2635                           ;LM016.h: 137: lcd_write_command(0xc0 + postion);
  2636                           
  2637                           ; Regs used in _lcd_print_line2: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2638  09AB  0879               	movf	lcd_print_line2@postion,w
  2639  09AC  3EC0               	addlw	192
  2640  09AD  21A0  3188         	fcall	_lcd_write_command
  2641                           
  2642                           ;LM016.h: 138: lcd_write_command(0x0c);
  2643  09AF  300C               	movlw	12
  2644  09B0  21A0  3188         	fcall	_lcd_write_command
  2645  09B2                     l5288:	
  2646                           ;LM016.h: 139: while(*charPointer != '\0') {
  2647                           
  2648  09B2  0877               	movf	lcd_print_line2@charPointer,w
  2649  09B3  0084               	movwf	4
  2650  09B4  0878               	movf	lcd_print_line2@charPointer+1,w
  2651  09B5  0085               	movwf	5
  2652  09B6  0800               	movf	0,w	;code access
  2653  09B7  3800               	iorlw	0
  2654  09B8  1903               	btfsc	3,2
  2655  09B9  0008               	return
  2656                           
  2657                           ;LM016.h: 140: lcd_write_data(*charPointer);
  2658  09BA  0877               	movf	lcd_print_line2@charPointer,w
  2659  09BB  0084               	movwf	4
  2660  09BC  0878               	movf	lcd_print_line2@charPointer+1,w
  2661  09BD  0085               	movwf	5
  2662  09BE  0800               	movf	0,w	;code access
  2663  09BF  249E  3188         	fcall	_lcd_write_data
  2664                           
  2665                           ;LM016.h: 141: charPointer++;
  2666  09C1  0AF7               	incf	lcd_print_line2@charPointer,f
  2667  09C2  1903               	skipnz
  2668  09C3  0AF8               	incf	lcd_print_line2@charPointer+1,f
  2669  09C4  29B2               	goto	l5288
  2670  09C5                     __end_of_lcd_print_line2:	
  2671  09C5                     __ptext614:	
  2672 ;; =============== function _Delay ends ============
  2673                           
  2674                           
  2675 ;; *************** function _delay *****************
  2676 ;; Defined at:
  2677 ;;		line 191 in file "C:\CTK\CTK80A 150928\CTK80A_Jas\mypic.h"
  2678 ;; Parameters:    Size  Location     Type
  2679 ;;  x               2    0[COMMON] unsigned int 
  2680 ;; Auto vars:     Size  Location     Type
  2681 ;;  b               2    4[COMMON] unsigned int 
  2682 ;;  a               2    2[COMMON] unsigned int 
  2683 ;; Return value:  Size  Location     Type
  2684 ;;		None               void
  2685 ;; Registers used:
  2686 ;;		wreg, status,2, status,0
  2687 ;; Tracked objects:
  2688 ;;		On entry : 1F/0
  2689 ;;		On exit  : 1F/0
  2690 ;;		Unchanged: FFFE0/0
  2691 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2692 ;;      Params:         2       0       0       0
  2693 ;;      Locals:         4       0       0       0
  2694 ;;      Temps:          0       0       0       0
  2695 ;;      Totals:         6       0       0       0
  2696 ;;Total ram usage:        6 bytes
  2697 ;; Hardware stack levels used:    1
  2698 ;; Hardware stack levels required when called:    1
  2699 ;; This function calls:
  2700 ;;		Nothing
  2701 ;; This function is called by:
  2702 ;;		_lcd_init
  2703 ;;		_lcd_write_command
  2704 ;;		_lcd_write_data
  2705 ;;		_lcd_print_line1
  2706 ;; This function uses a non-reentrant model
  2707 ;;
  2708  09C5                     _delay:	
  2709  09C5                     l4640:	
  2710                           ; Regs used in _delay: [wreg+status,2+status,0]
  2711                           
  2712                           
  2713                           ;mypic.h: 192: unsigned int a,b;
  2714                           ;mypic.h: 193: for(a=x;a>0;a--)
  2715  09C5  0871               	movf	delay@x+1,w
  2716  09C6  00F3               	movwf	delay@a+1
  2717  09C7  0870               	movf	delay@x,w
  2718  09C8  00F2               	movwf	delay@a
  2719  09C9                     l4642:	
  2720  09C9  0873               	movf	delay@a+1,w
  2721  09CA  0472               	iorwf	delay@a,w
  2722  09CB  1903               	btfsc	3,2
  2723  09CC  0008               	return
  2724                           
  2725                           ;mypic.h: 194: for(b=10;b>0;b--);
  2726  09CD  300A               	movlw	10
  2727  09CE  00F4               	movwf	delay@b
  2728  09CF  01F5               	clrf	delay@b+1
  2729  09D0  3001               	movlw	1
  2730  09D1                     L9:	
  2731  09D1  02F4               	subwf	delay@b,f
  2732  09D2  3000               	movlw	0
  2733  09D3  3BF5               	subwfb	delay@b+1,f
  2734  09D4  0875               	movf	delay@b+1,w
  2735  09D5  0474               	iorwf	delay@b,w
  2736  09D6  3001               	movlw	1
  2737  09D7  1D03               	skipz
  2738  09D8  29D1               	goto	L9
  2739  09D9  02F2               	subwf	delay@a,f
  2740  09DA  3000               	movlw	0
  2741  09DB  3BF3               	subwfb	delay@a+1,f
  2742  09DC  29C9               	goto	l4642
  2743  09DD                     __end_of_delay:	
  2744  09DD                     __ptext585:	
  2745 ;; =============== function _main ends ============
  2746                           
  2747                           
  2748 ;; *************** function _KaiJi *****************
  2749 ;; Defined at:
  2750 ;;		line 998 in file "C:\CTK\CTK80A 150928\CTK80A_Jas\mypic.h"
  2751 ;; Parameters:    Size  Location     Type
  2752 ;;		None
  2753 ;; Auto vars:     Size  Location     Type
  2754 ;;		None
  2755 ;; Return value:  Size  Location     Type
  2756 ;;		None               void
  2757 ;; Registers used:
  2758 ;;		wreg, status,2, status,0, pclath, cstack
  2759 ;; Tracked objects:
  2760 ;;		On entry : 17F/2
  2761 ;;		On exit  : 17F/0
  2762 ;;		Unchanged: FFE80/0
  2763 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2764 ;;      Params:         0       0       0       0
  2765 ;;      Locals:         0       0       0       0
  2766 ;;      Temps:          0       2       0       0
  2767 ;;      Totals:         0       2       0       0
  2768 ;;Total ram usage:        2 bytes
  2769 ;; Hardware stack levels used:    1
  2770 ;; Hardware stack levels required when called:    5
  2771 ;; This function calls:
  2772 ;;		_GetBatteryVoltage
  2773 ;;		_GetSolarPanelVoltage
  2774 ;;		___wmul
  2775 ;;		_GetLoadCurrentVoltage
  2776 ;; This function is called by:
  2777 ;;		_main
  2778 ;; This function uses a non-reentrant model
  2779 ;;
  2780  09DD                     _KaiJi:	
  2781                           
  2782                           ;mypic.h: 1002: gBatteryVoltage = GetBatteryVoltage();
  2783                           
  2784                           ; Regs used in _KaiJi: [wreg+status,2+status,0+pclath+cstack]
  2785  09DD  2453  3188         	fcall	_GetBatteryVoltage
  2786  09DF  085B               	movf	?_GetBatteryVoltage+1,w
  2787  09E0  00B7               	movwf	_gBatteryVoltage+1
  2788  09E1  085A               	movf	?_GetBatteryVoltage,w
  2789  09E2  00B6               	movwf	_gBatteryVoltage
  2790                           
  2791                           ;mypic.h: 1003: if(gBatteryVoltage < 391)
  2792  09E3  3001               	movlw	1
  2793  09E4  0237               	subwf	_gBatteryVoltage+1,w
  2794  09E5  3087               	movlw	135
  2795  09E6  1903               	skipnz
  2796  09E7  0236               	subwf	_gBatteryVoltage,w
  2797  09E8  1803               	skipnc
  2798  09E9  29EC               	goto	l5770
  2799                           
  2800                           ;mypic.h: 1007: System24V = 0;
  2801  09EA  30A3               	movlw	_Battery_12V& (0+255)
  2802  09EB  29FB               	goto	L1
  2803  09EC                     l5770:	
  2804                           ;mypic.h: 1008: }
  2805                           
  2806                           
  2807                           ;mypic.h: 1009: else if((gBatteryVoltage < 782) && (gBatteryVoltage > 512))
  2808  09EC  3003               	movlw	3
  2809  09ED  0237               	subwf	_gBatteryVoltage+1,w
  2810  09EE  300E               	movlw	14
  2811  09EF  1903               	skipnz
  2812  09F0  0236               	subwf	_gBatteryVoltage,w
  2813  09F1  1803               	skipnc
  2814  09F2  29FC               	goto	l5776
  2815  09F3  3002               	movlw	2
  2816  09F4  0237               	subwf	_gBatteryVoltage+1,w
  2817  09F5  3001               	movlw	1
  2818  09F6  1903               	skipnz
  2819  09F7  0236               	subwf	_gBatteryVoltage,w
  2820  09F8  1C03               	skipc
  2821  09F9  29FC               	goto	l5776
  2822                           
  2823                           ;mypic.h: 1013: System24V = 1;
  2824  09FA  30B9               	movlw	_Battery_24V& (0+255)
  2825  09FB                     L1:	
  2826  09FB  00BD               	movwf	_BatteryStandard
  2827  09FC                     l5776:	
  2828                           ;mypic.h: 1014: }
  2829                           
  2830                           
  2831                           ;mypic.h: 1021: }
  2832                           ;mypic.h: 1025: SDSolarPanelVoltage = GetSolarPanelVoltage();
  2833  09FC  22FA  3188         	fcall	_GetSolarPanelVoltage
  2834  09FE  085B               	movf	?_GetSolarPanelVoltage+1,w
  2835  09FF  00AF               	movwf	_SDSolarPanelVoltage+1
  2836  0A00  085A               	movf	?_GetSolarPanelVoltage,w
  2837  0A01  00AE               	movwf	_SDSolarPanelVoltage
  2838                           
  2839                           ;mypic.h: 1026: SDBatteryVoltage = GetBatteryVoltage();
  2840  0A02  2453  3188         	fcall	_GetBatteryVoltage
  2841  0A04  085B               	movf	?_GetBatteryVoltage+1,w
  2842  0A05  00AD               	movwf	_SDBatteryVoltage+1
  2843  0A06  085A               	movf	?_GetBatteryVoltage,w
  2844  0A07  00AC               	movwf	_SDBatteryVoltage
  2845                           
  2846                           ;mypic.h: 1027: if((SDSolarPanelVoltage*47) < ((SDBatteryVoltage*48) - 2400)
  2847                           ;mypic.h: 1028: || (SDSolarPanelVoltage*47) > ((SDBatteryVoltage*48) + 2400))
  2848  0A08  082D               	movf	_SDBatteryVoltage+1,w
  2849  0A09  26AA  3188         	fcall	PL16	;call to abstracted procedure
  2850  0A0B  22E5  3188         	fcall	___wmul
  2851  0A0D  0870               	movf	?___wmul,w
  2852  0A0E  3EA0               	addlw	160
  2853  0A0F  00DC               	movwf	??_KaiJi
  2854  0A10  30F6               	movlw	246
  2855  0A11  3D71               	addwfc	?___wmul+1,w
  2856  0A12  00DD               	movwf	??_KaiJi+1
  2857  0A13  26A2  3188         	fcall	PL15	;call to abstracted procedure
  2858  0A15  22E5  3188         	fcall	___wmul
  2859  0A17  085D               	movf	??_KaiJi+1,w
  2860  0A18  0271               	subwf	?___wmul+1,w
  2861  0A19  1D03               	skipz
  2862  0A1A  2A1D               	goto	u3515
  2863  0A1B  085C               	movf	??_KaiJi,w
  2864  0A1C  0270               	subwf	?___wmul,w
  2865  0A1D                     u3515:	
  2866  0A1D  1C03               	skipc
  2867  0A1E  2A28               	goto	l5780
  2868  0A1F  082D               	movf	_SDBatteryVoltage+1,w
  2869  0A20  26AA  3188         	fcall	PL16	;call to abstracted procedure
  2870  0A22  22E5  3188         	fcall	___wmul
  2871  0A24  26A2  3188         	fcall	PL15	;call to abstracted procedure
  2872  0A26  22E5  3188         	fcall	___wmul
  2873  0A28                     l5780:	
  2874                           
  2875                           ;mypic.h: 1034: }
  2876                           ;mypic.h: 1035: gFbVoltage = GetLoadCurrentVoltage();
  2877  0A28  2621               	fcall	_GetLoadCurrentVoltage
  2878  0A29  085B               	movf	?_GetLoadCurrentVoltage+1,w
  2879  0A2A  00B9               	movwf	_gFbVoltage+1
  2880  0A2B  085A               	movf	?_GetLoadCurrentVoltage,w
  2881  0A2C  00B8               	movwf	_gFbVoltage
  2882                           
  2883                           ;mypic.h: 1042: }
  2884                           ;mypic.h: 1043: ADVoltage = 0;
  2885  0A2D  01A2               	clrf	_ADVoltage
  2886  0A2E  01A3               	clrf	_ADVoltage+1
  2887                           
  2888                           ;mypic.h: 1044: ADBase = 0;
  2889  0A2F  01A0               	clrf	_ADBase
  2890  0A30  01A1               	clrf	_ADBase+1
  2891                           
  2892                           ;mypic.h: 1045: PVCount = 0;
  2893  0A31  01C2               	clrf	_PVCount
  2894  0A32  0008               	return
  2895  0A33                     __end_of_KaiJi:	
  2896  0A33                     __ptext588:	
  2897 ;; =============== function _PWMCharge ends ============
  2898                           
  2899                           
  2900 ;; *************** function _SolarPanelDealWith *****************
  2901 ;; Defined at:
  2902 ;;		line 539 in file "C:\CTK\CTK80A 150928\CTK80A_Jas\mypic.h"
  2903 ;; Parameters:    Size  Location     Type
  2904 ;;		None
  2905 ;; Auto vars:     Size  Location     Type
  2906 ;;  SolarPanelVo    2   23[BANK0 ] unsigned int 
  2907 ;; Return value:  Size  Location     Type
  2908 ;;		None               void
  2909 ;; Registers used:
  2910 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2911 ;; Tracked objects:
  2912 ;;		On entry : 1F/0
  2913 ;;		On exit  : 1F/0
  2914 ;;		Unchanged: FFFE0/0
  2915 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2916 ;;      Params:         0       0       0       0
  2917 ;;      Locals:         0       2       0       0
  2918 ;;      Temps:          0       6       0       0
  2919 ;;      Totals:         0       8       0       0
  2920 ;;Total ram usage:        8 bytes
  2921 ;; Hardware stack levels used:    1
  2922 ;; Hardware stack levels required when called:    5
  2923 ;; This function calls:
  2924 ;;		_Delay
  2925 ;;		_GetSolarPanelVoltage
  2926 ;;		___wmul
  2927 ;; This function is called by:
  2928 ;;		_main
  2929 ;; This function uses a non-reentrant model
  2930 ;;
  2931  0A33                     _SolarPanelDealWith:	
  2932                           
  2933                           ;mypic.h: 540: unsigned int SolarPanelVoltage;
  2934                           ;mypic.h: 541: if(PWMFlag == 0)
  2935                           
  2936                           ; Regs used in _SolarPanelDealWith: [wreg+fsr1l-status,0+pclath+cstack]
  2937  0A33  196C               	btfsc	_PWMFlag/(0+8),_PWMFlag& (0+7)
  2938  0A34  2A68               	goto	l5404
  2939                           
  2940                           ;mypic.h: 542: {
  2941                           ;mypic.h: 543: if(DutyRatio > 249)
  2942  0A35  30FA               	movlw	250
  2943  0A36  023F               	subwf	_DutyRatio,w
  2944  0A37  1C03               	skipc
  2945  0A38  2A4A               	goto	l5378
  2946                           
  2947                           ;mypic.h: 544: {
  2948                           ;mypic.h: 545: (PORTB |= (1 << 0));
  2949  0A39  140D               	bsf	13,0	;volatile
  2950                           
  2951                           ;mypic.h: 546: Delay(200);
  2952  0A3A  30C8               	movlw	200
  2953  0A3B  00F0               	movwf	?_Delay
  2954  0A3C  01F1               	clrf	?_Delay+1
  2955  0A3D  2301  3188         	fcall	_Delay
  2956                           
  2957                           ;mypic.h: 547: SolarPanelVoltage = GetSolarPanelVoltage();
  2958  0A3F  22FA  3188         	fcall	_GetSolarPanelVoltage
  2959  0A41  085B               	movf	?_GetSolarPanelVoltage+1,w
  2960  0A42  00E3               	movwf	SolarPanelDealWith@SolarPanelVoltage+1
  2961  0A43  085A               	movf	?_GetSolarPanelVoltage,w
  2962  0A44  00E2               	movwf	SolarPanelDealWith@SolarPanelVoltage
  2963                           
  2964                           ;mypic.h: 548: gSolarPanelVoltage = SolarPanelVoltage;
  2965  0A45  0863               	movf	SolarPanelDealWith@SolarPanelVoltage+1,w
  2966  0A46  00BB               	movwf	_gSolarPanelVoltage+1
  2967  0A47  0862               	movf	SolarPanelDealWith@SolarPanelVoltage,w
  2968  0A48  00BA               	movwf	_gSolarPanelVoltage
  2969                           
  2970                           ;mypic.h: 549: (PORTB &= ~(1 << 0));
  2971  0A49  100D               	bcf	13,0	;volatile
  2972  0A4A                     l5378:	
  2973                           
  2974                           ;mypic.h: 550: }
  2975                           ;mypic.h: 551: if(DutyRatio == 0)
  2976  0A4A  08BF               	movf	_DutyRatio,f
  2977  0A4B  1D03               	skipz
  2978  0A4C  2A68               	goto	l5404
  2979                           
  2980                           ;mypic.h: 552: {
  2981                           ;mypic.h: 553: (PORTB |= (1 << 0));
  2982  0A4D  140D               	bsf	13,0	;volatile
  2983                           
  2984                           ;mypic.h: 554: if(LPVCount == 0)
  2985  0A4E  08C0               	movf	_LPVCount,f
  2986  0A4F  1D03               	skipz
  2987  0A50  2A5D               	goto	l2327
  2988                           
  2989                           ;mypic.h: 555: {
  2990                           ;mypic.h: 556: (PORTA &= ~(1 << 0));
  2991  0A51  100C               	bcf	12,0	;volatile
  2992                           
  2993                           ;mypic.h: 557: Delay(1000);
  2994  0A52  30E8               	movlw	232
  2995  0A53  00F0               	movwf	?_Delay
  2996  0A54  3003               	movlw	3
  2997  0A55  00F1               	movwf	?_Delay+1
  2998  0A56  2301  3188         	fcall	_Delay
  2999                           
  3000                           ;mypic.h: 558: SolarPanelVoltage = GetSolarPanelVoltage();
  3001  0A58  22FA  3188         	fcall	_GetSolarPanelVoltage
  3002                           
  3003                           ;mypic.h: 559: gSolarPanelVoltage = SolarPanelVoltage;
  3004                           
  3005                           ;mypic.h: 560: (PORTA |= (1 << 0));
  3006  0A5A  2676  3188         	fcall	PL9	;call to abstracted procedure
  3007                           
  3008                           ;mypic.h: 561: }
  3009  0A5C  2A68               	goto	l5404
  3010  0A5D                     l2327:	
  3011                           
  3012                           ;mypic.h: 562: else
  3013                           ;mypic.h: 563: {
  3014                           ;mypic.h: 564: (PORTA &= ~(1 << 0));
  3015  0A5D  100C               	bcf	12,0	;volatile
  3016                           
  3017                           ;mypic.h: 565: if(LPVCount > 99)
  3018  0A5E  3064               	movlw	100
  3019  0A5F  0240               	subwf	_LPVCount,w
  3020  0A60  1C03               	skipc
  3021  0A61  2A68               	goto	l5404
  3022                           
  3023                           ;mypic.h: 566: {
  3024                           ;mypic.h: 567: LPVCount = 0;
  3025  0A62  01C0               	clrf	_LPVCount
  3026                           
  3027                           ;mypic.h: 568: SolarPanelVoltage = GetSolarPanelVoltage();
  3028  0A63  22FA  3188         	fcall	_GetSolarPanelVoltage
  3029                           
  3030                           ;mypic.h: 569: gSolarPanelVoltage = SolarPanelVoltage;
  3031                           
  3032                           ;mypic.h: 570: (PORTA |= (1 << 0));
  3033  0A65  2676  3188         	fcall	PL9	;call to abstracted procedure
  3034                           
  3035                           ;mypic.h: 571: LPVFlag = 1;
  3036  0A67  166B               	bsf	_LPVFlag/(0+8),_LPVFlag& (0+7)
  3037  0A68                     l5404:	
  3038                           
  3039                           ;mypic.h: 572: }
  3040                           ;mypic.h: 573: }
  3041                           ;mypic.h: 574: }
  3042                           ;mypic.h: 575: }
  3043                           ;mypic.h: 576: if(PWMFlag == 1)
  3044  0A68  1D6C               	btfss	_PWMFlag/(0+8),_PWMFlag& (0+7)
  3045  0A69  2A78               	goto	l5418
  3046                           
  3047                           ;mypic.h: 577: {
  3048                           ;mypic.h: 578: (PORTB |= (1 << 0));
  3049  0A6A  140D               	bsf	13,0	;volatile
  3050                           
  3051                           ;mypic.h: 579: PWMFlag = 0;
  3052  0A6B  116C               	bcf	_PWMFlag/(0+8),_PWMFlag& (0+7)
  3053                           
  3054                           ;mypic.h: 581: (PORTA &= ~(1 << 0));
  3055  0A6C  100C               	bcf	12,0	;volatile
  3056                           
  3057                           ;mypic.h: 582: Delay(200);
  3058  0A6D  30C8               	movlw	200
  3059  0A6E  00F0               	movwf	?_Delay
  3060  0A6F  01F1               	clrf	?_Delay+1
  3061  0A70  2301  3188         	fcall	_Delay
  3062                           
  3063                           ;mypic.h: 583: SolarPanelVoltage = GetSolarPanelVoltage();
  3064  0A72  22FA  3188         	fcall	_GetSolarPanelVoltage
  3065                           
  3066                           ;mypic.h: 584: gSolarPanelVoltage = SolarPanelVoltage;
  3067                           
  3068                           ;mypic.h: 585: (PORTA |= (1 << 0));
  3069  0A74  2676  3188         	fcall	PL9	;call to abstracted procedure
  3070                           
  3071                           ;mypic.h: 586: PWMFlag = 1;
  3072  0A76  156C               	bsf	_PWMFlag/(0+8),_PWMFlag& (0+7)
  3073                           
  3074                           ;mypic.h: 587: (PORTB &= ~(1 << 0));
  3075  0A77  100D               	bcf	13,0	;volatile
  3076  0A78                     l5418:	
  3077                           
  3078                           ;mypic.h: 588: }
  3079                           ;mypic.h: 589: if(gSolarPanelVoltage <= 24)
  3080  0A78  3000               	movlw	0
  3081  0A79  023B               	subwf	_gSolarPanelVoltage+1,w
  3082  0A7A  3019               	movlw	25
  3083  0A7B  1903               	skipnz
  3084  0A7C  023A               	subwf	_gSolarPanelVoltage,w
  3085  0A7D  1803               	skipnc
  3086  0A7E  2A81               	goto	l2331
  3087                           
  3088                           ;mypic.h: 590: {
  3089                           ;mypic.h: 591: PVState = 1;
  3090  0A7F  146C               	bsf	_PVState/(0+8),_PVState& (0+7)
  3091                           
  3092                           ;mypic.h: 592: }
  3093  0A80  2A83               	goto	l5422
  3094  0A81                     l2331:	
  3095                           
  3096                           ;mypic.h: 593: else
  3097                           ;mypic.h: 594: {
  3098                           ;mypic.h: 595: PVState = 0;
  3099  0A81  106C               	bcf	_PVState/(0+8),_PVState& (0+7)
  3100                           
  3101                           ;mypic.h: 596: PVChargeFlag = 0;
  3102  0A82  13EB               	bcf	_PVChargeFlag/(0+8),_PVChargeFlag& (0+7)
  3103  0A83                     l5422:	
  3104                           
  3105                           ;mypic.h: 597: }
  3106                           ;mypic.h: 599: if(((gBatteryVoltage*26) - (gSolarPanelVoltage*23)) > *(BatteryStandard +
      +                           9))
  3107  0A83  269A  3188         	fcall	PL14	;call to abstracted procedure
  3108  0A85  22E5  3188         	fcall	___wmul
  3109  0A87  268F  3188         	fcall	PL12	;call to abstracted procedure
  3110  0A89  2686  3188         	fcall	PL11	;call to abstracted procedure
  3111  0A8B  22E5  3188         	fcall	___wmul
  3112  0A8D  26B1  3188         	fcall	PL18	;call to abstracted procedure
  3113  0A8F  083D               	movf	_BatteryStandard,w
  3114  0A90  3E12               	addlw	18
  3115  0A91  0086               	movwf	6
  3116  0A92  0187               	clrf	7
  3117  0A93  3F40               	moviw [0]fsr1
  3118  0A94  00E0               	movwf	??_SolarPanelDealWith+4
  3119  0A95  3F41               	moviw [1]fsr1
  3120  0A96  00E1               	movwf	??_SolarPanelDealWith+5
  3121  0A97  085F               	movf	??_SolarPanelDealWith+3,w
  3122  0A98  0261               	subwf	??_SolarPanelDealWith+5,w
  3123  0A99  1D03               	skipz
  3124  0A9A  2A9D               	goto	u3065
  3125  0A9B  085E               	movf	??_SolarPanelDealWith+2,w
  3126  0A9C  0260               	subwf	??_SolarPanelDealWith+4,w
  3127  0A9D                     u3065:	
  3128  0A9D  1803               	skipnc
  3129  0A9E  2AA3               	goto	l5432
  3130                           
  3131                           ;mypic.h: 600: {
  3132                           ;mypic.h: 601: LPVFlag = 0;
  3133  0A9F  126B               	bcf	_LPVFlag/(0+8),_LPVFlag& (0+7)
  3134                           
  3135                           ;mypic.h: 602: LPVCount = 0;
  3136  0AA0  01C0               	clrf	_LPVCount
  3137                           
  3138                           ;mypic.h: 603: RB6 = 1;
  3139  0AA1  170D               	bsf	13,6
  3140                           
  3141                           ;mypic.h: 604: DAYTIME = 1;
  3142  0AA2  146B               	bsf	_DAYTIME/(0+8),_DAYTIME& (0+7)
  3143  0AA3                     l5432:	
  3144                           
  3145                           ;mypic.h: 605: }
  3146                           ;mypic.h: 606: if(((gBatteryVoltage*26) - (gSolarPanelVoltage*23)) < 3686)
  3147  0AA3  269A  3188         	fcall	PL14	;call to abstracted procedure
  3148  0AA5  22E5  3188         	fcall	___wmul
  3149  0AA7  268F  3188         	fcall	PL12	;call to abstracted procedure
  3150  0AA9  2686  3188         	fcall	PL11	;call to abstracted procedure
  3151  0AAB  22E5  3188         	fcall	___wmul
  3152  0AAD  26B1  3188         	fcall	PL18	;call to abstracted procedure
  3153  0AAF  300E               	movlw	14
  3154  0AB0  025F               	subwf	??_SolarPanelDealWith+3,w
  3155  0AB1  3066               	movlw	102
  3156  0AB2  1903               	skipnz
  3157  0AB3  025E               	subwf	??_SolarPanelDealWith+2,w
  3158  0AB4  1C03               	btfss	3,0
  3159                           
  3160                           ;mypic.h: 607: {
  3161                           ;mypic.h: 608: if(DAYTIME == 1)
  3162  0AB5  1C6B               	btfss	_DAYTIME/(0+8),_DAYTIME& (0+7)
  3163  0AB6  2ABC               	goto	l2334
  3164                           
  3165                           ;mypic.h: 609: {
  3166                           ;mypic.h: 610: if(LPVCount == 0)
  3167  0AB7  08C0               	movf	_LPVCount,f
  3168  0AB8  1D03               	skipz
  3169  0AB9  2ABC               	goto	l2334
  3170                           
  3171                           ;mypic.h: 611: {
  3172                           ;mypic.h: 612: LPVCount = 1;
  3173  0ABA  01C0               	clrf	_LPVCount
  3174  0ABB  0AC0               	incf	_LPVCount,f
  3175  0ABC                     l2334:	
  3176                           
  3177                           ;mypic.h: 613: }
  3178                           ;mypic.h: 614: }
  3179                           ;mypic.h: 615: }
  3180                           ;mypic.h: 616: if(LPVFlag == 1)
  3181  0ABC  1E6B               	btfss	_LPVFlag/(0+8),_LPVFlag& (0+7)
  3182  0ABD  0008               	return
  3183                           
  3184                           ;mypic.h: 617: {
  3185                           ;mypic.h: 618: LPVFlag = 0;
  3186  0ABE  126B               	bcf	_LPVFlag/(0+8),_LPVFlag& (0+7)
  3187                           
  3188                           ;mypic.h: 619: LPVCount = 0;
  3189  0ABF  01C0               	clrf	_LPVCount
  3190                           
  3191                           ;mypic.h: 620: if(((gBatteryVoltage*26) - (gSolarPanelVoltage*23)) < *(BatteryStandard +
      +                           10))
  3192  0AC0  083D               	movf	_BatteryStandard,w
  3193  0AC1  3E14               	addlw	20
  3194  0AC2  0086               	movwf	6
  3195  0AC3  0187               	clrf	7
  3196  0AC4  3F40               	moviw [0]fsr1
  3197  0AC5  00DC               	movwf	??_SolarPanelDealWith
  3198  0AC6  3F41               	moviw [1]fsr1
  3199  0AC7  00DD               	movwf	??_SolarPanelDealWith+1
  3200  0AC8  269A  3188         	fcall	PL14	;call to abstracted procedure
  3201  0ACA  22E5  3188         	fcall	___wmul
  3202  0ACC  0870               	movf	?___wmul,w
  3203  0ACD  00DE               	movwf	??_SolarPanelDealWith+2
  3204  0ACE  0871               	movf	?___wmul+1,w
  3205  0ACF  00DF               	movwf	??_SolarPanelDealWith+3
  3206  0AD0  2686  3188         	fcall	PL11	;call to abstracted procedure
  3207  0AD2  22E5  3188         	fcall	___wmul
  3208  0AD4  0870               	movf	?___wmul,w
  3209  0AD5  075E               	addwf	??_SolarPanelDealWith+2,w
  3210  0AD6  00E0               	movwf	??_SolarPanelDealWith+4
  3211  0AD7  0871               	movf	?___wmul+1,w
  3212  0AD8  3D5F               	addwfc	??_SolarPanelDealWith+3,w
  3213  0AD9  00E1               	movwf	??_SolarPanelDealWith+5
  3214  0ADA  085D               	movf	??_SolarPanelDealWith+1,w
  3215  0ADB  0261               	subwf	??_SolarPanelDealWith+5,w
  3216  0ADC  1D03               	skipz
  3217  0ADD  2AE0               	goto	u3115
  3218  0ADE  085C               	movf	??_SolarPanelDealWith,w
  3219  0ADF  0260               	subwf	??_SolarPanelDealWith+4,w
  3220  0AE0                     u3115:	
  3221  0AE0  1803               	skipnc
  3222  0AE1  0008               	return
  3223                           
  3224                           ;mypic.h: 621: {
  3225                           ;mypic.h: 622: RB6 = 0;
  3226  0AE2  130D               	bcf	13,6
  3227                           
  3228                           ;mypic.h: 623: DAYTIME = 0;
  3229  0AE3  106B               	bcf	_DAYTIME/(0+8),_DAYTIME& (0+7)
  3230  0AE4  0008               	return
  3231  0AE5                     __end_of_SolarPanelDealWith:	
  3232  0AE5                     __ptext608:	
  3233 ;; =============== function ___ftpack ends ============
  3234                           
  3235                           
  3236 ;; *************** function ___wmul *****************
  3237 ;; Defined at:
  3238 ;;		line 3 in file "C:\Program Files\HI-TECH Software\PICC\9.80\sources\wmul.c"
  3239 ;; Parameters:    Size  Location     Type
  3240 ;;  multiplier      2    0[COMMON] unsigned int 
  3241 ;;  multiplicand    2    2[COMMON] unsigned int 
  3242 ;; Auto vars:     Size  Location     Type
  3243 ;;  product         2    4[COMMON] unsigned int 
  3244 ;; Return value:  Size  Location     Type
  3245 ;;                  2    0[COMMON] unsigned int 
  3246 ;; Registers used:
  3247 ;;		wreg, status,2, status,0
  3248 ;; Tracked objects:
  3249 ;;		On entry : 1F/0
  3250 ;;		On exit  : 1F/0
  3251 ;;		Unchanged: FFFE0/0
  3252 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3253 ;;      Params:         4       0       0       0
  3254 ;;      Locals:         2       0       0       0
  3255 ;;      Temps:          0       0       0       0
  3256 ;;      Totals:         6       0       0       0
  3257 ;;Total ram usage:        6 bytes
  3258 ;; Hardware stack levels used:    1
  3259 ;; Hardware stack levels required when called:    1
  3260 ;; This function calls:
  3261 ;;		Nothing
  3262 ;; This function is called by:
  3263 ;;		_SolarPanelDealWith
  3264 ;;		_KaiJi
  3265 ;; This function uses a non-reentrant model
  3266 ;;
  3267  0AE5                     ___wmul:	
  3268                           
  3269                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  3270  0AE5  01F4               	clrf	___wmul@product
  3271  0AE6  01F5               	clrf	___wmul@product+1
  3272  0AE7                     l4996:	
  3273  0AE7  1C70               	btfss	___wmul@multiplier,0
  3274  0AE8  2AED               	goto	l5000
  3275  0AE9  0872               	movf	___wmul@multiplicand,w
  3276  0AEA  07F4               	addwf	___wmul@product,f
  3277  0AEB  0873               	movf	___wmul@multiplicand+1,w
  3278  0AEC  3DF5               	addwfc	___wmul@product+1,f
  3279  0AED                     l5000:	
  3280  0AED  35F2               	lslf	___wmul@multiplicand,f
  3281  0AEE  0DF3               	rlf	___wmul@multiplicand+1,f
  3282  0AEF  36F1               	lsrf	___wmul@multiplier+1,f
  3283  0AF0  0CF0               	rrf	___wmul@multiplier,f
  3284  0AF1  0871               	movf	___wmul@multiplier+1,w
  3285  0AF2  0470               	iorwf	___wmul@multiplier,w
  3286  0AF3  1D03               	skipz
  3287  0AF4  2AE7               	goto	l4996
  3288  0AF5  0875               	movf	___wmul@product+1,w
  3289  0AF6  00F1               	movwf	?___wmul+1
  3290  0AF7  0874               	movf	___wmul@product,w
  3291  0AF8  00F0               	movwf	?___wmul
  3292  0AF9  0008               	return
  3293  0AFA                     __end_of___wmul:	
  3294  0AFA                     __ptext591:	
  3295 ;; =============== function _GetLoadCurrentVoltage ends ============
  3296                           
  3297                           
  3298 ;; *************** function _GetSolarPanelVoltage *****************
  3299 ;; Defined at:
  3300 ;;		line 398 in file "C:\CTK\CTK80A 150928\CTK80A_Jas\mypic.h"
  3301 ;; Parameters:    Size  Location     Type
  3302 ;;		None
  3303 ;; Auto vars:     Size  Location     Type
  3304 ;;  channel         1    0        unsigned char 
  3305 ;; Return value:  Size  Location     Type
  3306 ;;                  2   15[BANK0 ] unsigned int 
  3307 ;; Registers used:
  3308 ;;		wreg, status,2, status,0, pclath, cstack
  3309 ;; Tracked objects:
  3310 ;;		On entry : 1F/0
  3311 ;;		On exit  : 1F/0
  3312 ;;		Unchanged: FFFE0/0
  3313 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3314 ;;      Params:         0       2       0       0
  3315 ;;      Locals:         1       0       0       0
  3316 ;;      Temps:          0       0       0       0
  3317 ;;      Totals:         1       2       0       0
  3318 ;;Total ram usage:        3 bytes
  3319 ;; Hardware stack levels used:    1
  3320 ;; Hardware stack levels required when called:    4
  3321 ;; This function calls:
  3322 ;;		_getADValue
  3323 ;; This function is called by:
  3324 ;;		_SolarPanelDealWith
  3325 ;;		_KaiJi
  3326 ;; This function uses a non-reentrant model
  3327 ;;
  3328  0AFA                     _GetSolarPanelVoltage:	
  3329                           
  3330                           ;mypic.h: 400: return getADValue(channel);
  3331                           
  3332                           ; Regs used in _GetSolarPanelVoltage: [wreg+status,2+status,0+pclath+cstack]
  3333  0AFA  3021               	movlw	33
  3334  0AFB  2534               	fcall	_getADValue
  3335  0AFC  084C               	movf	?_getADValue+1,w
  3336  0AFD  00DB               	movwf	?_GetSolarPanelVoltage+1
  3337  0AFE  084B               	movf	?_getADValue,w
  3338  0AFF  00DA               	movwf	?_GetSolarPanelVoltage
  3339  0B00  0008               	return
  3340  0B01                     __end_of_GetSolarPanelVoltage:	
  3341  0B01                     __ptext613:	
  3342 ;; =============== function _ReadEE ends ============
  3343                           
  3344                           
  3345 ;; *************** function _Delay *****************
  3346 ;; Defined at:
  3347 ;;		line 198 in file "C:\CTK\CTK80A 150928\CTK80A_Jas\mypic.h"
  3348 ;; Parameters:    Size  Location     Type
  3349 ;;  x               2    0[COMMON] unsigned int 
  3350 ;; Auto vars:     Size  Location     Type
  3351 ;;  b               2    4[COMMON] unsigned int 
  3352 ;;  a               2    2[COMMON] unsigned int 
  3353 ;; Return value:  Size  Location     Type
  3354 ;;		None               void
  3355 ;; Registers used:
  3356 ;;		wreg, status,2, status,0
  3357 ;; Tracked objects:
  3358 ;;		On entry : 1E/0
  3359 ;;		On exit  : 1E/0
  3360 ;;		Unchanged: FFFE1/0
  3361 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3362 ;;      Params:         2       0       0       0
  3363 ;;      Locals:         4       0       0       0
  3364 ;;      Temps:          0       0       0       0
  3365 ;;      Totals:         6       0       0       0
  3366 ;;Total ram usage:        6 bytes
  3367 ;; Hardware stack levels used:    1
  3368 ;; Hardware stack levels required when called:    1
  3369 ;; This function calls:
  3370 ;;		Nothing
  3371 ;; This function is called by:
  3372 ;;		_system_state_init
  3373 ;;		_getADValueOneTime
  3374 ;;		_SolarPanelDealWith
  3375 ;;		_SwitchBatteryState
  3376 ;; This function uses a non-reentrant model
  3377 ;;
  3378  0B01                     _Delay:	
  3379  0B01                     l4660:	
  3380                           ; Regs used in _Delay: [wreg+status,2+status,0]
  3381                           
  3382                           
  3383                           ;mypic.h: 199: unsigned int a,b;
  3384                           ;mypic.h: 200: for(a=x;a>0;a--)
  3385  0B01  0871               	movf	Delay@x+1,w
  3386  0B02  00F3               	movwf	Delay@a+1
  3387  0B03  0870               	movf	Delay@x,w
  3388  0B04  00F2               	movwf	Delay@a
  3389  0B05                     l4662:	
  3390  0B05  0873               	movf	Delay@a+1,w
  3391  0B06  0472               	iorwf	Delay@a,w
  3392  0B07  1903               	btfsc	3,2
  3393  0B08  0008               	return
  3394                           
  3395                           ;mypic.h: 201: for(b=10;b>0;b--);
  3396  0B09  300A               	movlw	10
  3397  0B0A  00F4               	movwf	Delay@b
  3398  0B0B  01F5               	clrf	Delay@b+1
  3399  0B0C  3001               	movlw	1
  3400  0B0D                     L8:	
  3401  0B0D  02F4               	subwf	Delay@b,f
  3402  0B0E  3000               	movlw	0
  3403  0B0F  3BF5               	subwfb	Delay@b+1,f
  3404  0B10  0875               	movf	Delay@b+1,w
  3405  0B11  0474               	iorwf	Delay@b,w
  3406  0B12  3001               	movlw	1
  3407  0B13  1D03               	skipz
  3408  0B14  2B0D               	goto	L8
  3409  0B15  02F2               	subwf	Delay@a,f
  3410  0B16  3000               	movlw	0
  3411  0B17  3BF3               	subwfb	Delay@a+1,f
  3412  0B18  2B05               	goto	l4662
  3413  0B19                     __end_of_Delay:	
  3414  0B19                     __ptext586:	
  3415 ;; =============== function _KaiJi ends ============
  3416                           
  3417                           
  3418 ;; *************** function _SwitchBatteryState *****************
  3419 ;; Defined at:
  3420 ;;		line 734 in file "C:\CTK\CTK80A 150928\CTK80A_Jas\mypic.h"
  3421 ;; Parameters:    Size  Location     Type
  3422 ;;		None
  3423 ;; Auto vars:     Size  Location     Type
  3424 ;;		None
  3425 ;; Return value:  Size  Location     Type
  3426 ;;		None               void
  3427 ;; Registers used:
  3428 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3429 ;; Tracked objects:
  3430 ;;		On entry : 1F/0
  3431 ;;		On exit  : 1F/0
  3432 ;;		Unchanged: FFFE0/0
  3433 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3434 ;;      Params:         0       0       0       0
  3435 ;;      Locals:         0       0       0       0
  3436 ;;      Temps:          0       6       0       0
  3437 ;;      Totals:         0       6       0       0
  3438 ;;Total ram usage:        6 bytes
  3439 ;; Hardware stack levels used:    1
  3440 ;; Hardware stack levels required when called:    5
  3441 ;; This function calls:
  3442 ;;		_GetBatteryVoltage
  3443 ;;		_BatteryStateSwitch
  3444 ;;		_lcd_move_char
  3445 ;;		_lcd_write_data
  3446 ;;		_Delay
  3447 ;; This function is called by:
  3448 ;;		_main
  3449 ;; This function uses a non-reentrant model
  3450 ;;
  3451  0B19                     _SwitchBatteryState:	
  3452                           
  3453                           ;mypic.h: 735: switch(BatteryState)
  3454                           
  3455                           ; Regs used in _SwitchBatteryState: [wreg-status,0+pclath+cstack]
  3456  0B19  2C3B               	goto	l5762
  3457  0B1A                     l5488:	
  3458                           
  3459                           ;mypic.h: 738: {
  3460                           ;mypic.h: 739: lcd_state = 0;
  3461  0B1A  01C7               	clrf	_lcd_state
  3462                           
  3463                           ;mypic.h: 740: gBatteryVoltage = GetBatteryVoltage();
  3464  0B1B  2453  3188         	fcall	_GetBatteryVoltage
  3465  0B1D  085B               	movf	?_GetBatteryVoltage+1,w
  3466  0B1E  00B7               	movwf	_gBatteryVoltage+1
  3467  0B1F  085A               	movf	?_GetBatteryVoltage,w
  3468  0B20  00B6               	movwf	_gBatteryVoltage
  3469                           
  3470                           ;mypic.h: 741: BatteryState = BatteryStateSwitch(gBatteryVoltage);
  3471  0B21  26C2  3188         	fcall	PL22	;call to abstracted procedure
  3472  0B23  245A  3188         	fcall	_BatteryStateSwitch
  3473  0B25  00BE               	movwf	_BatteryState
  3474                           
  3475                           ;mypic.h: 742: EnhanceChargeFlag = 0;
  3476  0B26  10EB               	bcf	_EnhanceChargeFlag/(0+8),_EnhanceChargeFlag& (0+7)
  3477                           
  3478                           ;mypic.h: 743: EnhanceCharge_Time = 0;
  3479                           
  3480                           ;mypic.h: 744: EqualizingChargeFlag = 0;
  3481                           
  3482                           ;mypic.h: 745: EqualizingCharge_Time = 0;
  3483                           
  3484                           ;mypic.h: 746: FloatingChargeFlag = 0;
  3485  0B27  266F               	fcall	PL8	;call to abstracted procedure
  3486                           
  3487                           ;mypic.h: 747: BatteryLastState = 0;
  3488  0B28  01BC               	clrf	_BatteryLastState
  3489                           
  3490                           ;mypic.h: 748: break;
  3491  0B29  0008               	return
  3492  0B2A                     l5506:	
  3493                           
  3494                           ;mypic.h: 751: {
  3495                           ;mypic.h: 753: if (lcd_state == 2) {
  3496  0B2A  0847               	movf	_lcd_state,w
  3497  0B2B  3A02               	xorlw	2
  3498  0B2C  1D03               	skipz
  3499  0B2D  2B34               	goto	l5510
  3500                           
  3501                           ;mypic.h: 755: lcd_move_char(11);
  3502  0B2E  300B               	movlw	11
  3503  0B2F  216B  3188         	fcall	_lcd_move_char
  3504                           
  3505                           ;mypic.h: 756: lcd_write_data(0xff);
  3506  0B31  30FF               	movlw	255
  3507  0B32  249E  3188         	fcall	_lcd_write_data
  3508  0B34                     l5510:	
  3509                           
  3510                           ;mypic.h: 758: }
  3511                           ;mypic.h: 759: if(BatteryLastState != 1)
  3512  0B34  033C               	decf	_BatteryLastState,w
  3513  0B35  1903               	skipnz
  3514  0B36  2B3C               	goto	l5522
  3515                           
  3516                           ;mypic.h: 760: {
  3517                           ;mypic.h: 762: EnhanceChargeFlag = 0;
  3518  0B37  10EB               	bcf	_EnhanceChargeFlag/(0+8),_EnhanceChargeFlag& (0+7)
  3519                           
  3520                           ;mypic.h: 763: EnhanceCharge_Time = 0;
  3521                           
  3522                           ;mypic.h: 764: EqualizingChargeFlag = 0;
  3523                           
  3524                           ;mypic.h: 765: EqualizingCharge_Time = 0;
  3525                           
  3526                           ;mypic.h: 766: FloatingChargeFlag = 0;
  3527  0B38  266F  3188         	fcall	PL8	;call to abstracted procedure
  3528                           
  3529                           ;mypic.h: 767: BatteryLastState = 1;
  3530  0B3A  01BC               	clrf	_BatteryLastState
  3531  0B3B  0ABC               	incf	_BatteryLastState,f
  3532  0B3C                     l5522:	
  3533                           
  3534                           ;mypic.h: 768: }
  3535                           ;mypic.h: 769: if(PVState == 1)
  3536  0B3C  1C6C               	btfss	_PVState/(0+8),_PVState& (0+7)
  3537  0B3D  2B48               	goto	l2377
  3538                           
  3539                           ;mypic.h: 770: {
  3540                           ;mypic.h: 771: ClampVoltage = *(BatteryStandard + 6) - TemBase + TemVoltage - ADBase + A
      +                          DVoltage;
  3541  0B3E  083D               	movf	_BatteryStandard,w
  3542  0B3F  3E0C               	addlw	12
  3543  0B40  264D  3188         	fcall	PL4	;call to abstracted procedure
  3544                           
  3545                           ;mypic.h: 772: if(EnhanceChargeFlag == 0)
  3546  0B42  18EB               	btfsc	_EnhanceChargeFlag/(0+8),_EnhanceChargeFlag& (0+7)
  3547  0B43  2B62               	goto	l5544
  3548                           
  3549                           ;mypic.h: 773: {
  3550                           ;mypic.h: 774: EnhanceChargeFlag = 1;
  3551  0B44  14EB               	bsf	_EnhanceChargeFlag/(0+8),_EnhanceChargeFlag& (0+7)
  3552                           
  3553                           ;mypic.h: 775: EnhanceCharge_Time = 0;
  3554  0B45  01A6               	clrf	_EnhanceCharge_Time
  3555  0B46  01A7               	clrf	_EnhanceCharge_Time+1
  3556  0B47  2B62               	goto	l5544
  3557  0B48                     l2377:	
  3558                           
  3559                           ;mypic.h: 778: else
  3560                           ;mypic.h: 779: {
  3561                           ;mypic.h: 780: EnhanceChargeFlag = 0;
  3562  0B48  10EB               	bcf	_EnhanceChargeFlag/(0+8),_EnhanceChargeFlag& (0+7)
  3563                           
  3564                           ;mypic.h: 781: EnhanceCharge_Time = 0;
  3565  0B49  01A6               	clrf	_EnhanceCharge_Time
  3566  0B4A  01A7               	clrf	_EnhanceCharge_Time+1
  3567                           
  3568                           ;mypic.h: 782: gBatteryVoltage = GetBatteryVoltage();
  3569  0B4B  2453  3188         	fcall	_GetBatteryVoltage
  3570  0B4D  085B               	movf	?_GetBatteryVoltage+1,w
  3571  0B4E  00B7               	movwf	_gBatteryVoltage+1
  3572                           
  3573                           ;mypic.h: 783: if(gBatteryVoltage > *(BatteryStandard + 1) - TemBase + TemVoltage - ADBa
      +                          se + ADVoltage)
  3574  0B4F  2664  3188         	fcall	PL6	;call to abstracted procedure
  3575  0B51  263A  3188         	fcall	PL3	;call to abstracted procedure
  3576  0B53  0837               	movf	_gBatteryVoltage+1,w
  3577  0B54  0261               	subwf	??_SwitchBatteryState+5,w
  3578  0B55  1D03               	skipz
  3579  0B56  2B59               	goto	u3265
  3580  0B57  0836               	movf	_gBatteryVoltage,w
  3581  0B58  0260               	subwf	??_SwitchBatteryState+4,w
  3582  0B59                     u3265:	
  3583  0B59  1803               	skipnc
  3584  0B5A  2B62               	goto	l5544
  3585                           
  3586                           ;mypic.h: 784: {
  3587                           ;mypic.h: 785: BatteryState = BatteryStateSwitch(gBatteryVoltage);
  3588  0B5B  0837               	movf	_gBatteryVoltage+1,w
  3589  0B5C  00F1               	movwf	?_BatteryStateSwitch+1
  3590  0B5D  0836               	movf	_gBatteryVoltage,w
  3591  0B5E  00F0               	movwf	?_BatteryStateSwitch
  3592  0B5F  245A  3188         	fcall	_BatteryStateSwitch
  3593  0B61  00BE               	movwf	_BatteryState
  3594  0B62                     l5544:	
  3595                           
  3596                           ;mypic.h: 786: }
  3597                           ;mypic.h: 787: }
  3598                           ;mypic.h: 789: if(EnhanceCharge_Time >= 36000)
  3599  0B62  308C               	movlw	140
  3600  0B63  0227               	subwf	_EnhanceCharge_Time+1,w
  3601  0B64  30A0               	movlw	160
  3602  0B65  1903               	skipnz
  3603  0B66  0226               	subwf	_EnhanceCharge_Time,w
  3604  0B67  1C03               	skipc
  3605  0B68  0008               	return
  3606                           
  3607                           ;mypic.h: 790: {
  3608                           ;mypic.h: 791: EnhanceChargeFlag = 0;
  3609  0B69  10EB               	bcf	_EnhanceChargeFlag/(0+8),_EnhanceChargeFlag& (0+7)
  3610                           
  3611                           ;mypic.h: 792: EnhanceCharge_Time = 0;
  3612  0B6A  01A6               	clrf	_EnhanceCharge_Time
  3613  0B6B  01A7               	clrf	_EnhanceCharge_Time+1
  3614                           
  3615                           ;mypic.h: 793: Delay(100);
  3616  0B6C  3064               	movlw	100
  3617  0B6D  00F0               	movwf	?_Delay
  3618  0B6E  01F1               	clrf	?_Delay+1
  3619  0B6F  2301  3188         	fcall	_Delay
  3620                           
  3621                           ;mypic.h: 794: gBatteryVoltage = GetBatteryVoltage();
  3622  0B71  2453  3188         	fcall	_GetBatteryVoltage
  3623  0B73  085B               	movf	?_GetBatteryVoltage+1,w
  3624  0B74  00B7               	movwf	_gBatteryVoltage+1
  3625                           
  3626                           ;mypic.h: 795: if(gBatteryVoltage > *(BatteryStandard + 1) - TemBase + TemVoltage - ADBa
      +                          se + ADVoltage)
  3627  0B75  2664  3188         	fcall	PL6	;call to abstracted procedure
  3628  0B77  263A  3188         	fcall	PL3	;call to abstracted procedure
  3629  0B79  0837               	movf	_gBatteryVoltage+1,w
  3630  0B7A  0261               	subwf	??_SwitchBatteryState+5,w
  3631  0B7B  1D03               	skipz
  3632  0B7C  2B7F               	goto	u3285
  3633  0B7D  0836               	movf	_gBatteryVoltage,w
  3634  0B7E  0260               	subwf	??_SwitchBatteryState+4,w
  3635  0B7F                     u3285:	
  3636  0B7F  1803               	skipnc
  3637  0B80  0008               	return
  3638  0B81                     l5556:	
  3639                           
  3640                           ;mypic.h: 796: {
  3641                           ;mypic.h: 797: BatteryState = BatteryStateSwitch(gBatteryVoltage);
  3642  0B81  0837               	movf	_gBatteryVoltage+1,w
  3643  0B82  00F1               	movwf	?_BatteryStateSwitch+1
  3644  0B83  0836               	movf	_gBatteryVoltage,w
  3645  0B84  00F0               	movwf	?_BatteryStateSwitch
  3646  0B85  245A               	fcall	_BatteryStateSwitch
  3647  0B86  00BE               	movwf	_BatteryState
  3648  0B87  0008               	return
  3649  0B88                     l5558:	
  3650                           
  3651                           ;mypic.h: 803: {
  3652                           ;mypic.h: 805: if(BatteryLastState != 2)
  3653  0B88  083C               	movf	_BatteryLastState,w
  3654  0B89  3A02               	xorlw	2
  3655  0B8A  1903               	skipnz
  3656  0B8B  2B91               	goto	l5570
  3657                           
  3658                           ;mypic.h: 806: {
  3659                           ;mypic.h: 808: EnhanceChargeFlag = 0;
  3660  0B8C  10EB               	bcf	_EnhanceChargeFlag/(0+8),_EnhanceChargeFlag& (0+7)
  3661                           
  3662                           ;mypic.h: 809: EnhanceCharge_Time = 0;
  3663                           
  3664                           ;mypic.h: 810: EqualizingChargeFlag = 0;
  3665                           
  3666                           ;mypic.h: 811: EqualizingCharge_Time = 0;
  3667                           
  3668                           ;mypic.h: 812: FloatingChargeFlag = 0;
  3669  0B8D  266F  3188         	fcall	PL8	;call to abstracted procedure
  3670                           
  3671                           ;mypic.h: 813: BatteryLastState = 2;
  3672  0B8F  3002               	movlw	2
  3673  0B90  00BC               	movwf	_BatteryLastState
  3674  0B91                     l5570:	
  3675                           
  3676                           ;mypic.h: 814: }
  3677                           ;mypic.h: 815: if(PVState == 1)
  3678  0B91  1C6C               	btfss	_PVState/(0+8),_PVState& (0+7)
  3679  0B92  2BAC               	goto	l2385
  3680                           
  3681                           ;mypic.h: 816: {
  3682                           ;mypic.h: 817: ClampVoltage = *(BatteryStandard + 7) - TemBase + TemVoltage - ADBase + A
      +                          DVoltage;
  3683  0B93  083D               	movf	_BatteryStandard,w
  3684  0B94  3E0E               	addlw	14
  3685  0B95  264D  3188         	fcall	PL4	;call to abstracted procedure
  3686                           
  3687                           ;mypic.h: 818: if(EqualizingChargeFlag == 0)
  3688  0B97  196B               	btfsc	_EqualizingChargeFlag/(0+8),_EqualizingChargeFlag& (0+7)
  3689  0B98  2B9C               	goto	l5584
  3690                           
  3691                           ;mypic.h: 819: {
  3692                           ;mypic.h: 820: EqualizingChargeFlag = 1;
  3693  0B99  156B               	bsf	_EqualizingChargeFlag/(0+8),_EqualizingChargeFlag& (0+7)
  3694                           
  3695                           ;mypic.h: 821: EqualizingCharge_Time = 0;
  3696  0B9A  01A8               	clrf	_EqualizingCharge_Time
  3697  0B9B  01A9               	clrf	_EqualizingCharge_Time+1
  3698  0B9C                     l5584:	
  3699                           
  3700                           ;mypic.h: 822: }
  3701                           ;mypic.h: 823: gBatteryVoltage = GetBatteryVoltage();
  3702  0B9C  2453  3188         	fcall	_GetBatteryVoltage
  3703                           
  3704                           ;mypic.h: 824: if(gBatteryVoltage < *(BatteryStandard + 0) - TemBase + TemVoltage - ADBa
      +                          se + ADVoltage)
  3705  0B9E  2694  3188         	fcall	PL13	;call to abstracted procedure
  3706  0BA0  263A  3188         	fcall	PL3	;call to abstracted procedure
  3707  0BA2  0237               	subwf	_gBatteryVoltage+1,w
  3708  0BA3  1D03               	skipz
  3709  0BA4  2BA7               	goto	u3325
  3710  0BA5  0860               	movf	??_SwitchBatteryState+4,w
  3711  0BA6  0236               	subwf	_gBatteryVoltage,w
  3712  0BA7                     u3325:	
  3713  0BA7  1803               	skipnc
  3714  0BA8  2BB8               	goto	l5596
  3715                           
  3716                           ;mypic.h: 825: {
  3717                           ;mypic.h: 826: BatteryState = 1;
  3718  0BA9  01BE               	clrf	_BatteryState
  3719  0BAA  0ABE               	incf	_BatteryState,f
  3720  0BAB  2BB8               	goto	l5596
  3721  0BAC                     l2385:	
  3722                           
  3723                           ;mypic.h: 829: else
  3724                           ;mypic.h: 830: {
  3725                           ;mypic.h: 831: EqualizingChargeFlag = 0;
  3726  0BAC  116B               	bcf	_EqualizingChargeFlag/(0+8),_EqualizingChargeFlag& (0+7)
  3727                           
  3728                           ;mypic.h: 832: EqualizingCharge_Time = 0;
  3729  0BAD  01A8               	clrf	_EqualizingCharge_Time
  3730  0BAE  01A9               	clrf	_EqualizingCharge_Time+1
  3731                           
  3732                           ;mypic.h: 833: gBatteryVoltage = GetBatteryVoltage();
  3733  0BAF  2453  3188         	fcall	_GetBatteryVoltage
  3734  0BB1  26B8  3188         	fcall	PL20	;call to abstracted procedure
  3735  0BB3                     L2:	
  3736                           
  3737                           ;mypic.h: 834: BatteryState = BatteryStateSwitch(gBatteryVoltage);
  3738  0BB3  26C2  3188         	fcall	PL22	;call to abstracted procedure
  3739  0BB5  245A  3188         	fcall	_BatteryStateSwitch
  3740  0BB7  00BE               	movwf	_BatteryState
  3741  0BB8                     l5596:	
  3742                           
  3743                           ;mypic.h: 835: }
  3744                           ;mypic.h: 837: if(EqualizingCharge_Time >= 36000)
  3745  0BB8  308C               	movlw	140
  3746  0BB9  0229               	subwf	_EqualizingCharge_Time+1,w
  3747  0BBA  30A0               	movlw	160
  3748  0BBB  1903               	skipnz
  3749  0BBC  0228               	subwf	_EqualizingCharge_Time,w
  3750  0BBD  1C03               	skipc
  3751  0BBE  0008               	return
  3752                           
  3753                           ;mypic.h: 838: {
  3754                           ;mypic.h: 839: EqualizingChargeFlag = 0;
  3755  0BBF  116B               	bcf	_EqualizingChargeFlag/(0+8),_EqualizingChargeFlag& (0+7)
  3756                           
  3757                           ;mypic.h: 840: EqualizingCharge_Time = 0;
  3758  0BC0  01A8               	clrf	_EqualizingCharge_Time
  3759  0BC1  01A9               	clrf	_EqualizingCharge_Time+1
  3760                           
  3761                           ;mypic.h: 841: Delay(100);
  3762  0BC2  3064               	movlw	100
  3763  0BC3  00F0               	movwf	?_Delay
  3764  0BC4  01F1               	clrf	?_Delay+1
  3765  0BC5  2301  3188         	fcall	_Delay
  3766  0BC7                     l5604:	
  3767                           
  3768                           ;mypic.h: 842: gBatteryVoltage = GetBatteryVoltage();
  3769  0BC7  2453  3188         	fcall	_GetBatteryVoltage
  3770  0BC9  26B8  3188         	fcall	PL20	;call to abstracted procedure
  3771  0BCB  2B81               	goto	l5556
  3772  0BCC                     l5608:	
  3773                           
  3774                           ;mypic.h: 849: {
  3775                           ;mypic.h: 850: if(BatteryLastState != 3)
  3776  0BCC  083C               	movf	_BatteryLastState,w
  3777  0BCD  3A03               	xorlw	3
  3778  0BCE  1903               	skipnz
  3779  0BCF  2BD5               	goto	l5620
  3780                           
  3781                           ;mypic.h: 851: {
  3782                           ;mypic.h: 853: EnhanceChargeFlag = 0;
  3783  0BD0  10EB               	bcf	_EnhanceChargeFlag/(0+8),_EnhanceChargeFlag& (0+7)
  3784                           
  3785                           ;mypic.h: 854: EnhanceCharge_Time = 0;
  3786                           
  3787                           ;mypic.h: 855: EqualizingChargeFlag = 0;
  3788                           
  3789                           ;mypic.h: 856: EqualizingCharge_Time = 0;
  3790                           
  3791                           ;mypic.h: 857: FloatingChargeFlag = 0;
  3792  0BD1  266F  3188         	fcall	PL8	;call to abstracted procedure
  3793                           
  3794                           ;mypic.h: 858: BatteryLastState = 3;
  3795  0BD3  3003               	movlw	3
  3796  0BD4  00BC               	movwf	_BatteryLastState
  3797  0BD5                     l5620:	
  3798                           
  3799                           ;mypic.h: 860: }
  3800                           ;mypic.h: 861: if(PVState == 1)
  3801  0BD5  1C6C               	btfss	_PVState/(0+8),_PVState& (0+7)
  3802  0BD6  2BAC               	goto	l2385
  3803                           
  3804                           ;mypic.h: 862: {
  3805                           ;mypic.h: 863: ClampVoltage = *(BatteryStandard + 7) - TemBase + TemVoltage - ADBase + A
      +                          DVoltage;
  3806  0BD7  083D               	movf	_BatteryStandard,w
  3807  0BD8  3E0E               	addlw	14
  3808  0BD9  264D  3188         	fcall	PL4	;call to abstracted procedure
  3809                           
  3810                           ;mypic.h: 864: if(EqualizingChargeFlag == 0)
  3811  0BDB  196B               	btfsc	_EqualizingChargeFlag/(0+8),_EqualizingChargeFlag& (0+7)
  3812  0BDC  2BE0               	goto	l5634
  3813                           
  3814                           ;mypic.h: 865: {
  3815                           ;mypic.h: 866: EqualizingChargeFlag = 1;
  3816  0BDD  156B               	bsf	_EqualizingChargeFlag/(0+8),_EqualizingChargeFlag& (0+7)
  3817                           
  3818                           ;mypic.h: 867: EqualizingCharge_Time = 0;
  3819  0BDE  01A8               	clrf	_EqualizingCharge_Time
  3820  0BDF  01A9               	clrf	_EqualizingCharge_Time+1
  3821  0BE0                     l5634:	
  3822                           
  3823                           ;mypic.h: 868: }
  3824                           ;mypic.h: 869: gBatteryVoltage = GetBatteryVoltage();
  3825  0BE0  2453  3188         	fcall	_GetBatteryVoltage
  3826                           
  3827                           ;mypic.h: 870: if(gBatteryVoltage < *(BatteryStandard + 1) - TemBase + TemVoltage - ADBa
      +                          se + ADVoltage)
  3828  0BE2  2694  3188         	fcall	PL13	;call to abstracted procedure
  3829  0BE4  3E02               	addlw	2
  3830  0BE5  2BFF               	goto	L3
  3831  0BE6                     l5658:	
  3832                           ;mypic.h: 881: }
  3833                           ;mypic.h: 883: if(EqualizingCharge_Time >= 36000)
  3834                           
  3835                           ;mypic.h: 871: {
  3836                           ;mypic.h: 872: BatteryState = BatteryStateSwitch(gBatteryVoltage);
  3837                           
  3838                           ;mypic.h: 879: gBatteryVoltage = GetBatteryVoltage();
  3839                           
  3840                           ;mypic.h: 878: EqualizingCharge_Time = 0;
  3841                           
  3842                           ;mypic.h: 875: else
  3843                           ;mypic.h: 876: {
  3844                           ;mypic.h: 877: EqualizingChargeFlag = 0;
  3845                           
  3846                           
  3847                           ;mypic.h: 895: {
  3848                           ;mypic.h: 896: if(BatteryLastState != 4)
  3849  0BE6  083C               	movf	_BatteryLastState,w
  3850  0BE7  3A04               	xorlw	4
  3851  0BE8  1903               	skipnz
  3852  0BE9  2BEF               	goto	l5670
  3853                           
  3854                           ;mypic.h: 897: {
  3855                           ;mypic.h: 899: EnhanceChargeFlag = 0;
  3856  0BEA  10EB               	bcf	_EnhanceChargeFlag/(0+8),_EnhanceChargeFlag& (0+7)
  3857                           
  3858                           ;mypic.h: 900: EnhanceCharge_Time = 0;
  3859                           
  3860                           ;mypic.h: 901: EqualizingChargeFlag = 0;
  3861                           
  3862                           ;mypic.h: 902: EqualizingCharge_Time = 0;
  3863                           
  3864                           ;mypic.h: 903: FloatingChargeFlag = 0;
  3865  0BEB  266F  3188         	fcall	PL8	;call to abstracted procedure
  3866                           
  3867                           ;mypic.h: 904: BatteryLastState = 4;
  3868  0BED  3004               	movlw	4
  3869  0BEE  00BC               	movwf	_BatteryLastState
  3870  0BEF                     l5670:	
  3871                           
  3872                           ;mypic.h: 906: }
  3873                           ;mypic.h: 907: if(PVState == 1)
  3874  0BEF  1C6C               	btfss	_PVState/(0+8),_PVState& (0+7)
  3875  0BF0  2BAC               	goto	l2385
  3876                           
  3877                           ;mypic.h: 908: {
  3878                           ;mypic.h: 909: ClampVoltage = *(BatteryStandard + 7) - TemBase + TemVoltage - ADBase + A
      +                          DVoltage;
  3879  0BF1  083D               	movf	_BatteryStandard,w
  3880  0BF2  3E0E               	addlw	14
  3881  0BF3  264D  3188         	fcall	PL4	;call to abstracted procedure
  3882                           
  3883                           ;mypic.h: 910: if(EqualizingChargeFlag == 0)
  3884  0BF5  196B               	btfsc	_EqualizingChargeFlag/(0+8),_EqualizingChargeFlag& (0+7)
  3885  0BF6  2BFA               	goto	l5684
  3886                           
  3887                           ;mypic.h: 911: {
  3888                           ;mypic.h: 912: EqualizingChargeFlag = 1;
  3889  0BF7  156B               	bsf	_EqualizingChargeFlag/(0+8),_EqualizingChargeFlag& (0+7)
  3890                           
  3891                           ;mypic.h: 913: EqualizingCharge_Time = 0;
  3892  0BF8  01A8               	clrf	_EqualizingCharge_Time
  3893  0BF9  01A9               	clrf	_EqualizingCharge_Time+1
  3894  0BFA                     l5684:	
  3895                           
  3896                           ;mypic.h: 914: }
  3897                           ;mypic.h: 915: gBatteryVoltage = GetBatteryVoltage();
  3898  0BFA  2453  3188         	fcall	_GetBatteryVoltage
  3899                           
  3900                           ;mypic.h: 916: if(gBatteryVoltage < *(BatteryStandard + 3) - TemBase + TemVoltage - ADBa
      +                          se + ADVoltage)
  3901  0BFC  2694  3188         	fcall	PL13	;call to abstracted procedure
  3902  0BFE  3E06               	addlw	6
  3903  0BFF                     L3:	
  3904  0BFF  263A  3188         	fcall	PL3	;call to abstracted procedure
  3905  0C01  0237               	subwf	_gBatteryVoltage+1,w
  3906  0C02  1D03               	skipz
  3907  0C03  2C06               	goto	u3425
  3908  0C04  0860               	movf	??_SwitchBatteryState+4,w
  3909  0C05  0236               	subwf	_gBatteryVoltage,w
  3910  0C06                     u3425:	
  3911  0C06  1C03               	btfss	3,0
  3912  0C07  2BB3               	goto	L2
  3913  0C08  2BB8               	goto	l5596
  3914  0C09                     l5708:	
  3915                           ;mypic.h: 927: }
  3916                           ;mypic.h: 929: if(EqualizingCharge_Time >= 36000)
  3917                           
  3918                           ;mypic.h: 917: {
  3919                           ;mypic.h: 918: BatteryState = BatteryStateSwitch(gBatteryVoltage);
  3920                           
  3921                           ;mypic.h: 925: gBatteryVoltage = GetBatteryVoltage();
  3922                           
  3923                           ;mypic.h: 924: EqualizingCharge_Time = 0;
  3924                           
  3925                           ;mypic.h: 921: else
  3926                           ;mypic.h: 922: {
  3927                           ;mypic.h: 923: EqualizingChargeFlag = 0;
  3928                           
  3929                           
  3930                           ;mypic.h: 941: {
  3931                           ;mypic.h: 942: if(BatteryLastState != 5)
  3932  0C09  083C               	movf	_BatteryLastState,w
  3933  0C0A  3A05               	xorlw	5
  3934  0C0B  1903               	skipnz
  3935  0C0C  2C12               	goto	l5720
  3936                           
  3937                           ;mypic.h: 943: {
  3938                           ;mypic.h: 945: EnhanceChargeFlag = 0;
  3939  0C0D  10EB               	bcf	_EnhanceChargeFlag/(0+8),_EnhanceChargeFlag& (0+7)
  3940                           
  3941                           ;mypic.h: 946: EnhanceCharge_Time = 0;
  3942                           
  3943                           ;mypic.h: 947: EqualizingChargeFlag = 0;
  3944                           
  3945                           ;mypic.h: 948: EqualizingCharge_Time = 0;
  3946                           
  3947                           ;mypic.h: 949: FloatingChargeFlag = 0;
  3948  0C0E  266F  3188         	fcall	PL8	;call to abstracted procedure
  3949                           
  3950                           ;mypic.h: 950: BatteryLastState = 5;
  3951  0C10  3005               	movlw	5
  3952  0C11  00BC               	movwf	_BatteryLastState
  3953  0C12                     l5720:	
  3954                           
  3955                           ;mypic.h: 951: }
  3956                           ;mypic.h: 952: if(PVState == 1)
  3957  0C12  1C6C               	btfss	_PVState/(0+8),_PVState& (0+7)
  3958  0C13  2C1A               	goto	l2406
  3959                           
  3960                           ;mypic.h: 953: {
  3961                           ;mypic.h: 954: ClampVoltage = *(BatteryStandard + 8) - TemBase + TemVoltage - ADBase + A
      +                          DVoltage;
  3962  0C14  083D               	movf	_BatteryStandard,w
  3963  0C15  3E10               	addlw	16
  3964  0C16  264D  3188         	fcall	PL4	;call to abstracted procedure
  3965                           
  3966                           ;mypic.h: 955: FloatingChargeFlag = 1;
  3967  0C18  15EB               	bsf	_FloatingChargeFlag/(0+8),_FloatingChargeFlag& (0+7)
  3968                           
  3969                           ;mypic.h: 956: }
  3970  0C19  2BC7               	goto	l5604
  3971  0C1A                     l2406:	
  3972                           
  3973                           ;mypic.h: 957: else
  3974                           ;mypic.h: 958: {
  3975                           ;mypic.h: 959: FloatingChargeFlag = 0;
  3976  0C1A  11EB               	bcf	_FloatingChargeFlag/(0+8),_FloatingChargeFlag& (0+7)
  3977  0C1B  2BC7               	goto	l5604
  3978  0C1C                     l5734:	
  3979                           
  3980                           ;mypic.h: 967: {
  3981                           ;mypic.h: 968: if(BatteryLastState != 6)
  3982  0C1C  083C               	movf	_BatteryLastState,w
  3983  0C1D  3A06               	xorlw	6
  3984  0C1E  1903               	skipnz
  3985  0C1F  2C2E               	goto	l5756
  3986                           
  3987                           ;mypic.h: 969: {
  3988                           ;mypic.h: 970: ClampVoltage = 0;
  3989  0C20  01A4               	clrf	_ClampVoltage
  3990  0C21  01A5               	clrf	_ClampVoltage+1
  3991                           
  3992                           ;mypic.h: 971: TMR2IE = 0;
  3993  0C22  0021               	movlb	1	; select bank1
  3994  0C23  1091               	bcf	17,1
  3995                           
  3996                           ;mypic.h: 972: T2Flag = 0;
  3997  0C24  0020               	movlb	0	; select bank0
  3998  0C25  11EC               	bcf	_T2Flag/(0+8),_T2Flag& (0+7)
  3999                           
  4000                           ;mypic.h: 973: PWMFlag = 0;
  4001  0C26  116C               	bcf	_PWMFlag/(0+8),_PWMFlag& (0+7)
  4002                           
  4003                           ;mypic.h: 974: (PORTB |= (1 << 0));
  4004  0C27  140D               	bsf	13,0	;volatile
  4005                           
  4006                           ;mypic.h: 975: (PORTA |= (1 << 0));
  4007  0C28  140C               	bsf	12,0	;volatile
  4008                           
  4009                           ;mypic.h: 977: EnhanceChargeFlag = 0;
  4010  0C29  10EB               	bcf	_EnhanceChargeFlag/(0+8),_EnhanceChargeFlag& (0+7)
  4011                           
  4012                           ;mypic.h: 978: EnhanceCharge_Time = 0;
  4013                           
  4014                           ;mypic.h: 979: EqualizingChargeFlag = 0;
  4015                           
  4016                           ;mypic.h: 980: EqualizingCharge_Time = 0;
  4017                           
  4018                           ;mypic.h: 981: FloatingChargeFlag = 0;
  4019  0C2A  266F  3188         	fcall	PL8	;call to abstracted procedure
  4020                           
  4021                           ;mypic.h: 982: BatteryLastState = 6;
  4022  0C2C  3006               	movlw	6
  4023  0C2D  00BC               	movwf	_BatteryLastState
  4024  0C2E                     l5756:	
  4025                           
  4026                           ;mypic.h: 983: }
  4027                           ;mypic.h: 984: gBatteryVoltage = GetBatteryVoltage();
  4028  0C2E  2453  3188         	fcall	_GetBatteryVoltage
  4029                           
  4030                           ;mypic.h: 985: if(gBatteryVoltage < *(BatteryStandard + 5) - TemBase + TemVoltage - ADBa
      +                          se + ADVoltage)
  4031  0C30  2694  3188         	fcall	PL13	;call to abstracted procedure
  4032  0C32  3E0A               	addlw	10
  4033  0C33  263A  3188         	fcall	PL3	;call to abstracted procedure
  4034  0C35  0237               	subwf	_gBatteryVoltage+1,w
  4035  0C36  1D03               	skipz
  4036  0C37  2B7F               	goto	u3285
  4037  0C38  0860               	movf	??_SwitchBatteryState+4,w
  4038  0C39  0236               	subwf	_gBatteryVoltage,w
  4039  0C3A  2B7F               	goto	u3285
  4040  0C3B                     l5762:	
  4041  0C3B  083E               	movf	_BatteryState,w
  4042                           
  4043                           ; Switch size 1, requested type "space"
  4044                           ; Number of cases is 8, Range of values is 0 to 7
  4045                           ; switch strategies available:
  4046                           ; Name         Bytes Cycles
  4047                           ; simple_byte    25    13 (average)
  4048                           ; direct_byte    32    16 (fixed)
  4049                           ;	Chosen strategy is simple_byte
  4050  0C3C  3A00               	xorlw	0	; case 0
  4051  0C3D  1903               	skipnz
  4052  0C3E  2B1A               	goto	l5488
  4053  0C3F  3A01               	xorlw	1	; case 1
  4054  0C40  1903               	skipnz
  4055  0C41  2B2A               	goto	l5506
  4056  0C42  3A03               	xorlw	3	; case 2
  4057  0C43  1903               	skipnz
  4058  0C44  2B88               	goto	l5558
  4059  0C45  3A01               	xorlw	1	; case 3
  4060  0C46  1903               	skipnz
  4061  0C47  2BCC               	goto	l5608
  4062  0C48  3A07               	xorlw	7	; case 4
  4063  0C49  1903               	skipnz
  4064  0C4A  2BE6               	goto	l5658
  4065  0C4B  3A01               	xorlw	1	; case 5
  4066  0C4C  1903               	skipnz
  4067  0C4D  2C09               	goto	l5708
  4068  0C4E  3A03               	xorlw	3	; case 6
  4069  0C4F  1903               	skipnz
  4070  0C50  2C1C               	goto	l5734
  4071  0C51  3A01               	xorlw	1	; case 7
  4072  0C52  0008               	return
  4073  0C53                     __end_of_SwitchBatteryState:	
  4074  0C53                     __ptext592:	
  4075 ;; =============== function _GetSolarPanelVoltage ends ============
  4076                           
  4077                           
  4078 ;; *************** function _GetBatteryVoltage *****************
  4079 ;; Defined at:
  4080 ;;		line 390 in file "C:\CTK\CTK80A 150928\CTK80A_Jas\mypic.h"
  4081 ;; Parameters:    Size  Location     Type
  4082 ;;		None
  4083 ;; Auto vars:     Size  Location     Type
  4084 ;;  channel         1    0        unsigned char 
  4085 ;; Return value:  Size  Location     Type
  4086 ;;                  2   15[BANK0 ] unsigned int 
  4087 ;; Registers used:
  4088 ;;		wreg, status,2, status,0, pclath, cstack
  4089 ;; Tracked objects:
  4090 ;;		On entry : 1D/2
  4091 ;;		On exit  : 1F/0
  4092 ;;		Unchanged: FFFE0/0
  4093 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4094 ;;      Params:         0       2       0       0
  4095 ;;      Locals:         1       0       0       0
  4096 ;;      Temps:          0       0       0       0
  4097 ;;      Totals:         1       2       0       0
  4098 ;;Total ram usage:        3 bytes
  4099 ;; Hardware stack levels used:    1
  4100 ;; Hardware stack levels required when called:    4
  4101 ;; This function calls:
  4102 ;;		_getADValue
  4103 ;; This function is called by:
  4104 ;;		_PWMCharge
  4105 ;;		_SwitchBatteryState
  4106 ;;		_KaiJi
  4107 ;; This function uses a non-reentrant model
  4108 ;;
  4109  0C53                     _GetBatteryVoltage:	
  4110                           
  4111                           ;mypic.h: 392: return getADValue(channel);
  4112                           
  4113                           ; Regs used in _GetBatteryVoltage: [wreg+status,2+status,0+pclath+cstack]
  4114  0C53  3029               	movlw	41
  4115  0C54  2534               	fcall	_getADValue
  4116  0C55  084C               	movf	?_getADValue+1,w
  4117  0C56  00DB               	movwf	?_GetBatteryVoltage+1
  4118  0C57  084B               	movf	?_getADValue,w
  4119  0C58  00DA               	movwf	?_GetBatteryVoltage
  4120  0C59  0008               	return
  4121  0C5A                     __end_of_GetBatteryVoltage:	
  4122  0C5A                     __ptext610:	
  4123 ;; =============== function _LedDisplay ends ============
  4124                           
  4125                           
  4126 ;; *************** function _BatteryStateSwitch *****************
  4127 ;; Defined at:
  4128 ;;		line 696 in file "C:\CTK\CTK80A 150928\CTK80A_Jas\mypic.h"
  4129 ;; Parameters:    Size  Location     Type
  4130 ;;  BatteryVolta    2    0[COMMON] unsigned int 
  4131 ;; Auto vars:     Size  Location     Type
  4132 ;;  adjust          2    6[COMMON] unsigned int 
  4133 ;; Return value:  Size  Location     Type
  4134 ;;                  1    wreg      unsigned char 
  4135 ;; Registers used:
  4136 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4137 ;; Tracked objects:
  4138 ;;		On entry : 1F/0
  4139 ;;		On exit  : 1F/0
  4140 ;;		Unchanged: FFFE0/0
  4141 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4142 ;;      Params:         2       0       0       0
  4143 ;;      Locals:         2       0       0       0
  4144 ;;      Temps:          4       0       0       0
  4145 ;;      Totals:         8       0       0       0
  4146 ;;Total ram usage:        8 bytes
  4147 ;; Hardware stack levels used:    1
  4148 ;; Hardware stack levels required when called:    1
  4149 ;; This function calls:
  4150 ;;		Nothing
  4151 ;; This function is called by:
  4152 ;;		_SwitchBatteryState
  4153 ;; This function uses a non-reentrant model
  4154 ;;
  4155  0C5A                     _BatteryStateSwitch:	
  4156                           
  4157                           ;mypic.h: 697: unsigned int adjust = (TemVoltage + ADVoltage - TemBase - ADBase );
  4158                           
  4159                           ; Regs used in _BatteryStateSwitch: [wreg+fsr1l-status,0]
  4160  0C5A  0920               	comf	_ADBase,w
  4161  0C5B  00F2               	movwf	??_BatteryStateSwitch
  4162  0C5C  0921               	comf	_ADBase+1,w
  4163  0C5D  00F3               	movwf	??_BatteryStateSwitch+1
  4164  0C5E  0AF2               	incf	??_BatteryStateSwitch,f
  4165  0C5F  1903               	skipnz
  4166  0C60  0AF3               	incf	??_BatteryStateSwitch+1,f
  4167  0C61  0872               	movf	??_BatteryStateSwitch,w
  4168  0C62  00F6               	movwf	BatteryStateSwitch@adjust
  4169  0C63  0873               	movf	??_BatteryStateSwitch+1,w
  4170  0C64  00F7               	movwf	BatteryStateSwitch@adjust+1
  4171  0C65  0822               	movf	_ADVoltage,w
  4172  0C66  07F6               	addwf	BatteryStateSwitch@adjust,f
  4173  0C67  0823               	movf	_ADVoltage+1,w
  4174  0C68  3DF7               	addwfc	BatteryStateSwitch@adjust+1,f
  4175                           
  4176                           ;mypic.h: 698: if(BatteryVoltage < *(BatteryStandard + 0) + adjust){
  4177  0C69  083D               	movf	_BatteryStandard,w
  4178  0C6A  2628  3188         	fcall	PL2	;call to abstracted procedure
  4179  0C6C  1C03               	btfss	3,0
  4180                           
  4181                           ;mypic.h: 699: return 1;
  4182  0C6D  3401               	retlw	1
  4183                           
  4184                           ;mypic.h: 701: && BatteryVoltage < (*(BatteryStandard + 2) + adjust)){
  4185  0C6E  083D               	movf	_BatteryStandard,w
  4186  0C6F  2628  3188         	fcall	PL2	;call to abstracted procedure
  4187  0C71  083D               	movf	_BatteryStandard,w
  4188  0C72  1C03               	skipc
  4189  0C73  2C7A               	goto	L5
  4190  0C74  3E04               	addlw	4
  4191  0C75  2628  3188         	fcall	PL2	;call to abstracted procedure
  4192  0C77  1C03               	btfss	3,0
  4193                           
  4194                           ;mypic.h: 702: return 2;
  4195  0C78  3402               	retlw	2
  4196                           
  4197                           ;mypic.h: 704: && BatteryVoltage <( *(BatteryStandard + 1) + adjust)){
  4198  0C79  083D               	movf	_BatteryStandard,w
  4199  0C7A                     L5:	
  4200  0C7A  3E04               	addlw	4
  4201  0C7B  2628  3188         	fcall	PL2	;call to abstracted procedure
  4202  0C7D  083D               	movf	_BatteryStandard,w
  4203  0C7E  1C03               	skipc
  4204  0C7F  2C86               	goto	L6
  4205  0C80  3E02               	addlw	2
  4206  0C81  2628  3188         	fcall	PL2	;call to abstracted procedure
  4207  0C83  1C03               	btfss	3,0
  4208                           
  4209                           ;mypic.h: 705: return 3;
  4210  0C84  3403               	retlw	3
  4211                           
  4212                           ;mypic.h: 707: && BatteryVoltage < (*(BatteryStandard + 3) + adjust)){
  4213  0C85  083D               	movf	_BatteryStandard,w
  4214  0C86                     L6:	
  4215  0C86  3E02               	addlw	2
  4216  0C87  2628  3188         	fcall	PL2	;call to abstracted procedure
  4217  0C89  083D               	movf	_BatteryStandard,w
  4218  0C8A  1C03               	skipc
  4219  0C8B  2C92               	goto	L7
  4220  0C8C  3E06               	addlw	6
  4221  0C8D  2628  3188         	fcall	PL2	;call to abstracted procedure
  4222  0C8F  1C03               	btfss	3,0
  4223                           
  4224                           ;mypic.h: 708: return 4;
  4225  0C90  3404               	retlw	4
  4226                           
  4227                           ;mypic.h: 710: && BatteryVoltage < (*(BatteryStandard + 4) + adjust)){
  4228  0C91  083D               	movf	_BatteryStandard,w
  4229  0C92                     L7:	
  4230  0C92  3E06               	addlw	6
  4231  0C93  2628  3188         	fcall	PL2	;call to abstracted procedure
  4232  0C95  1C03               	skipc
  4233  0C96  3406               	retlw	6
  4234  0C97  083D               	movf	_BatteryStandard,w
  4235  0C98  3E08               	addlw	8
  4236  0C99  2628  3188         	fcall	PL2	;call to abstracted procedure
  4237  0C9B  1C03               	btfss	3,0
  4238                           
  4239                           ;mypic.h: 711: return 5;
  4240  0C9C  3405               	retlw	5
  4241                           
  4242                           ;mypic.h: 713: return 6;
  4243  0C9D  3406               	retlw	6
  4244  0C9E                     __end_of_BatteryStateSwitch:	
  4245  0C9E                     __ptext603:	
  4246 ;; =============== function _lcd_write_command ends ============
  4247                           
  4248                           
  4249 ;; *************** function _lcd_write_data *****************
  4250 ;; Defined at:
  4251 ;;		line 95 in file "C:\CTK\CTK80A 150928\CTK80A_Jas\LM016.h"
  4252 ;; Parameters:    Size  Location     Type
  4253 ;;  data            1    wreg     unsigned char 
  4254 ;; Auto vars:     Size  Location     Type
  4255 ;;  data            1    6[COMMON] unsigned char 
  4256 ;; Return value:  Size  Location     Type
  4257 ;;		None               void
  4258 ;; Registers used:
  4259 ;;		wreg, status,2, status,0, pclath, cstack
  4260 ;; Tracked objects:
  4261 ;;		On entry : 1F/0
  4262 ;;		On exit  : 1F/0
  4263 ;;		Unchanged: FFFE0/0
  4264 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4265 ;;      Params:         0       0       0       0
  4266 ;;      Locals:         1       0       0       0
  4267 ;;      Temps:          0       0       0       0
  4268 ;;      Totals:         1       0       0       0
  4269 ;;Total ram usage:        1 bytes
  4270 ;; Hardware stack levels used:    1
  4271 ;; Hardware stack levels required when called:    2
  4272 ;; This function calls:
  4273 ;;		_delay
  4274 ;; This function is called by:
  4275 ;;		_SwitchBatteryState
  4276 ;;		_lcd_print_line1
  4277 ;;		_lcd_print_line2
  4278 ;; This function uses a non-reentrant model
  4279 ;;
  4280  0C9E                     _lcd_write_data:	
  4281                           
  4282                           ; Regs used in _lcd_write_data: [wreg+status,2+status,0+pclath+cstack]
  4283                           ;lcd_write_data@data stored from wreg
  4284  0C9E  00F6               	movwf	lcd_write_data@data
  4285                           
  4286                           ;LM016.h: 96: RC1 = 1;
  4287  0C9F  148E               	bsf	14,1
  4288                           
  4289                           ;LM016.h: 97: RC2 = 0;
  4290  0CA0  110E               	bcf	14,2
  4291                           
  4292                           ;LM016.h: 98: PORTD = data;
  4293  0CA1  008F               	movwf	15	;volatile
  4294                           
  4295                           ;LM016.h: 102: delay(30);
  4296  0CA2  301E               	movlw	30
  4297  0CA3  00F0               	movwf	?_delay
  4298  0CA4  01F1               	clrf	?_delay+1
  4299  0CA5  21C5               	fcall	_delay
  4300                           
  4301                           ;LM016.h: 103: RC3 = 1;
  4302  0CA6  158E               	bsf	14,3
  4303                           
  4304                           ;LM016.h: 104: RC3 = 0;
  4305  0CA7  118E               	bcf	14,3
  4306  0CA8  0008               	return
  4307  0CA9                     __end_of_lcd_write_data:	
  4308  0CA9                     __ptext611:	
  4309 ;; =============== function _BatteryStateSwitch ends ============
  4310                           
  4311                           
  4312 ;; *************** function _SelectMode *****************
  4313 ;; Defined at:
  4314 ;;		line 420 in file "C:\CTK\CTK80A 150928\CTK80A_Jas\mypic.h"
  4315 ;; Parameters:    Size  Location     Type
  4316 ;;		None
  4317 ;; Auto vars:     Size  Location     Type
  4318 ;;		None
  4319 ;; Return value:  Size  Location     Type
  4320 ;;		None               void
  4321 ;; Registers used:
  4322 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4323 ;; Tracked objects:
  4324 ;;		On entry : 0/0
  4325 ;;		On exit  : 1F/0
  4326 ;;		Unchanged: FFFE0/0
  4327 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4328 ;;      Params:         0       0       0       0
  4329 ;;      Locals:         0       0       0       0
  4330 ;;      Temps:          0       0       0       0
  4331 ;;      Totals:         0       0       0       0
  4332 ;;Total ram usage:        0 bytes
  4333 ;; Hardware stack levels used:    1
  4334 ;; Hardware stack levels required when called:    1
  4335 ;; This function calls:
  4336 ;;		Nothing
  4337 ;; This function is called by:
  4338 ;;		_main
  4339 ;; This function uses a non-reentrant model
  4340 ;;
  4341  0CA9                     _SelectMode:	
  4342                           
  4343                           ;mypic.h: 421: switch(SystemModeType)
  4344                           
  4345                           ; Regs used in _SelectMode: [wreg-fsr0h+status,2+status,0]
  4346  0CA9  0020               	movlb	0	; select bank0
  4347  0CAA  086F               	movf	_SystemModeType,w
  4348                           
  4349                           ; Switch size 1, requested type "space"
  4350                           ; Number of cases is 4, Range of values is 1 to 5
  4351                           ; switch strategies available:
  4352                           ; Name         Bytes Cycles
  4353                           ; simple_byte    13     7 (average)
  4354                           ; direct_byte    29    19 (fixed)
  4355                           ;	Chosen strategy is simple_byte
  4356  0CAB  3A01               	xorlw	1	; case 1
  4357  0CAC  1903               	skipnz
  4358  0CAD  2CC9               	goto	l4706
  4359  0CAE  3A03               	xorlw	3	; case 2
  4360  0CAF  1903               	skipnz
  4361  0CB0  2CD3               	goto	l2296
  4362  0CB1  3A01               	xorlw	1	; case 3
  4363  0CB2  1903               	skipnz
  4364  0CB3  0008               	return
  4365  0CB4  3A06               	xorlw	6	; case 5
  4366  0CB5  1D03               	btfss	3,2
  4367  0CB6  0008               	return
  4368                           
  4369                           ;mypic.h: 424: {
  4370                           ;mypic.h: 425: if((DAYTIME == 0) && LightTime)
  4371                           
  4372                           ;mypic.h: 422: {
  4373                           ;mypic.h: 423: case 0X05:
  4374  0CB7  186B               	btfsc	_DAYTIME/(0+8),_DAYTIME& (0+7)
  4375  0CB8  2CCD               	goto	l2289
  4376  0CB9  0841               	movf	_LightTime,w
  4377  0CBA  1903               	btfsc	3,2
  4378  0CBB  2CCD               	goto	l2289
  4379                           
  4380                           ;mypic.h: 426: {
  4381                           ;mypic.h: 427: if(TimeModeHour >= 36000)
  4382  0CBC  308C               	movlw	140
  4383  0CBD  0233               	subwf	_TimeModeHour+1,w
  4384  0CBE  30A0               	movlw	160
  4385  0CBF  1903               	skipnz
  4386  0CC0  0232               	subwf	_TimeModeHour,w
  4387  0CC1  1C03               	skipc
  4388  0CC2  2CC6               	goto	l4704
  4389                           
  4390                           ;mypic.h: 428: {
  4391                           ;mypic.h: 429: TimeModeHour = 0;
  4392  0CC3  01B2               	clrf	_TimeModeHour
  4393  0CC4  01B3               	clrf	_TimeModeHour+1
  4394                           
  4395                           ;mypic.h: 430: LightTime--;
  4396  0CC5  03C1               	decf	_LightTime,f
  4397  0CC6                     l4704:	
  4398                           
  4399                           ;mypic.h: 431: }
  4400                           ;mypic.h: 432: if(LightTime != 0)
  4401  0CC6  0841               	movf	_LightTime,w
  4402  0CC7  1903               	btfsc	3,2
  4403  0CC8  2CCB               	goto	l2291
  4404  0CC9                     l4706:	
  4405                           
  4406                           ;mypic.h: 433: {
  4407                           ;mypic.h: 434: LoadOpen = 1;
  4408  0CC9  16EB               	bsf	_LoadOpen/(0+8),_LoadOpen& (0+7)
  4409                           
  4410                           ;mypic.h: 435: }
  4411  0CCA  0008               	return
  4412  0CCB                     l2291:	
  4413                           
  4414                           ;mypic.h: 436: else
  4415                           ;mypic.h: 437: {
  4416                           ;mypic.h: 438: LoadOpen = 0;
  4417  0CCB  12EB               	bcf	_LoadOpen/(0+8),_LoadOpen& (0+7)
  4418  0CCC  0008               	return
  4419  0CCD                     l2289:	
  4420                           
  4421                           ;mypic.h: 441: else if(DAYTIME == 1)
  4422  0CCD  1C6B               	btfss	_DAYTIME/(0+8),_DAYTIME& (0+7)
  4423  0CCE  0008               	return
  4424                           
  4425                           ;mypic.h: 442: {
  4426                           ;mypic.h: 443: LoadOpen = 0;
  4427  0CCF  12EB               	bcf	_LoadOpen/(0+8),_LoadOpen& (0+7)
  4428                           
  4429                           ;mypic.h: 445: TimeModeHour = 0;
  4430  0CD0  01B2               	clrf	_TimeModeHour
  4431  0CD1  01B3               	clrf	_TimeModeHour+1
  4432  0CD2  0008               	return
  4433  0CD3                     l2296:	
  4434                           ;mypic.h: 448: }
  4435                           ;mypic.h: 449: case 0x02:
  4436                           
  4437                           
  4438                           ;mypic.h: 450: {
  4439                           ;mypic.h: 451: if(DAYTIME == 0)
  4440  0CD3  1C6B               	btfss	_DAYTIME/(0+8),_DAYTIME& (0+7)
  4441  0CD4  2CC9               	goto	l4706
  4442                           
  4443                           ;mypic.h: 455: else if(DAYTIME == 1)
  4444  0CD5  1C6B               	btfss	_DAYTIME/(0+8),_DAYTIME& (0+7)
  4445  0CD6  0008               	return
  4446  0CD7  2CCB               	goto	l2291
  4447  0CD8                     __end_of_SelectMode:	
  4448  0CD8                     __ptext609:	
  4449 ;; =============== function ___wmul ends ============
  4450                           
  4451                           
  4452 ;; *************** function _LedDisplay *****************
  4453 ;; Defined at:
  4454 ;;		line 1130 in file "C:\CTK\CTK80A 150928\CTK80A_Jas\mypic.h"
  4455 ;; Parameters:    Size  Location     Type
  4456 ;;		None
  4457 ;; Auto vars:     Size  Location     Type
  4458 ;;		None
  4459 ;; Return value:  Size  Location     Type
  4460 ;;		None               void
  4461 ;; Registers used:
  4462 ;;		None
  4463 ;; Tracked objects:
  4464 ;;		On entry : 1F/0
  4465 ;;		On exit  : 1D/0
  4466 ;;		Unchanged: FFFE0/0
  4467 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4468 ;;      Params:         0       0       0       0
  4469 ;;      Locals:         0       0       0       0
  4470 ;;      Temps:          0       0       0       0
  4471 ;;      Totals:         0       0       0       0
  4472 ;;Total ram usage:        0 bytes
  4473 ;; Hardware stack levels used:    1
  4474 ;; Hardware stack levels required when called:    1
  4475 ;; This function calls:
  4476 ;;		Nothing
  4477 ;; This function is called by:
  4478 ;;		_main
  4479 ;; This function uses a non-reentrant model
  4480 ;;
  4481  0CD8                     _LedDisplay:	
  4482                           
  4483                           ;mypic.h: 1131: if(LoadFlag == 0)
  4484                           
  4485                           ; Regs used in _LedDisplay: []
  4486  0CD8  186E               	btfsc	_LoadFlag/(0+8),_LoadFlag& (0+7)
  4487  0CD9  2CDC               	goto	l2454
  4488                           
  4489                           ;mypic.h: 1132: {
  4490                           ;mypic.h: 1133: (LATB |= (1 << 7));
  4491  0CDA  0022               	movlb	2	; select bank2
  4492  0CDB  178D               	bsf	13,7	;volatile
  4493  0CDC                     l2454:	
  4494                           
  4495                           ;mypic.h: 1134: }
  4496                           ;mypic.h: 1135: if(LoadFlag == 1)
  4497  0CDC  0020               	movlb	0	; select bank0
  4498  0CDD  1C6E               	btfss	_LoadFlag/(0+8),_LoadFlag& (0+7)
  4499  0CDE  2CE1               	goto	l2455
  4500                           
  4501                           ;mypic.h: 1136: {
  4502                           ;mypic.h: 1137: (LATB &= ~(1 << 7));
  4503  0CDF  0022               	movlb	2	; select bank2
  4504  0CE0  138D               	bcf	13,7	;volatile
  4505  0CE1                     l2455:	
  4506                           
  4507                           ;mypic.h: 1138: }
  4508                           ;mypic.h: 1140: if(PVChargeFlag == 1)
  4509  0CE1  0020               	movlb	0	; select bank0
  4510  0CE2  1FEB               	btfss	_PVChargeFlag/(0+8),_PVChargeFlag& (0+7)
  4511  0CE3  2CE6               	goto	l2456
  4512                           
  4513                           ;mypic.h: 1141: {
  4514                           ;mypic.h: 1142: (LATB |= (1 << 6));
  4515  0CE4  0022               	movlb	2	; select bank2
  4516  0CE5  170D               	bsf	13,6	;volatile
  4517  0CE6                     l2456:	
  4518                           
  4519                           ;mypic.h: 1143: }
  4520                           ;mypic.h: 1144: if(PVChargeFlag == 0)
  4521  0CE6  0020               	movlb	0	; select bank0
  4522  0CE7  1BEB               	btfsc	_PVChargeFlag/(0+8),_PVChargeFlag& (0+7)
  4523  0CE8  0008               	return
  4524                           
  4525                           ;mypic.h: 1145: {
  4526                           ;mypic.h: 1146: (LATB &= ~(1 << 6));
  4527  0CE9  0022               	movlb	2	; select bank2
  4528  0CEA  130D               	bcf	13,6	;volatile
  4529  0CEB  0008               	return
  4530  0CEC                     __end_of_LedDisplay:	
  4531  0CEC                     __ptext605:	
  4532 ;; =============== function _getADValueOneTime ends ============
  4533                           
  4534                           
  4535 ;; *************** function _system_state_init *****************
  4536 ;; Defined at:
  4537 ;;		line 204 in file "C:\CTK\CTK80A 150928\CTK80A_Jas\mypic.h"
  4538 ;; Parameters:    Size  Location     Type
  4539 ;;		None
  4540 ;; Auto vars:     Size  Location     Type
  4541 ;;		None
  4542 ;; Return value:  Size  Location     Type
  4543 ;;		None               void
  4544 ;; Registers used:
  4545 ;;		wreg, status,2, status,0, pclath, cstack
  4546 ;; Tracked objects:
  4547 ;;		On entry : 17F/0
  4548 ;;		On exit  : 17F/0
  4549 ;;		Unchanged: FFE80/0
  4550 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4551 ;;      Params:         0       0       0       0
  4552 ;;      Locals:         0       0       0       0
  4553 ;;      Temps:          0       0       0       0
  4554 ;;      Totals:         0       0       0       0
  4555 ;;Total ram usage:        0 bytes
  4556 ;; Hardware stack levels used:    1
  4557 ;; Hardware stack levels required when called:    2
  4558 ;; This function calls:
  4559 ;;		_Delay
  4560 ;; This function is called by:
  4561 ;;		_main
  4562 ;; This function uses a non-reentrant model
  4563 ;;
  4564  0CEC                     _system_state_init:	
  4565                           
  4566                           ;mypic.h: 206: OSCCON = 0x70;
  4567                           
  4568                           ; Regs used in _system_state_init: [wreg+status,2+status,0+pclath+cstack]
  4569  0CEC  3070               	movlw	112
  4570  0CED  0021               	movlb	1	; select bank1
  4571  0CEE  0099               	movwf	25	;volatile
  4572                           
  4573                           ;mypic.h: 207: WDTCON = 0x18;
  4574  0CEF  3018               	movlw	24
  4575  0CF0  0097               	movwf	23	;volatile
  4576                           
  4577                           ;mypic.h: 210: TRISA = 0b00101010;
  4578  0CF1  302A               	movlw	42
  4579  0CF2  008C               	movwf	12	;volatile
  4580                           
  4581                           ;mypic.h: 211: TRISB = 0b00111110;
  4582  0CF3  303E               	movlw	62
  4583  0CF4  008D               	movwf	13	;volatile
  4584                           
  4585                           ;mypic.h: 212: TRISC = 0x00;
  4586  0CF5  018E               	clrf	14	;volatile
  4587                           
  4588                           ;mypic.h: 213: TRISD = 0x00;
  4589  0CF6  018F               	clrf	15	;volatile
  4590                           
  4591                           ;mypic.h: 214: TRISE = 0b00000010;
  4592  0CF7  3002               	movlw	2
  4593  0CF8  0090               	movwf	16	;volatile
  4594                           
  4595                           ;mypic.h: 216: ANSELA = 0b00101010;
  4596  0CF9  302A               	movlw	42
  4597  0CFA  0023               	movlb	3	; select bank3
  4598  0CFB  008C               	movwf	12	;volatile
  4599                           
  4600                           ;mypic.h: 217: ANSELB = 0b00000110;
  4601  0CFC  3006               	movlw	6
  4602  0CFD  008D               	movwf	13	;volatile
  4603                           
  4604                           ;mypic.h: 218: ANSELE = 0b00000010;
  4605  0CFE  3002               	movlw	2
  4606  0CFF  0090               	movwf	16	;volatile
  4607                           
  4608                           ;mypic.h: 228: TMR1H = (65536 - (100000 / 4)) >> 8;
  4609  0D00  309E               	movlw	158
  4610  0D01  0020               	movlb	0	; select bank0
  4611  0D02  0097               	movwf	23	;volatile
  4612                           
  4613                           ;mypic.h: 229: TMR1L = (65536 - (100000 / 4)) & 0xFF;
  4614  0D03  3058               	movlw	88
  4615  0D04  0096               	movwf	22	;volatile
  4616                           
  4617                           ;mypic.h: 230: PEIE = 1;
  4618  0D05  170B               	bsf	11,6
  4619                           
  4620                           ;mypic.h: 231: TMR1IF = 0;
  4621  0D06  1011               	bcf	17,0
  4622                           
  4623                           ;mypic.h: 232: TMR1IE = 1;
  4624  0D07  0021               	movlb	1	; select bank1
  4625  0D08  1411               	bsf	17,0
  4626                           
  4627                           ;mypic.h: 233: T1CON = 0x31;
  4628  0D09  3031               	movlw	49
  4629  0D0A  0020               	movlb	0	; select bank0
  4630  0D0B  0098               	movwf	24	;volatile
  4631                           
  4632                           ;mypic.h: 234: TMR0IE = 1;
  4633  0D0C  168B               	bsf	11,5
  4634                           
  4635                           ;mypic.h: 237: TMR2IF = 0;
  4636  0D0D  1091               	bcf	17,1
  4637                           
  4638                           ;mypic.h: 238: T2CON = 0x06;
  4639  0D0E  3006               	movlw	6
  4640  0D0F  009C               	movwf	28	;volatile
  4641                           
  4642                           ;mypic.h: 239: PR2 = 8;
  4643  0D10  3008               	movlw	8
  4644  0D11  009B               	movwf	27	;volatile
  4645                           
  4646                           ;mypic.h: 240: TMR2IE = 1;
  4647  0D12  0021               	movlb	1	; select bank1
  4648  0D13  1491               	bsf	17,1
  4649                           
  4650                           ;mypic.h: 244: TMR4IF = 0;
  4651  0D14  0020               	movlb	0	; select bank0
  4652  0D15  1093               	bcf	19,1
  4653                           
  4654                           ;mypic.h: 247: T4CON = 0b00000101;
  4655  0D16  3005               	movlw	5
  4656  0D17  0028               	movlb	8	; select bank8
  4657  0D18  0097               	movwf	23	;volatile
  4658                           
  4659                           ;mypic.h: 248: PR4 = 250;
  4660  0D19  30FA               	movlw	250
  4661  0D1A  0096               	movwf	22	;volatile
  4662                           
  4663                           ;mypic.h: 249: TMR4IE = 1;
  4664  0D1B  0021               	movlb	1	; select bank1
  4665  0D1C  1493               	bsf	19,1
  4666                           
  4667                           ;mypic.h: 262: IOCBP = 0x38;
  4668  0D1D  3038               	movlw	56
  4669  0D1E  0027               	movlb	7	; select bank7
  4670  0D1F  0094               	movwf	20	;volatile
  4671                           
  4672                           ;mypic.h: 263: IOCBN = 0x38;
  4673  0D20  0095               	movwf	21	;volatile
  4674                           
  4675                           ;mypic.h: 267: PEIE = 1;
  4676  0D21  170B               	bsf	11,6
  4677                           
  4678                           ;mypic.h: 268: GIE = 1;
  4679  0D22  178B               	bsf	11,7
  4680                           
  4681                           ;mypic.h: 271: (PORTA |= (1 << 0));
  4682  0D23  0020               	movlb	0	; select bank0
  4683  0D24  140C               	bsf	12,0	;volatile
  4684                           
  4685                           ;mypic.h: 272: (PORTB |= (1 << 0));
  4686  0D25  140D               	bsf	13,0	;volatile
  4687                           
  4688                           ;mypic.h: 273: (PORTA |= (1 << 4));
  4689  0D26  160C               	bsf	12,4	;volatile
  4690                           
  4691                           ;mypic.h: 274: LoadFlag = 1;
  4692  0D27  146E               	bsf	_LoadFlag/(0+8),_LoadFlag& (0+7)
  4693                           
  4694                           ;mypic.h: 275: LoadState = 1;
  4695  0D28  14EE               	bsf	_LoadState/(0+8),_LoadState& (0+7)
  4696                           
  4697                           ;mypic.h: 276: (PORTE |= (1 << 0));
  4698  0D29  1410               	bsf	16,0	;volatile
  4699                           
  4700                           ;mypic.h: 277: Delay(20);
  4701  0D2A  3014               	movlw	20
  4702  0D2B  00F0               	movwf	?_Delay
  4703  0D2C  01F1               	clrf	?_Delay+1
  4704  0D2D  2301  3188         	fcall	_Delay
  4705                           
  4706                           ;mypic.h: 278: (PORTE &= ~(1 << 0));
  4707  0D2F  1010               	bcf	16,0	;volatile
  4708                           
  4709                           ;mypic.h: 279: Delay(20);
  4710  0D30  3014               	movlw	20
  4711  0D31  00F0               	movwf	?_Delay
  4712  0D32  01F1               	clrf	?_Delay+1
  4713  0D33  2B01               	ljmp	l4660
  4714  0D34                     __end_of_system_state_init:	
  4715  0D34                     __ptext598:	
  4716 ;; =============== function _lcd_move_char ends ============
  4717                           
  4718                           
  4719 ;; *************** function _getADValue *****************
  4720 ;; Defined at:
  4721 ;;		line 372 in file "C:\CTK\CTK80A 150928\CTK80A_Jas\mypic.h"
  4722 ;; Parameters:    Size  Location     Type
  4723 ;;  channel         1    wreg     unsigned char 
  4724 ;; Auto vars:     Size  Location     Type
  4725 ;;  channel         1    4[BANK0 ] unsigned char 
  4726 ;;  AD_OneResult    2   13[BANK0 ] unsigned int 
  4727 ;;  i               2   11[BANK0 ] unsigned int 
  4728 ;;  min             2    9[BANK0 ] unsigned int 
  4729 ;;  max             2    7[BANK0 ] unsigned int 
  4730 ;;  AD_Result       2    5[BANK0 ] unsigned int 
  4731 ;; Return value:  Size  Location     Type
  4732 ;;                  2    0[BANK0 ] unsigned int 
  4733 ;; Registers used:
  4734 ;;		wreg, status,2, status,0, pclath, cstack
  4735 ;; Tracked objects:
  4736 ;;		On entry : 1D/0
  4737 ;;		On exit  : 1F/0
  4738 ;;		Unchanged: FFFE0/0
  4739 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4740 ;;      Params:         0       2       0       0
  4741 ;;      Locals:         0      11       0       0
  4742 ;;      Temps:          0       2       0       0
  4743 ;;      Totals:         0      15       0       0
  4744 ;;Total ram usage:       15 bytes
  4745 ;; Hardware stack levels used:    1
  4746 ;; Hardware stack levels required when called:    3
  4747 ;; This function calls:
  4748 ;;		_getADValueOneTime
  4749 ;; This function is called by:
  4750 ;;		_GetBatteryVoltage
  4751 ;;		_GetSolarPanelVoltage
  4752 ;;		_GetLoadCurrentVoltage
  4753 ;; This function uses a non-reentrant model
  4754 ;;
  4755  0D34                     _getADValue:	
  4756                           
  4757                           ; Regs used in _getADValue: [wreg+status,2+status,0+pclath+cstack]
  4758                           ;getADValue@channel stored from wreg
  4759  0D34  0020               	movlb	0	; select bank0
  4760  0D35  00CF               	movwf	getADValue@channel
  4761                           
  4762                           ;mypic.h: 373: unsigned int AD_Result = 0;
  4763  0D36  01D0               	clrf	getADValue@AD_Result
  4764  0D37  01D1               	clrf	getADValue@AD_Result+1
  4765                           
  4766                           ;mypic.h: 375: unsigned int max;
  4767                           ;mypic.h: 376: unsigned int min;
  4768                           ;mypic.h: 377: unsigned int i = 0 ;
  4769  0D38  01D6               	clrf	getADValue@i
  4770  0D39  01D7               	clrf	getADValue@i+1
  4771                           
  4772                           ;mypic.h: 378: for (i = 0 ; i < 10; i++){
  4773  0D3A  01D6               	clrf	getADValue@i
  4774  0D3B  01D7               	clrf	getADValue@i+1
  4775  0D3C                     l5236:	
  4776                           
  4777                           ;mypic.h: 379: AD_OneResult = getADValueOneTime(channel);
  4778  0D3C  084F               	movf	getADValue@channel,w
  4779  0D3D  200A  3188         	fcall	_getADValueOneTime
  4780  0D3F  0877               	movf	?_getADValueOneTime+1,w
  4781  0D40  0020               	movlb	0	; select bank0
  4782  0D41  00D9               	movwf	getADValue@AD_OneResult+1
  4783  0D42  0876               	movf	?_getADValueOneTime,w
  4784  0D43  00D8               	movwf	getADValue@AD_OneResult
  4785                           
  4786                           ;mypic.h: 380: AD_Result += AD_OneResult;
  4787  0D44  07D0               	addwf	getADValue@AD_Result,f
  4788  0D45  0859               	movf	getADValue@AD_OneResult+1,w
  4789  0D46  3DD1               	addwfc	getADValue@AD_Result+1,f
  4790                           
  4791                           ;mypic.h: 381: max = (max > AD_OneResult ? max : AD_OneResult);
  4792  0D47  0853               	movf	getADValue@max+1,w
  4793  0D48  0259               	subwf	getADValue@AD_OneResult+1,w
  4794  0D49  1D03               	skipz
  4795  0D4A  2D4D               	goto	u2815
  4796  0D4B  0852               	movf	getADValue@max,w
  4797  0D4C  0258               	subwf	getADValue@AD_OneResult,w
  4798  0D4D                     u2815:	
  4799  0D4D  0859               	movf	getADValue@AD_OneResult+1,w
  4800  0D4E  1C03               	skipc
  4801  0D4F  2D54               	goto	L4
  4802  0D50  00D3               	movwf	getADValue@max+1
  4803  0D51  0858               	movf	getADValue@AD_OneResult,w
  4804  0D52  00D2               	movwf	getADValue@max
  4805                           
  4806                           ;mypic.h: 382: min = (min < AD_OneResult ? min : AD_OneResult);
  4807  0D53  0859               	movf	getADValue@AD_OneResult+1,w
  4808  0D54                     L4:	
  4809  0D54  0255               	subwf	getADValue@min+1,w
  4810  0D55  1D03               	skipz
  4811  0D56  2D59               	goto	u2825
  4812  0D57  0858               	movf	getADValue@AD_OneResult,w
  4813  0D58  0254               	subwf	getADValue@min,w
  4814  0D59                     u2825:	
  4815  0D59  1C03               	skipc
  4816  0D5A  2D5F               	goto	l5248
  4817  0D5B  0859               	movf	getADValue@AD_OneResult+1,w
  4818  0D5C  00D5               	movwf	getADValue@min+1
  4819  0D5D  0858               	movf	getADValue@AD_OneResult,w
  4820  0D5E  00D4               	movwf	getADValue@min
  4821  0D5F                     l5248:	
  4822  0D5F  0AD6               	incf	getADValue@i,f
  4823  0D60  1903               	skipnz
  4824  0D61  0AD7               	incf	getADValue@i+1,f
  4825  0D62  3000               	movlw	0
  4826  0D63  0257               	subwf	getADValue@i+1,w
  4827  0D64  300A               	movlw	10
  4828  0D65  1903               	skipnz
  4829  0D66  0256               	subwf	getADValue@i,w
  4830  0D67  1C03               	skipc
  4831  0D68  2D3C               	goto	l5236
  4832                           
  4833                           ;mypic.h: 383: }
  4834                           ;mypic.h: 384: return ((AD_Result - max - min) >> 3);
  4835  0D69  0854               	movf	getADValue@min,w
  4836  0D6A  0752               	addwf	getADValue@max,w
  4837  0D6B  00CD               	movwf	??_getADValue
  4838  0D6C  0855               	movf	getADValue@min+1,w
  4839  0D6D  3D53               	addwfc	getADValue@max+1,w
  4840  0D6E  00CE               	movwf	??_getADValue+1
  4841  0D6F  09CD               	comf	??_getADValue,f
  4842  0D70  09CE               	comf	??_getADValue+1,f
  4843  0D71  0ACD               	incf	??_getADValue,f
  4844  0D72  1903               	skipnz
  4845  0D73  0ACE               	incf	??_getADValue+1,f
  4846  0D74  084D               	movf	??_getADValue,w
  4847  0D75  00CB               	movwf	?_getADValue
  4848  0D76  084E               	movf	??_getADValue+1,w
  4849  0D77  00CC               	movwf	?_getADValue+1
  4850  0D78  0850               	movf	getADValue@AD_Result,w
  4851  0D79  07CB               	addwf	?_getADValue,f
  4852  0D7A  0851               	movf	getADValue@AD_Result+1,w
  4853  0D7B  3DCC               	addwfc	?_getADValue+1,f
  4854  0D7C  36CC               	lsrf	?_getADValue+1,f
  4855  0D7D  0CCB               	rrf	?_getADValue,f
  4856  0D7E  36CC               	lsrf	?_getADValue+1,f
  4857  0D7F  0CCB               	rrf	?_getADValue,f
  4858  0D80  36CC               	lsrf	?_getADValue+1,f
  4859  0D81  0CCB               	rrf	?_getADValue,f
  4860  0D82  0008               	return
  4861  0D83                     __end_of_getADValue:	
  4862  0D83                     __ptext593:	
  4863 ;; =============== function _GetBatteryVoltage ends ============
  4864                           
  4865                           
  4866 ;; *************** function _load_system_state *****************
  4867 ;; Defined at:
  4868 ;;		line 317 in file "C:\CTK\CTK80A 150928\CTK80A_Jas\mypic.h"
  4869 ;; Parameters:    Size  Location     Type
  4870 ;;		None
  4871 ;; Auto vars:     Size  Location     Type
  4872 ;;		None
  4873 ;; Return value:  Size  Location     Type
  4874 ;;		None               void
  4875 ;; Registers used:
  4876 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4877 ;; Tracked objects:
  4878 ;;		On entry : 17F/0
  4879 ;;		On exit  : 17F/0
  4880 ;;		Unchanged: FFE80/0
  4881 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4882 ;;      Params:         0       0       0       0
  4883 ;;      Locals:         0       0       0       0
  4884 ;;      Temps:          0       0       0       0
  4885 ;;      Totals:         0       0       0       0
  4886 ;;Total ram usage:        0 bytes
  4887 ;; Hardware stack levels used:    1
  4888 ;; Hardware stack levels required when called:    4
  4889 ;; This function calls:
  4890 ;;		_readFromEEPROM
  4891 ;; This function is called by:
  4892 ;;		_main
  4893 ;; This function uses a non-reentrant model
  4894 ;;
  4895  0D83                     _load_system_state:	
  4896                           
  4897                           ;mypic.h: 331: en_charge = readFromEEPROM(1);
  4898                           
  4899                           ; Regs used in _load_system_state: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4900  0D83  3001               	movlw	1
  4901  0D84  25A0  3188         	fcall	_readFromEEPROM
  4902                           
  4903                           ;mypic.h: 332: eq_charge = readFromEEPROM(2);
  4904  0D86  3002               	movlw	2
  4905  0D87  25A0  3188         	fcall	_readFromEEPROM
  4906                           
  4907                           ;mypic.h: 333: flo_charge = readFromEEPROM(3);
  4908  0D89  3003               	movlw	3
  4909  0D8A  25A0  3188         	fcall	_readFromEEPROM
  4910                           
  4911                           ;mypic.h: 334: time_charge = readFromEEPROM(4);
  4912  0D8C  3004               	movlw	4
  4913  0D8D  25A0  3188         	fcall	_readFromEEPROM
  4914                           
  4915                           ;mypic.h: 335: under_vol = readFromEEPROM(5);
  4916  0D8F  3005               	movlw	5
  4917  0D90  25A0  3188         	fcall	_readFromEEPROM
  4918                           
  4919                           ;mypic.h: 336: re_under = readFromEEPROM(6);
  4920  0D92  3006               	movlw	6
  4921  0D93  25A0  3188         	fcall	_readFromEEPROM
  4922                           
  4923                           ;mypic.h: 337: over_vol = readFromEEPROM(7);
  4924  0D95  3007               	movlw	7
  4925  0D96  25A0  3188         	fcall	_readFromEEPROM
  4926                           
  4927                           ;mypic.h: 338: re_over = readFromEEPROM(8);
  4928  0D98  3008               	movlw	8
  4929  0D99  25A0  3188         	fcall	_readFromEEPROM
  4930                           
  4931                           ;mypic.h: 339: day_vol = readFromEEPROM(9);
  4932  0D9B  3009               	movlw	9
  4933  0D9C  25A0  3188         	fcall	_readFromEEPROM
  4934                           
  4935                           ;mypic.h: 340: night_vol = readFromEEPROM(10);
  4936  0D9E  300A               	movlw	10
  4937  0D9F  2DA0               	ljmp	_readFromEEPROM
  4938  0DA0                     __end_of_load_system_state:	
  4939  0DA0                     __ptext599:	
  4940 ;; =============== function _getADValue ends ============
  4941                           
  4942                           
  4943 ;; *************** function _readFromEEPROM *****************
  4944 ;; Defined at:
  4945 ;;		line 1216 in file "C:\CTK\CTK80A 150928\CTK80A_Jas\mypic.h"
  4946 ;; Parameters:    Size  Location     Type
  4947 ;;  type            1    wreg     unsigned char 
  4948 ;; Auto vars:     Size  Location     Type
  4949 ;;  type            1   31[BANK0 ] unsigned char 
  4950 ;;  read_data       2   29[BANK0 ] unsigned int 
  4951 ;;  h_byte          1   28[BANK0 ] unsigned char 
  4952 ;;  l_byte          1   27[BANK0 ] unsigned char 
  4953 ;; Return value:  Size  Location     Type
  4954 ;;                  2   12[COMMON] unsigned int 
  4955 ;; Registers used:
  4956 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4957 ;; Tracked objects:
  4958 ;;		On entry : 17F/0
  4959 ;;		On exit  : 17F/0
  4960 ;;		Unchanged: FFE80/0
  4961 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4962 ;;      Params:         2       0       0       0
  4963 ;;      Locals:         0       5       0       0
  4964 ;;      Temps:          0       0       0       0
  4965 ;;      Totals:         2       5       0       0
  4966 ;;Total ram usage:        7 bytes
  4967 ;; Hardware stack levels used:    1
  4968 ;; Hardware stack levels required when called:    3
  4969 ;; This function calls:
  4970 ;;		_ReadEE
  4971 ;;		___lwtoft
  4972 ;;		___ftdiv
  4973 ;;		___fttol
  4974 ;; This function is called by:
  4975 ;;		_load_system_state
  4976 ;; This function uses a non-reentrant model
  4977 ;;
  4978  0DA0                     _readFromEEPROM:	
  4979                           
  4980                           ; Regs used in _readFromEEPROM: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4981                           ;readFromEEPROM@type stored from wreg
  4982  0DA0  00EA               	movwf	readFromEEPROM@type
  4983                           
  4984                           ;mypic.h: 1218: unsigned char h_byte = 0;
  4985  0DA1  01E7               	clrf	readFromEEPROM@h_byte
  4986                           
  4987                           ;mypic.h: 1219: unsigned int read_data = 0;
  4988  0DA2  01E8               	clrf	readFromEEPROM@read_data
  4989  0DA3  01E9               	clrf	readFromEEPROM@read_data+1
  4990                           
  4991                           ;mypic.h: 1220: switch(type) {
  4992  0DA4  2DE0               	goto	l5224
  4993  0DA5                     l5208:	
  4994                           
  4995                           ;mypic.h: 1222: case 2:
  4996                           ;mypic.h: 1223: case 3:
  4997                           ;mypic.h: 1224: case 5:
  4998                           ;mypic.h: 1225: case 6:
  4999                           ;mypic.h: 1226: case 7:
  5000                           ;mypic.h: 1227: case 8:
  5001                           ;mypic.h: 1228: l_byte = ReadEE(type * 2);
  5002  0DA5  356A               	lslf	readFromEEPROM@type,w
  5003  0DA6  2604  3188         	fcall	_ReadEE
  5004  0DA8  0020               	movlb	0	; select bank0
  5005  0DA9  00E6               	movwf	readFromEEPROM@l_byte
  5006                           
  5007                           ;mypic.h: 1229: h_byte = ReadEE(type * 2 + 1);
  5008  0DAA  1403               	setc
  5009  0DAB  0D6A               	rlf	readFromEEPROM@type,w
  5010  0DAC  2604  3188         	fcall	_ReadEE
  5011  0DAE  0020               	movlb	0	; select bank0
  5012  0DAF  00E7               	movwf	readFromEEPROM@h_byte
  5013                           
  5014                           ;mypic.h: 1230: read_data = l_byte + ( ((unsigned int)h_byte) << 8);
  5015  0DB0  00E8               	movwf	readFromEEPROM@read_data
  5016  0DB1  01E9               	clrf	readFromEEPROM@read_data+1
  5017  0DB2  00E9               	movwf	readFromEEPROM@read_data+1
  5018  0DB3  01E8               	clrf	readFromEEPROM@read_data
  5019  0DB4  0866               	movf	readFromEEPROM@l_byte,w
  5020  0DB5  07E8               	addwf	readFromEEPROM@read_data,f
  5021  0DB6  1803               	skipnc
  5022  0DB7  0AE9               	incf	readFromEEPROM@read_data+1,f
  5023                           
  5024                           ;mypic.h: 1231: read_data = (unsigned int) (read_data / 2.3684f);
  5025  0DB8  0869               	movf	readFromEEPROM@read_data+1,w
  5026  0DB9  00D5               	movwf	?___lwtoft+1
  5027  0DBA  0868               	movf	readFromEEPROM@read_data,w
  5028  0DBB  00D4               	movwf	?___lwtoft
  5029  0DBC  2611  3188         	fcall	___lwtoft
  5030  0DBE  0854               	movf	?___lwtoft,w
  5031  0DBF  00DA               	movwf	?___ftdiv+3
  5032  0DC0  0855               	movf	?___lwtoft+1,w
  5033  0DC1  00DB               	movwf	?___ftdiv+4
  5034  0DC2  0856               	movf	?___lwtoft+2,w
  5035  0DC3  00DC               	movwf	?___ftdiv+5
  5036  0DC4  3094               	movlw	148
  5037  0DC5  00D7               	movwf	?___ftdiv
  5038  0DC6  3017               	movlw	23
  5039  0DC7  00D8               	movwf	?___ftdiv+1
  5040  0DC8  3040               	movlw	64
  5041  0DC9  00D9               	movwf	?___ftdiv+2
  5042  0DCA  26C7  3188         	fcall	___ftdiv
  5043  0DCC  0857               	movf	?___ftdiv,w
  5044  0DCD  00F8               	movwf	?___fttol
  5045  0DCE  0858               	movf	?___ftdiv+1,w
  5046  0DCF  00F9               	movwf	?___fttol+1
  5047  0DD0  0859               	movf	?___ftdiv+2,w
  5048  0DD1  00FA               	movwf	?___fttol+2
  5049  0DD2  2763  3188         	fcall	___fttol
  5050  0DD4  0879               	movf	?___fttol+1,w
  5051  0DD5  00E9               	movwf	readFromEEPROM@read_data+1
  5052  0DD6  0878               	movf	?___fttol,w
  5053  0DD7  00E8               	movwf	readFromEEPROM@read_data
  5054                           
  5055                           ;mypic.h: 1232: break;
  5056  0DD8  2DFF               	goto	l5226
  5057  0DD9                     l5220:	
  5058                           
  5059                           ;mypic.h: 1234: case 10:
  5060                           ;mypic.h: 1235: case 4:
  5061                           ;mypic.h: 1236: read_data = ReadEE(type * 2);
  5062  0DD9  356A               	lslf	readFromEEPROM@type,w
  5063  0DDA  2604  3188         	fcall	_ReadEE
  5064  0DDC  0020               	movlb	0	; select bank0
  5065  0DDD  00E8               	movwf	readFromEEPROM@read_data
  5066  0DDE  01E9               	clrf	readFromEEPROM@read_data+1
  5067  0DDF  2DFF               	goto	l5226
  5068  0DE0                     l5224:	
  5069  0DE0  086A               	movf	readFromEEPROM@type,w
  5070                           
  5071                           ; Switch size 1, requested type "space"
  5072                           ; Number of cases is 10, Range of values is 1 to 10
  5073                           ; switch strategies available:
  5074                           ; Name         Bytes Cycles
  5075                           ; simple_byte    31    16 (average)
  5076                           ; direct_byte    39    19 (fixed)
  5077                           ;	Chosen strategy is simple_byte
  5078  0DE1  3A01               	xorlw	1	; case 1
  5079  0DE2  1903               	skipnz
  5080  0DE3  2DA5               	goto	l5208
  5081  0DE4  3A03               	xorlw	3	; case 2
  5082  0DE5  1903               	skipnz
  5083  0DE6  2DA5               	goto	l5208
  5084  0DE7  3A01               	xorlw	1	; case 3
  5085  0DE8  1903               	skipnz
  5086  0DE9  2DA5               	goto	l5208
  5087  0DEA  3A07               	xorlw	7	; case 4
  5088  0DEB  1903               	skipnz
  5089  0DEC  2DD9               	goto	l5220
  5090  0DED  3A01               	xorlw	1	; case 5
  5091  0DEE  1903               	skipnz
  5092  0DEF  2DA5               	goto	l5208
  5093  0DF0  3A03               	xorlw	3	; case 6
  5094  0DF1  1903               	skipnz
  5095  0DF2  2DA5               	goto	l5208
  5096  0DF3  3A01               	xorlw	1	; case 7
  5097  0DF4  1903               	skipnz
  5098  0DF5  2DA5               	goto	l5208
  5099  0DF6  3A0F               	xorlw	15	; case 8
  5100  0DF7  1903               	skipnz
  5101  0DF8  2DA5               	goto	l5208
  5102  0DF9  3A01               	xorlw	1	; case 9
  5103  0DFA  1903               	skipnz
  5104  0DFB  2DD9               	goto	l5220
  5105  0DFC  3A03               	xorlw	3	; case 10
  5106  0DFD  1903               	skipnz
  5107  0DFE  2DD9               	goto	l5220
  5108  0DFF                     l5226:	
  5109                           
  5110                           ;mypic.h: 1240: return read_data;
  5111  0DFF  0869               	movf	readFromEEPROM@read_data+1,w
  5112  0E00  00FD               	movwf	?_readFromEEPROM+1
  5113  0E01  0868               	movf	readFromEEPROM@read_data,w
  5114  0E02  00FC               	movwf	?_readFromEEPROM
  5115  0E03  0008               	return
  5116  0E04                     __end_of_readFromEEPROM:	
  5117  0E04                     __ptext612:	
  5118 ;; =============== function _SelectMode ends ============
  5119                           
  5120                           
  5121 ;; *************** function _ReadEE *****************
  5122 ;; Defined at:
  5123 ;;		line 305 in file "C:\CTK\CTK80A 150928\CTK80A_Jas\mypic.h"
  5124 ;; Parameters:    Size  Location     Type
  5125 ;;  addr            1    wreg     unsigned char 
  5126 ;; Auto vars:     Size  Location     Type
  5127 ;;  addr            1    0[COMMON] unsigned char 
  5128 ;; Return value:  Size  Location     Type
  5129 ;;                  1    wreg      unsigned char 
  5130 ;; Registers used:
  5131 ;;		wreg
  5132 ;; Tracked objects:
  5133 ;;		On entry : 17F/0
  5134 ;;		On exit  : 17F/3
  5135 ;;		Unchanged: FFE80/0
  5136 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5137 ;;      Params:         0       0       0       0
  5138 ;;      Locals:         1       0       0       0
  5139 ;;      Temps:          0       0       0       0
  5140 ;;      Totals:         1       0       0       0
  5141 ;;Total ram usage:        1 bytes
  5142 ;; Hardware stack levels used:    1
  5143 ;; Hardware stack levels required when called:    1
  5144 ;; This function calls:
  5145 ;;		Nothing
  5146 ;; This function is called by:
  5147 ;;		_readFromEEPROM
  5148 ;; This function uses a non-reentrant model
  5149 ;;
  5150  0E04                     _ReadEE:	
  5151                           
  5152                           ; Regs used in _ReadEE: [wreg]
  5153                           ;ReadEE@addr stored from wreg
  5154  0E04  00F0               	movwf	ReadEE@addr
  5155  0E05                     l2241:	
  5156                           ;mypic.h: 306: while(RD == 1);
  5157                           
  5158  0E05  0023               	movlb	3	; select bank3
  5159  0E06  1815               	btfsc	21,0
  5160  0E07  2E05               	goto	l2241
  5161                           
  5162                           ;mypic.h: 307: EEADRL = addr;
  5163  0E08  0870               	movf	ReadEE@addr,w
  5164  0E09  0091               	movwf	17	;volatile
  5165                           
  5166                           ;mypic.h: 308: EEPGD = 0;
  5167  0E0A  1395               	bcf	21,7
  5168                           
  5169                           ;mypic.h: 309: CFGS = 0;
  5170  0E0B  1315               	bcf	21,6
  5171                           
  5172                           ;mypic.h: 310: RD = 1;
  5173  0E0C  1415               	bsf	21,0
  5174  0E0D                     l2244:	
  5175                           ;mypic.h: 311: while(RD == 1);
  5176                           
  5177  0E0D  1815               	btfsc	21,0
  5178  0E0E  2E0D               	goto	l2244
  5179                           
  5180                           ;mypic.h: 312: return EEDATL;
  5181  0E0F  0813               	movf	19,w	;volatile
  5182  0E10  0008               	return
  5183  0E11                     __end_of_ReadEE:	
  5184  0E11                     __ptext600:	
  5185 ;; =============== function _readFromEEPROM ends ============
  5186                           
  5187                           
  5188 ;; *************** function ___lwtoft *****************
  5189 ;; Defined at:
  5190 ;;		line 29 in file "C:\Program Files\HI-TECH Software\PICC\9.80\sources\lwtoft.c"
  5191 ;; Parameters:    Size  Location     Type
  5192 ;;  c               2    9[BANK0 ] unsigned int 
  5193 ;; Auto vars:     Size  Location     Type
  5194 ;;		None
  5195 ;; Return value:  Size  Location     Type
  5196 ;;                  3    9[BANK0 ] float 
  5197 ;; Registers used:
  5198 ;;		wreg, status,2, status,0, pclath, cstack
  5199 ;; Tracked objects:
  5200 ;;		On entry : 17F/0
  5201 ;;		On exit  : 17F/0
  5202 ;;		Unchanged: FFE80/0
  5203 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5204 ;;      Params:         0       3       0       0
  5205 ;;      Locals:         0       0       0       0
  5206 ;;      Temps:          0       0       0       0
  5207 ;;      Totals:         0       3       0       0
  5208 ;;Total ram usage:        3 bytes
  5209 ;; Hardware stack levels used:    1
  5210 ;; Hardware stack levels required when called:    2
  5211 ;; This function calls:
  5212 ;;		___ftpack
  5213 ;; This function is called by:
  5214 ;;		_readFromEEPROM
  5215 ;; This function uses a non-reentrant model
  5216 ;;
  5217  0E11                     ___lwtoft:	
  5218                           
  5219                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  5220  0E11  0854               	movf	___lwtoft@c,w
  5221  0E12  00F0               	movwf	?___ftpack
  5222  0E13  0855               	movf	___lwtoft@c+1,w
  5223  0E14  00F1               	movwf	?___ftpack+1
  5224  0E15  01F2               	clrf	?___ftpack+2
  5225  0E16  308E               	movlw	142
  5226  0E17  00F3               	movwf	?___ftpack+3
  5227  0E18  01F4               	clrf	?___ftpack+4
  5228  0E19  2729               	fcall	___ftpack
  5229  0E1A  0870               	movf	?___ftpack,w
  5230  0E1B  00D4               	movwf	?___lwtoft
  5231  0E1C  0871               	movf	?___ftpack+1,w
  5232  0E1D  00D5               	movwf	?___lwtoft+1
  5233  0E1E  0872               	movf	?___ftpack+2,w
  5234  0E1F  00D6               	movwf	?___lwtoft+2
  5235  0E20  0008               	return
  5236  0E21                     __end_of___lwtoft:	
  5237  0E21                     __ptext590:	
  5238 ;; =============== function _LoadCurrentDealWith ends ============
  5239                           
  5240                           
  5241 ;; *************** function _GetLoadCurrentVoltage *****************
  5242 ;; Defined at:
  5243 ;;		line 414 in file "C:\CTK\CTK80A 150928\CTK80A_Jas\mypic.h"
  5244 ;; Parameters:    Size  Location     Type
  5245 ;;		None
  5246 ;; Auto vars:     Size  Location     Type
  5247 ;;  channel         1    0        unsigned char 
  5248 ;; Return value:  Size  Location     Type
  5249 ;;                  2   15[BANK0 ] unsigned int 
  5250 ;; Registers used:
  5251 ;;		wreg, status,2, status,0, pclath, cstack
  5252 ;; Tracked objects:
  5253 ;;		On entry : 1F/0
  5254 ;;		On exit  : 1F/0
  5255 ;;		Unchanged: FFFE0/0
  5256 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5257 ;;      Params:         0       2       0       0
  5258 ;;      Locals:         1       0       0       0
  5259 ;;      Temps:          0       0       0       0
  5260 ;;      Totals:         1       2       0       0
  5261 ;;Total ram usage:        3 bytes
  5262 ;; Hardware stack levels used:    1
  5263 ;; Hardware stack levels required when called:    4
  5264 ;; This function calls:
  5265 ;;		_getADValue
  5266 ;; This function is called by:
  5267 ;;		_LoadCurrentDealWith
  5268 ;;		_KaiJi
  5269 ;; This function uses a non-reentrant model
  5270 ;;
  5271  0E21                     _GetLoadCurrentVoltage:	
  5272                           
  5273                           ;mypic.h: 416: return getADValue(channel);
  5274                           
  5275                           ; Regs used in _GetLoadCurrentVoltage: [wreg+status,2+status,0+pclath+cstack]
  5276  0E21  3019               	movlw	25
  5277  0E22  2534               	fcall	_getADValue
  5278  0E23  084C               	movf	?_getADValue+1,w
  5279  0E24  00DB               	movwf	?_GetLoadCurrentVoltage+1
  5280  0E25  084B               	movf	?_getADValue,w
  5281  0E26  00DA               	movwf	?_GetLoadCurrentVoltage
  5282  0E27  0008               	return
  5283  0E28                     __end_of_GetLoadCurrentVoltage:	
  5284  0E28                     PL2:	
  5285  0E28  0086               	movwf	6
  5286  0E29  0187               	clrf	7
  5287  0E2A  3F40               	moviw [0]fsr1
  5288  0E2B  00F2               	movwf	??_BatteryStateSwitch
  5289  0E2C  3F41               	moviw [1]fsr1
  5290  0E2D  00F3               	movwf	??_BatteryStateSwitch+1
  5291  0E2E  0876               	movf	BatteryStateSwitch@adjust,w
  5292  0E2F  0772               	addwf	??_BatteryStateSwitch,w
  5293  0E30  00F4               	movwf	??_BatteryStateSwitch+2
  5294  0E31  0877               	movf	BatteryStateSwitch@adjust+1,w
  5295  0E32  3D73               	addwfc	??_BatteryStateSwitch+1,w
  5296  0E33  00F5               	movwf	??_BatteryStateSwitch+3
  5297  0E34  0271               	subwf	BatteryStateSwitch@BatteryVoltage+1,w
  5298  0E35  1D03               	skipz
  5299  0E36  0008               	return
  5300  0E37  0874               	movf	??_BatteryStateSwitch+2,w
  5301  0E38  0270               	subwf	BatteryStateSwitch@BatteryVoltage,w
  5302  0E39  0008               	return
  5303  0E3A                     PL3:	
  5304  0E3A  0086               	movwf	6
  5305  0E3B  0187               	clrf	7
  5306  0E3C  3F40               	moviw [0]fsr1
  5307  0E3D  00DC               	movwf	??_SwitchBatteryState
  5308  0E3E  3F41               	moviw [1]fsr1
  5309  0E3F  00DD               	movwf	??_SwitchBatteryState+1
  5310  0E40  0820               	movf	_ADBase,w
  5311  0E41  025C               	subwf	??_SwitchBatteryState,w
  5312  0E42  00DE               	movwf	??_SwitchBatteryState+2
  5313  0E43  0821               	movf	_ADBase+1,w
  5314  0E44  3B5D               	subwfb	??_SwitchBatteryState+1,w
  5315  0E45  00DF               	movwf	??_SwitchBatteryState+3
  5316  0E46  0822               	movf	_ADVoltage,w
  5317  0E47  075E               	addwf	??_SwitchBatteryState+2,w
  5318  0E48  00E0               	movwf	??_SwitchBatteryState+4
  5319  0E49  0823               	movf	_ADVoltage+1,w
  5320  0E4A  3D5F               	addwfc	??_SwitchBatteryState+3,w
  5321  0E4B  00E1               	movwf	??_SwitchBatteryState+5
  5322  0E4C  0008               	return
  5323  0E4D                     PL4:	
  5324  0E4D  0086               	movwf	6
  5325  0E4E  0187               	clrf	7
  5326  0E4F  3F40               	moviw [0]fsr1
  5327  0E50  00A4               	movwf	_ClampVoltage
  5328  0E51  3F41               	moviw [1]fsr1
  5329  0E52  00A5               	movwf	_ClampVoltage+1
  5330  0E53  0820               	movf	_ADBase,w
  5331  0E54  02A4               	subwf	_ClampVoltage,f
  5332  0E55  0821               	movf	_ADBase+1,w
  5333  0E56  3BA5               	subwfb	_ClampVoltage+1,f
  5334  0E57  0822               	movf	_ADVoltage,w
  5335  0E58  07A4               	addwf	_ClampVoltage,f
  5336  0E59  0823               	movf	_ADVoltage+1,w
  5337  0E5A  3DA5               	addwfc	_ClampVoltage+1,f
  5338  0E5B  0008               	return
  5339  0E5C                     PL5:	
  5340  0E5C  00B5               	movwf	_charPointer+1
  5341  0E5D  00F8               	movwf	?_lcd_print_line1+1
  5342  0E5E  0834               	movf	_charPointer,w
  5343  0E5F  00F7               	movwf	?_lcd_print_line1
  5344  0E60  01F9               	clrf	?_lcd_print_line1+2
  5345  0E61  01FA               	clrf	?_lcd_print_line1+3
  5346  0E62  0AFA               	incf	?_lcd_print_line1+3,f
  5347  0E63  0008               	return
  5348  0E64                     PL6:	
  5349  0E64  085A               	movf	?_GetBatteryVoltage,w
  5350  0E65  00B6               	movwf	_gBatteryVoltage
  5351  0E66  083D               	movf	_BatteryStandard,w
  5352  0E67  3E02               	addlw	2
  5353  0E68  0008               	return
  5354  0E69                     PL7:	
  5355  0E69  00F8               	movwf	?_lcd_print_line1+1
  5356  0E6A  0834               	movf	_charPointer,w
  5357  0E6B  00F7               	movwf	?_lcd_print_line1
  5358  0E6C  01F9               	clrf	?_lcd_print_line1+2
  5359  0E6D  01FA               	clrf	?_lcd_print_line1+3
  5360  0E6E  0008               	return
  5361  0E6F                     PL8:	
  5362  0E6F  01A6               	clrf	_EnhanceCharge_Time
  5363  0E70  01A7               	clrf	_EnhanceCharge_Time+1
  5364  0E71  116B               	bcf	_EqualizingChargeFlag/(0+8),_EqualizingChargeFlag& (0+7)
  5365  0E72  01A8               	clrf	_EqualizingCharge_Time
  5366  0E73  01A9               	clrf	_EqualizingCharge_Time+1
  5367  0E74  11EB               	bcf	_FloatingChargeFlag/(0+8),_FloatingChargeFlag& (0+7)
  5368  0E75  0008               	return
  5369  0E76                     PL9:	
  5370  0E76  085B               	movf	?_GetSolarPanelVoltage+1,w
  5371  0E77  00E3               	movwf	SolarPanelDealWith@SolarPanelVoltage+1
  5372  0E78  085A               	movf	?_GetSolarPanelVoltage,w
  5373  0E79  00E2               	movwf	SolarPanelDealWith@SolarPanelVoltage
  5374  0E7A  0863               	movf	SolarPanelDealWith@SolarPanelVoltage+1,w
  5375  0E7B  00BB               	movwf	_gSolarPanelVoltage+1
  5376  0E7C  0862               	movf	SolarPanelDealWith@SolarPanelVoltage,w
  5377  0E7D  00BA               	movwf	_gSolarPanelVoltage
  5378  0E7E  140C               	bsf	12,0	;volatile
  5379  0E7F  0008               	return
  5380  0E80                     PL10:	
  5381  0E80  00B5               	movwf	_charPointer+1
  5382  0E81  00F8               	movwf	?_lcd_print_line2+1
  5383  0E82  0834               	movf	_charPointer,w
  5384  0E83  00F7               	movwf	?_lcd_print_line2
  5385  0E84  01F9               	clrf	?_lcd_print_line2+2
  5386  0E85  0008               	return
  5387  0E86                     PL11:	
  5388  0E86  083B               	movf	_gSolarPanelVoltage+1,w
  5389  0E87  00F1               	movwf	?___wmul+1
  5390  0E88  083A               	movf	_gSolarPanelVoltage,w
  5391  0E89  00F0               	movwf	?___wmul
  5392  0E8A  30E9               	movlw	233
  5393  0E8B  00F2               	movwf	?___wmul+2
  5394  0E8C  30FF               	movlw	255
  5395  0E8D  00F3               	movwf	?___wmul+3
  5396  0E8E  0008               	return
  5397  0E8F                     PL12:	
  5398  0E8F  0870               	movf	?___wmul,w
  5399  0E90  00DC               	movwf	??_SolarPanelDealWith
  5400  0E91  0871               	movf	?___wmul+1,w
  5401  0E92  00DD               	movwf	??_SolarPanelDealWith+1
  5402  0E93  0008               	return
  5403  0E94                     PL13:	
  5404  0E94  085B               	movf	?_GetBatteryVoltage+1,w
  5405  0E95  00B7               	movwf	_gBatteryVoltage+1
  5406  0E96  085A               	movf	?_GetBatteryVoltage,w
  5407  0E97  00B6               	movwf	_gBatteryVoltage
  5408  0E98  083D               	movf	_BatteryStandard,w
  5409  0E99  0008               	return
  5410  0E9A                     PL14:	
  5411  0E9A  0837               	movf	_gBatteryVoltage+1,w
  5412  0E9B  00F1               	movwf	?___wmul+1
  5413  0E9C  0836               	movf	_gBatteryVoltage,w
  5414  0E9D  00F0               	movwf	?___wmul
  5415  0E9E  301A               	movlw	26
  5416  0E9F  00F2               	movwf	?___wmul+2
  5417  0EA0  01F3               	clrf	?___wmul+3
  5418  0EA1  0008               	return
  5419  0EA2                     PL15:	
  5420  0EA2  082F               	movf	_SDSolarPanelVoltage+1,w
  5421  0EA3  00F1               	movwf	?___wmul+1
  5422  0EA4  082E               	movf	_SDSolarPanelVoltage,w
  5423  0EA5  00F0               	movwf	?___wmul
  5424  0EA6  302F               	movlw	47
  5425  0EA7  00F2               	movwf	?___wmul+2
  5426  0EA8  01F3               	clrf	?___wmul+3
  5427  0EA9  0008               	return
  5428  0EAA                     PL16:	
  5429  0EAA  00F1               	movwf	?___wmul+1
  5430  0EAB  082C               	movf	_SDBatteryVoltage,w
  5431  0EAC  00F0               	movwf	?___wmul
  5432  0EAD  3030               	movlw	48
  5433  0EAE  00F2               	movwf	?___wmul+2
  5434  0EAF  01F3               	clrf	?___wmul+3
  5435  0EB0  0008               	return
  5436  0EB1                     PL18:	
  5437  0EB1  0870               	movf	?___wmul,w
  5438  0EB2  075C               	addwf	??_SolarPanelDealWith,w
  5439  0EB3  00DE               	movwf	??_SolarPanelDealWith+2
  5440  0EB4  0871               	movf	?___wmul+1,w
  5441  0EB5  3D5D               	addwfc	??_SolarPanelDealWith+1,w
  5442  0EB6  00DF               	movwf	??_SolarPanelDealWith+3
  5443  0EB7  0008               	return
  5444  0EB8                     PL20:	
  5445  0EB8  085B               	movf	?_GetBatteryVoltage+1,w
  5446  0EB9  00B7               	movwf	_gBatteryVoltage+1
  5447  0EBA  085A               	movf	?_GetBatteryVoltage,w
  5448  0EBB  00B6               	movwf	_gBatteryVoltage
  5449  0EBC  0008               	return
  5450  0EBD                     PL21:	
  5451  0EBD  30E8               	movlw	232
  5452  0EBE  00F0               	movwf	?_delay
  5453  0EBF  3003               	movlw	3
  5454  0EC0  00F1               	movwf	?_delay+1
  5455  0EC1  0008               	return
  5456  0EC2                     PL22:	
  5457  0EC2  0837               	movf	_gBatteryVoltage+1,w
  5458  0EC3  00F1               	movwf	?_BatteryStateSwitch+1
  5459  0EC4  0836               	movf	_gBatteryVoltage,w
  5460  0EC5  00F0               	movwf	?_BatteryStateSwitch
  5461  0EC6  0008               	return
  5462  0EC7                     __ptext601:	
  5463 ;; =============== function ___lwtoft ends ============
  5464                           
  5465                           
  5466 ;; *************** function ___ftdiv *****************
  5467 ;; Defined at:
  5468 ;;		line 50 in file "C:\Program Files\HI-TECH Software\PICC\9.80\sources\ftdiv.c"
  5469 ;; Parameters:    Size  Location     Type
  5470 ;;  f2              3   12[BANK0 ] float 
  5471 ;;  f1              3   15[BANK0 ] float 
  5472 ;; Auto vars:     Size  Location     Type
  5473 ;;  f3              3   22[BANK0 ] float 
  5474 ;;  sign            1   26[BANK0 ] unsigned char 
  5475 ;;  exp             1   25[BANK0 ] unsigned char 
  5476 ;;  cntr            1   21[BANK0 ] unsigned char 
  5477 ;; Return value:  Size  Location     Type
  5478 ;;                  3   12[BANK0 ] float 
  5479 ;; Registers used:
  5480 ;;		wreg, status,2, status,0, pclath, cstack
  5481 ;; Tracked objects:
  5482 ;;		On entry : 17F/0
  5483 ;;		On exit  : 17F/0
  5484 ;;		Unchanged: FFE80/0
  5485 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5486 ;;      Params:         0       6       0       0
  5487 ;;      Locals:         0       6       0       0
  5488 ;;      Temps:          0       3       0       0
  5489 ;;      Totals:         0      15       0       0
  5490 ;;Total ram usage:       15 bytes
  5491 ;; Hardware stack levels used:    1
  5492 ;; Hardware stack levels required when called:    2
  5493 ;; This function calls:
  5494 ;;		___ftpack
  5495 ;; This function is called by:
  5496 ;;		_readFromEEPROM
  5497 ;; This function uses a non-reentrant model
  5498 ;;
  5499  0EC7                     ___ftdiv:	
  5500                           
  5501                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  5502  0EC7  085A               	movf	___ftdiv@f1,w
  5503  0EC8  00DD               	movwf	??___ftdiv
  5504  0EC9  085B               	movf	___ftdiv@f1+1,w
  5505  0ECA  00DE               	movwf	??___ftdiv+1
  5506  0ECB  085C               	movf	___ftdiv@f1+2,w
  5507  0ECC  00DF               	movwf	??___ftdiv+2
  5508  0ECD  1003               	clrc
  5509  0ECE  0D5E               	rlf	??___ftdiv+1,w
  5510  0ECF  0D5F               	rlf	??___ftdiv+2,w
  5511  0ED0  00E4               	movwf	___ftdiv@exp
  5512  0ED1  08E4               	movf	___ftdiv@exp,f
  5513  0ED2  1D03               	skipz
  5514  0ED3  2ED8               	goto	l5164
  5515  0ED4  01D7               	clrf	?___ftdiv
  5516  0ED5  01D8               	clrf	?___ftdiv+1
  5517  0ED6  01D9               	clrf	?___ftdiv+2
  5518  0ED7  0008               	return
  5519  0ED8                     l5164:	
  5520  0ED8  0857               	movf	___ftdiv@f2,w
  5521  0ED9  00DD               	movwf	??___ftdiv
  5522  0EDA  0858               	movf	___ftdiv@f2+1,w
  5523  0EDB  00DE               	movwf	??___ftdiv+1
  5524  0EDC  0859               	movf	___ftdiv@f2+2,w
  5525  0EDD  00DF               	movwf	??___ftdiv+2
  5526  0EDE  1003               	clrc
  5527  0EDF  0D5E               	rlf	??___ftdiv+1,w
  5528  0EE0  0D5F               	rlf	??___ftdiv+2,w
  5529  0EE1  00E5               	movwf	___ftdiv@sign
  5530  0EE2  08E5               	movf	___ftdiv@sign,f
  5531  0EE3  1D03               	skipz
  5532  0EE4  2EE9               	goto	l2770
  5533  0EE5  01D7               	clrf	?___ftdiv
  5534  0EE6  01D8               	clrf	?___ftdiv+1
  5535  0EE7  01D9               	clrf	?___ftdiv+2
  5536  0EE8  0008               	return
  5537  0EE9                     l2770:	
  5538  0EE9  01E1               	clrf	___ftdiv@f3
  5539  0EEA  01E2               	clrf	___ftdiv@f3+1
  5540  0EEB  01E3               	clrf	___ftdiv@f3+2
  5541  0EEC  3089               	movlw	137
  5542  0EED  0765               	addwf	___ftdiv@sign,w
  5543  0EEE  00DD               	movwf	??___ftdiv
  5544  0EEF  02E4               	subwf	___ftdiv@exp,f
  5545  0EF0  085C               	movf	___ftdiv@f1+2,w
  5546  0EF1  00E5               	movwf	___ftdiv@sign
  5547  0EF2  0859               	movf	___ftdiv@f2+2,w
  5548  0EF3  06E5               	xorwf	___ftdiv@sign,f
  5549  0EF4  3080               	movlw	128
  5550  0EF5  05E5               	andwf	___ftdiv@sign,f
  5551  0EF6  17DB               	bsf	___ftdiv@f1+1,7
  5552  0EF7  01DC               	clrf	___ftdiv@f1+2
  5553  0EF8  17D8               	bsf	___ftdiv@f2+1,7
  5554  0EF9  01D9               	clrf	___ftdiv@f2+2
  5555  0EFA  3018               	movlw	24
  5556  0EFB  00E0               	movwf	___ftdiv@cntr
  5557  0EFC                     l5188:	
  5558  0EFC  35E1               	lslf	___ftdiv@f3,f
  5559  0EFD  0DE2               	rlf	___ftdiv@f3+1,f
  5560  0EFE  0DE3               	rlf	___ftdiv@f3+2,f
  5561  0EFF  0859               	movf	___ftdiv@f2+2,w
  5562  0F00  025C               	subwf	___ftdiv@f1+2,w
  5563  0F01  1D03               	skipz
  5564  0F02  2F09               	goto	u2795
  5565  0F03  0858               	movf	___ftdiv@f2+1,w
  5566  0F04  025B               	subwf	___ftdiv@f1+1,w
  5567  0F05  1D03               	skipz
  5568  0F06  2F09               	goto	u2795
  5569  0F07  0857               	movf	___ftdiv@f2,w
  5570  0F08  025A               	subwf	___ftdiv@f1,w
  5571  0F09                     u2795:	
  5572  0F09  1C03               	skipc
  5573  0F0A  2F12               	goto	l5194
  5574  0F0B  0857               	movf	___ftdiv@f2,w
  5575  0F0C  02DA               	subwf	___ftdiv@f1,f
  5576  0F0D  0858               	movf	___ftdiv@f2+1,w
  5577  0F0E  3BDB               	subwfb	___ftdiv@f1+1,f
  5578  0F0F  0859               	movf	___ftdiv@f2+2,w
  5579  0F10  3BDC               	subwfb	___ftdiv@f1+2,f
  5580  0F11  1461               	bsf	___ftdiv@f3,0
  5581  0F12                     l5194:	
  5582  0F12  35DA               	lslf	___ftdiv@f1,f
  5583  0F13  0DDB               	rlf	___ftdiv@f1+1,f
  5584  0F14  0DDC               	rlf	___ftdiv@f1+2,f
  5585  0F15  0BE0               	decfsz	___ftdiv@cntr,f
  5586  0F16  2EFC               	goto	l5188
  5587  0F17  0861               	movf	___ftdiv@f3,w
  5588  0F18  00F0               	movwf	?___ftpack
  5589  0F19  0862               	movf	___ftdiv@f3+1,w
  5590  0F1A  00F1               	movwf	?___ftpack+1
  5591  0F1B  0863               	movf	___ftdiv@f3+2,w
  5592  0F1C  00F2               	movwf	?___ftpack+2
  5593  0F1D  0864               	movf	___ftdiv@exp,w
  5594  0F1E  00F3               	movwf	?___ftpack+3
  5595  0F1F  0865               	movf	___ftdiv@sign,w
  5596  0F20  00F4               	movwf	?___ftpack+4
  5597  0F21  2729               	fcall	___ftpack
  5598  0F22  0870               	movf	?___ftpack,w
  5599  0F23  00D7               	movwf	?___ftdiv
  5600  0F24  0871               	movf	?___ftpack+1,w
  5601  0F25  00D8               	movwf	?___ftdiv+1
  5602  0F26  0872               	movf	?___ftpack+2,w
  5603  0F27  00D9               	movwf	?___ftdiv+2
  5604  0F28  0008               	return
  5605  0F29                     __end_of___ftdiv:	
  5606  0F29                     __ptext607:	
  5607 ;; =============== function ___fttol ends ============
  5608                           
  5609                           
  5610 ;; *************** function ___ftpack *****************
  5611 ;; Defined at:
  5612 ;;		line 63 in file "C:\Program Files\HI-TECH Software\PICC\9.80\sources\float.c"
  5613 ;; Parameters:    Size  Location     Type
  5614 ;;  arg             3    0[COMMON] unsigned um
  5615 ;;  exp             1    3[COMMON] unsigned char 
  5616 ;;  sign            1    4[COMMON] unsigned char 
  5617 ;; Auto vars:     Size  Location     Type
  5618 ;;		None
  5619 ;; Return value:  Size  Location     Type
  5620 ;;                  3    0[COMMON] float 
  5621 ;; Registers used:
  5622 ;;		wreg, status,2, status,0
  5623 ;; Tracked objects:
  5624 ;;		On entry : 17F/0
  5625 ;;		On exit  : 17F/0
  5626 ;;		Unchanged: FFE80/0
  5627 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5628 ;;      Params:         5       0       0       0
  5629 ;;      Locals:         0       0       0       0
  5630 ;;      Temps:          3       0       0       0
  5631 ;;      Totals:         8       0       0       0
  5632 ;;Total ram usage:        8 bytes
  5633 ;; Hardware stack levels used:    1
  5634 ;; Hardware stack levels required when called:    1
  5635 ;; This function calls:
  5636 ;;		Nothing
  5637 ;; This function is called by:
  5638 ;;		___ftdiv
  5639 ;;		___lwtoft
  5640 ;; This function uses a non-reentrant model
  5641 ;;
  5642  0F29                     ___ftpack:	
  5643                           
  5644                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  5645  0F29  0873               	movf	___ftpack@exp,w
  5646  0F2A  1903               	btfsc	3,2
  5647  0F2B  2F31               	goto	l5014
  5648  0F2C  0872               	movf	___ftpack@arg+2,w
  5649  0F2D  0471               	iorwf	___ftpack@arg+1,w
  5650  0F2E  0470               	iorwf	___ftpack@arg,w
  5651  0F2F  1D03               	skipz
  5652  0F30  2F39               	goto	l5020
  5653  0F31                     l5014:	
  5654  0F31  01F0               	clrf	?___ftpack
  5655  0F32  01F1               	clrf	?___ftpack+1
  5656  0F33  01F2               	clrf	?___ftpack+2
  5657  0F34  0008               	return
  5658  0F35                     l5018:	
  5659  0F35  0AF3               	incf	___ftpack@exp,f
  5660  0F36  36F2               	lsrf	___ftpack@arg+2,f
  5661  0F37  0CF1               	rrf	___ftpack@arg+1,f
  5662  0F38  0CF0               	rrf	___ftpack@arg,f
  5663  0F39                     l5020:	
  5664  0F39  30FE               	movlw	254
  5665  0F3A  0572               	andwf	___ftpack@arg+2,w
  5666  0F3B  1903               	btfsc	3,2
  5667  0F3C  2F47               	goto	l5024
  5668  0F3D  2F35               	goto	l5018
  5669  0F3E                     l5022:	
  5670  0F3E  0AF3               	incf	___ftpack@exp,f
  5671  0F3F  0AF0               	incf	___ftpack@arg,f
  5672  0F40  1903               	skipnz
  5673  0F41  0AF1               	incf	___ftpack@arg+1,f
  5674  0F42  1903               	skipnz
  5675  0F43  0AF2               	incf	___ftpack@arg+2,f
  5676  0F44  36F2               	lsrf	___ftpack@arg+2,f
  5677  0F45  0CF1               	rrf	___ftpack@arg+1,f
  5678  0F46  0CF0               	rrf	___ftpack@arg,f
  5679  0F47                     l5024:	
  5680  0F47  30FF               	movlw	255
  5681  0F48  0572               	andwf	___ftpack@arg+2,w
  5682  0F49  1903               	btfsc	3,2
  5683  0F4A  2F50               	goto	l5028
  5684  0F4B  2F3E               	goto	l5022
  5685  0F4C                     l5026:	
  5686  0F4C  03F3               	decf	___ftpack@exp,f
  5687  0F4D  35F0               	lslf	___ftpack@arg,f
  5688  0F4E  0DF1               	rlf	___ftpack@arg+1,f
  5689  0F4F  0DF2               	rlf	___ftpack@arg+2,f
  5690  0F50                     l5028:	
  5691  0F50  1FF1               	btfss	___ftpack@arg+1,7
  5692  0F51  2F4C               	goto	l5026
  5693  0F52  1C73               	btfss	___ftpack@exp,0
  5694  0F53  13F1               	bcf	___ftpack@arg+1,7
  5695  0F54  36F3               	lsrf	___ftpack@exp,f
  5696  0F55  0873               	movf	___ftpack@exp,w
  5697  0F56  00F7               	movwf	??___ftpack+2
  5698  0F57  01F6               	clrf	??___ftpack+1
  5699  0F58  01F5               	clrf	??___ftpack
  5700  0F59  0875               	movf	??___ftpack,w
  5701  0F5A  04F0               	iorwf	___ftpack@arg,f
  5702  0F5B  0876               	movf	??___ftpack+1,w
  5703  0F5C  04F1               	iorwf	___ftpack@arg+1,f
  5704  0F5D  0877               	movf	??___ftpack+2,w
  5705  0F5E  04F2               	iorwf	___ftpack@arg+2,f
  5706  0F5F  0874               	movf	___ftpack@sign,w
  5707  0F60  1D03               	skipz
  5708  0F61  17F2               	bsf	___ftpack@arg+2,7
  5709  0F62  0008               	return
  5710  0F63                     __end_of___ftpack:	
  5711  0F63                     __ptext606:	
  5712 ;; =============== function _system_state_init ends ============
  5713                           
  5714                           
  5715 ;; *************** function ___fttol *****************
  5716 ;; Defined at:
  5717 ;;		line 45 in file "C:\Program Files\HI-TECH Software\PICC\9.80\sources\fttol.c"
  5718 ;; Parameters:    Size  Location     Type
  5719 ;;  f1              3    8[COMMON] float 
  5720 ;; Auto vars:     Size  Location     Type
  5721 ;;  lval            4    4[BANK0 ] unsigned long 
  5722 ;;  exp1            1    8[BANK0 ] unsigned char 
  5723 ;;  sign1           1    3[BANK0 ] unsigned char 
  5724 ;; Return value:  Size  Location     Type
  5725 ;;                  4    8[COMMON] long 
  5726 ;; Registers used:
  5727 ;;		wreg, status,2, status,0
  5728 ;; Tracked objects:
  5729 ;;		On entry : 17F/0
  5730 ;;		On exit  : 17F/0
  5731 ;;		Unchanged: FFE80/0
  5732 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5733 ;;      Params:         4       0       0       0
  5734 ;;      Locals:         0       6       0       0
  5735 ;;      Temps:          0       3       0       0
  5736 ;;      Totals:         4       9       0       0
  5737 ;;Total ram usage:       13 bytes
  5738 ;; Hardware stack levels used:    1
  5739 ;; Hardware stack levels required when called:    1
  5740 ;; This function calls:
  5741 ;;		Nothing
  5742 ;; This function is called by:
  5743 ;;		_readFromEEPROM
  5744 ;; This function uses a non-reentrant model
  5745 ;;
  5746  0F63                     ___fttol:	
  5747                           
  5748                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  5749  0F63  27B8  3188         	fcall	PL17	;call to abstracted procedure
  5750  0F65  1003               	clrc
  5751  0F66  0D4C               	rlf	??___fttol+1,w
  5752  0F67  0D4D               	rlf	??___fttol+2,w
  5753  0F68  00D3               	movwf	___fttol@exp1
  5754  0F69  08D3               	movf	___fttol@exp1,f
  5755  0F6A  1D03               	skipz
  5756  0F6B  2F71               	goto	l5042
  5757  0F6C                     l5040:	
  5758  0F6C  01F8               	clrf	?___fttol
  5759  0F6D  01F9               	clrf	?___fttol+1
  5760  0F6E  01FA               	clrf	?___fttol+2
  5761  0F6F  01FB               	clrf	?___fttol+3
  5762  0F70  0008               	return
  5763  0F71                     l5042:	
  5764  0F71  27B8  3188         	fcall	PL17	;call to abstracted procedure
  5765  0F73  3017               	movlw	23
  5766  0F74                     u2685:	
  5767  0F74  36CD               	lsrf	??___fttol+2,f
  5768  0F75  0CCC               	rrf	??___fttol+1,f
  5769  0F76  0CCB               	rrf	??___fttol,f
  5770  0F77  0B89               	decfsz	9,f
  5771  0F78  2F74               	goto	u2685
  5772  0F79  084B               	movf	??___fttol,w
  5773  0F7A  00CE               	movwf	___fttol@sign1
  5774  0F7B  17F9               	bsf	___fttol@f1+1,7
  5775  0F7C  01FA               	clrf	___fttol@f1+2
  5776  0F7D  0878               	movf	___fttol@f1,w
  5777  0F7E  00CF               	movwf	___fttol@lval
  5778  0F7F  0879               	movf	___fttol@f1+1,w
  5779  0F80  00D0               	movwf	___fttol@lval+1
  5780  0F81  087A               	movf	___fttol@f1+2,w
  5781  0F82  00D1               	movwf	___fttol@lval+2
  5782  0F83  01D2               	clrf	___fttol@lval+3
  5783  0F84  308E               	movlw	142
  5784  0F85  02D3               	subwf	___fttol@exp1,f
  5785  0F86  1FD3               	btfss	___fttol@exp1,7
  5786  0F87  2F94               	goto	l5062
  5787  0F88  0853               	movf	___fttol@exp1,w
  5788  0F89  3A80               	xorlw	128
  5789  0F8A  3E8F               	addlw	143
  5790  0F8B  1C03               	btfss	3,0
  5791  0F8C  2F6C               	goto	l5040
  5792  0F8D                     l5058:	
  5793  0F8D  36D2               	lsrf	___fttol@lval+3,f
  5794  0F8E  0CD1               	rrf	___fttol@lval+2,f
  5795  0F8F  0CD0               	rrf	___fttol@lval+1,f
  5796  0F90  0CCF               	rrf	___fttol@lval,f
  5797  0F91  0FD3               	incfsz	___fttol@exp1,f
  5798  0F92  2F8D               	goto	l5058
  5799  0F93  2FA1               	goto	l5068
  5800  0F94                     l5062:	
  5801  0F94  3018               	movlw	24
  5802  0F95  0253               	subwf	___fttol@exp1,w
  5803  0F96  1803               	btfsc	3,0
  5804  0F97  2F6C               	goto	l5040
  5805  0F98                     l2797:	
  5806  0F98  08D3               	movf	___fttol@exp1,f
  5807  0F99  1903               	btfsc	3,2
  5808  0F9A  2FA1               	goto	l5068
  5809  0F9B  35CF               	lslf	___fttol@lval,f
  5810  0F9C  0DD0               	rlf	___fttol@lval+1,f
  5811  0F9D  0DD1               	rlf	___fttol@lval+2,f
  5812  0F9E  0DD2               	rlf	___fttol@lval+3,f
  5813  0F9F  03D3               	decf	___fttol@exp1,f
  5814  0FA0  2F98               	goto	l2797
  5815  0FA1                     l5068:	
  5816  0FA1  084E               	movf	___fttol@sign1,w
  5817  0FA2  1903               	btfsc	3,2
  5818  0FA3  2FAF               	goto	l5072
  5819  0FA4  09CF               	comf	___fttol@lval,f
  5820  0FA5  09D0               	comf	___fttol@lval+1,f
  5821  0FA6  09D1               	comf	___fttol@lval+2,f
  5822  0FA7  09D2               	comf	___fttol@lval+3,f
  5823  0FA8  0ACF               	incf	___fttol@lval,f
  5824  0FA9  1903               	skipnz
  5825  0FAA  0AD0               	incf	___fttol@lval+1,f
  5826  0FAB  1903               	skipnz
  5827  0FAC  0AD1               	incf	___fttol@lval+2,f
  5828  0FAD  1903               	skipnz
  5829  0FAE  0AD2               	incf	___fttol@lval+3,f
  5830  0FAF                     l5072:	
  5831  0FAF  0852               	movf	___fttol@lval+3,w
  5832  0FB0  00FB               	movwf	?___fttol+3
  5833  0FB1  0851               	movf	___fttol@lval+2,w
  5834  0FB2  00FA               	movwf	?___fttol+2
  5835  0FB3  0850               	movf	___fttol@lval+1,w
  5836  0FB4  00F9               	movwf	?___fttol+1
  5837  0FB5  084F               	movf	___fttol@lval,w
  5838  0FB6  00F8               	movwf	?___fttol
  5839  0FB7  0008               	return
  5840  0FB8                     __end_of___fttol:	
  5841  0FB8                     PL17:	
  5842  0FB8  0878               	movf	___fttol@f1,w
  5843  0FB9  00CB               	movwf	??___fttol
  5844  0FBA  0879               	movf	___fttol@f1+1,w
  5845  0FBB  00CC               	movwf	??___fttol+1
  5846  0FBC  087A               	movf	___fttol@f1+2,w
  5847  0FBD  00CD               	movwf	??___fttol+2
  5848  0FBE  0008               	return
  5849  0FBF                     __ptext589:	
  5850 ;; =============== function _SolarPanelDealWith ends ============
  5851                           
  5852                           
  5853 ;; *************** function _LoadCurrentDealWith *****************
  5854 ;; Defined at:
  5855 ;;		line 475 in file "C:\CTK\CTK80A 150928\CTK80A_Jas\mypic.h"
  5856 ;; Parameters:    Size  Location     Type
  5857 ;;		None
  5858 ;; Auto vars:     Size  Location     Type
  5859 ;;  FbVoltage       2    0        unsigned int 
  5860 ;; Return value:  Size  Location     Type
  5861 ;;		None               void
  5862 ;; Registers used:
  5863 ;;		wreg, status,2, status,0, pclath, cstack
  5864 ;; Tracked objects:
  5865 ;;		On entry : 1F/0
  5866 ;;		On exit  : 1F/0
  5867 ;;		Unchanged: FFFE0/0
  5868 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5869 ;;      Params:         0       0       0       0
  5870 ;;      Locals:         0       2       0       0
  5871 ;;      Temps:          0       0       0       0
  5872 ;;      Totals:         0       2       0       0
  5873 ;;Total ram usage:        2 bytes
  5874 ;; Hardware stack levels used:    1
  5875 ;; Hardware stack levels required when called:    5
  5876 ;; This function calls:
  5877 ;;		_GetLoadCurrentVoltage
  5878 ;; This function is called by:
  5879 ;;		_main
  5880 ;; This function uses a non-reentrant model
  5881 ;;
  5882  0FBF                     _LoadCurrentDealWith:	
  5883                           
  5884                           ;mypic.h: 476: if((BatteryState != 1) && (BatteryState != 6) && LoadOpen)
  5885                           
  5886                           ; Regs used in _LoadCurrentDealWith: [wreg+status,2+status,0+pclath+cstack]
  5887  0FBF  033E               	decf	_BatteryState,w
  5888  0FC0  1903               	skipnz
  5889  0FC1  2FFA               	goto	l2305
  5890  0FC2  083E               	movf	_BatteryState,w
  5891  0FC3  3A06               	xorlw	6
  5892  0FC4  1D03               	btfss	3,2
  5893  0FC5  1EEB               	btfss	_LoadOpen/(0+8),_LoadOpen& (0+7)
  5894  0FC6  2FFA               	goto	l2305
  5895  0FC7  2621  3188         	fcall	_GetLoadCurrentVoltage
  5896                           
  5897                           ;mypic.h: 482: if((FbVoltage < 134) && (LoadState == 1))
  5898  0FC9  18EE               	btfsc	_LoadState/(0+8),_LoadState& (0+7)
  5899                           
  5900                           ;mypic.h: 483: {
  5901                           ;mypic.h: 484: if(LoadFlag == 1)
  5902  0FCA  1C6E               	btfss	_LoadFlag/(0+8),_LoadFlag& (0+7)
  5903  0FCB  2FD1               	goto	l5336
  5904                           
  5905                           ;mypic.h: 485: {
  5906                           ;mypic.h: 486: LoadState = 1;
  5907  0FCC  14EE               	bsf	_LoadState/(0+8),_LoadState& (0+7)
  5908                           
  5909                           ;mypic.h: 487: OverLoadTime = 0;
  5910  0FCD  01AA               	clrf	_OverLoadTime
  5911  0FCE  01AB               	clrf	_OverLoadTime+1
  5912                           
  5913                           ;mypic.h: 488: (PORTA &= ~(1 << 4));
  5914  0FCF  120C               	bcf	12,4	;volatile
  5915                           
  5916                           ;mypic.h: 489: LoadFlag = 0;
  5917  0FD0  106E               	bcf	_LoadFlag/(0+8),_LoadFlag& (0+7)
  5918  0FD1                     l5336:	
  5919                           ;mypic.h: 490: }
  5920                           ;mypic.h: 491: }
  5921                           ;mypic.h: 492: if((FbVoltage >= 134) || (LoadState == 0))
  5922                           
  5923  0FD1  18EE               	btfsc	_LoadState/(0+8),_LoadState& (0+7)
  5924  0FD2  0008               	return
  5925                           
  5926                           ;mypic.h: 493: {
  5927                           ;mypic.h: 494: LoadState = 0;
  5928  0FD3  10EE               	bcf	_LoadState/(0+8),_LoadState& (0+7)
  5929                           
  5930                           ;mypic.h: 495: if(( FbVoltage >= 400) || (LoadShort == 1))
  5931  0FD4  1F6B               	btfss	_LoadShort/(0+8),_LoadShort& (0+7)
  5932  0FD5  2FDC               	goto	l5346
  5933                           
  5934                           ;mypic.h: 496: {
  5935                           ;mypic.h: 497: (PORTA |= (1 << 4));
  5936  0FD6  160C               	bsf	12,4	;volatile
  5937                           
  5938                           ;mypic.h: 498: LoadFlag = 1;
  5939  0FD7  146E               	bsf	_LoadFlag/(0+8),_LoadFlag& (0+7)
  5940                           
  5941                           ;mypic.h: 499: OverLoadTime = 0;
  5942  0FD8  01AA               	clrf	_OverLoadTime
  5943  0FD9  01AB               	clrf	_OverLoadTime+1
  5944                           
  5945                           ;mypic.h: 503: ErrorType = 5;
  5946  0FDA  176B               	bsf	_LoadShort/(0+8),_LoadShort& (0+7)
  5947                           
  5948                           ;mypic.h: 504: }
  5949  0FDB  0008               	return
  5950  0FDC                     l5346:	
  5951                           
  5952                           ;mypic.h: 505: else
  5953                           ;mypic.h: 506: {
  5954                           ;mypic.h: 507: if(OverLoadTime == 0)
  5955  0FDC  082B               	movf	_OverLoadTime+1,w
  5956  0FDD  042A               	iorwf	_OverLoadTime,w
  5957  0FDE  1D03               	skipz
  5958  0FDF  2FE3               	goto	l5350
  5959                           
  5960                           ;mypic.h: 508: {
  5961                           ;mypic.h: 509: OverLoadTime = 1;
  5962  0FE0  01AA               	clrf	_OverLoadTime
  5963  0FE1  0AAA               	incf	_OverLoadTime,f
  5964  0FE2  01AB               	clrf	_OverLoadTime+1
  5965  0FE3                     l5350:	
  5966                           
  5967                           ;mypic.h: 510: }
  5968                           ;mypic.h: 511: if(OverLoadTime >= 3000)
  5969  0FE3  300B               	movlw	11
  5970  0FE4  022B               	subwf	_OverLoadTime+1,w
  5971  0FE5  30B8               	movlw	184
  5972  0FE6  1903               	skipnz
  5973  0FE7  022A               	subwf	_OverLoadTime,w
  5974  0FE8  1C03               	skipc
  5975  0FE9  0008               	return
  5976                           
  5977                           ;mypic.h: 512: {
  5978                           ;mypic.h: 513: OverLoadTime = 1;
  5979  0FEA  01AA               	clrf	_OverLoadTime
  5980  0FEB  0AAA               	incf	_OverLoadTime,f
  5981  0FEC  01AB               	clrf	_OverLoadTime+1
  5982                           
  5983                           ;mypic.h: 514: if(LoadFlag == 0)
  5984  0FED  186E               	btfsc	_LoadFlag/(0+8),_LoadFlag& (0+7)
  5985  0FEE  2FF2               	goto	l2317
  5986                           
  5987                           ;mypic.h: 515: {
  5988                           ;mypic.h: 516: (PORTA |= (1 << 4));
  5989  0FEF  160C               	bsf	12,4	;volatile
  5990                           
  5991                           ;mypic.h: 517: LoadFlag = 1;
  5992  0FF0  146E               	bsf	_LoadFlag/(0+8),_LoadFlag& (0+7)
  5993                           
  5994                           ;mypic.h: 518: }
  5995  0FF1  0008               	return
  5996  0FF2                     l2317:	
  5997                           
  5998                           ;mypic.h: 519: else if(LoadFlag == 1)
  5999  0FF2  1C6E               	btfss	_LoadFlag/(0+8),_LoadFlag& (0+7)
  6000  0FF3  0008               	return
  6001                           
  6002                           ;mypic.h: 520: {
  6003                           ;mypic.h: 521: (PORTA &= ~(1 << 4));
  6004  0FF4  120C               	bcf	12,4	;volatile
  6005                           
  6006                           ;mypic.h: 522: LoadFlag = 0;
  6007  0FF5  106E               	bcf	_LoadFlag/(0+8),_LoadFlag& (0+7)
  6008                           
  6009                           ;mypic.h: 523: LoadState = 1;
  6010  0FF6  14EE               	bsf	_LoadState/(0+8),_LoadState& (0+7)
  6011                           
  6012                           ;mypic.h: 524: OverLoadTime = 0;
  6013  0FF7  01AA               	clrf	_OverLoadTime
  6014  0FF8  01AB               	clrf	_OverLoadTime+1
  6015  0FF9  0008               	return
  6016  0FFA                     l2305:	
  6017                           
  6018                           ;mypic.h: 530: else
  6019                           ;mypic.h: 531: {
  6020                           ;mypic.h: 532: (PORTA |= (1 << 4));
  6021  0FFA  160C               	bsf	12,4	;volatile
  6022                           
  6023                           ;mypic.h: 533: LoadFlag = 1;
  6024  0FFB  146E               	bsf	_LoadFlag/(0+8),_LoadFlag& (0+7)
  6025                           
  6026                           ;mypic.h: 534: OverLoadTime = 0;
  6027  0FFC  01AA               	clrf	_OverLoadTime
  6028  0FFD  01AB               	clrf	_OverLoadTime+1
  6029                           
  6030                           ;mypic.h: 535: LoadState = 1;
  6031  0FFE  14EE               	bsf	_LoadState/(0+8),_LoadState& (0+7)
  6032  0FFF  0008               	return
  6033  1000                     __end_of_LoadCurrentDealWith:	
  6034                           
  6035                           	psect	intentry
  6036  0004                     __pintentry:	
  6037 ;; =============== function _delay ends ============
  6038                           
  6039                           
  6040 ;; *************** function _ISR_Timer *****************
  6041 ;; Defined at:
  6042 ;;		line 216 in file "C:\CTK\CTK80A 150928\CTK80A_Jas\main.c"
  6043 ;; Parameters:    Size  Location     Type
  6044 ;;		None
  6045 ;; Auto vars:     Size  Location     Type
  6046 ;;		None
  6047 ;; Return value:  Size  Location     Type
  6048 ;;		None               void
  6049 ;; Registers used:
  6050 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6051 ;; Tracked objects:
  6052 ;;		On entry : 0/0
  6053 ;;		On exit  : 1F/0
  6054 ;;		Unchanged: FFFE0/0
  6055 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6056 ;;      Params:         0       0       0       0
  6057 ;;      Locals:         0       0       0       0
  6058 ;;      Temps:          0       0       0       0
  6059 ;;      Totals:         0       0       0       0
  6060 ;;Total ram usage:        0 bytes
  6061 ;; Hardware stack levels used:    1
  6062 ;; This function calls:
  6063 ;;		Nothing
  6064 ;; This function is called by:
  6065 ;;		Interrupt level 1
  6066 ;; This function uses a non-reentrant model
  6067 ;;
  6068  0004                     _ISR_Timer:	
  6069                           
  6070                           ; Regs used in _ISR_Timer: [wreg-fsr0h+status,2+status,0]
  6071  0004  3180               	pagesel	$
  6072                           
  6073                           ;main.c: 217: if(IOCBF3 && lcd_state != 0 && lcd_state != 1)
  6074  0005  0027               	movlb	7	; select bank7
  6075  0006  1D96               	btfss	22,3
  6076  0007  283E               	goto	i1l2587
  6077  0008  0020               	movlb	0	; select bank0
  6078  0009  0847               	movf	_lcd_state,w
  6079  000A  1903               	btfsc	3,2
  6080  000B  283E               	goto	i1l2587
  6081  000C  0347               	decf	_lcd_state,w
  6082  000D  1903               	skipnz
  6083  000E  283E               	goto	i1l2587
  6084                           
  6085                           ;main.c: 218: {
  6086                           ;main.c: 220: if (RB3 == 0) {
  6087  000F  198D               	btfsc	13,3
  6088  0010  283C               	goto	i1l2588
  6089                           
  6090                           ;main.c: 221: if (!isSettingMode) {
  6091  0011  1B6C               	btfsc	_isSettingMode/(0+8),_isSettingMode& (0+7)
  6092  0012  281E               	goto	i1l4806
  6093                           
  6094                           ;main.c: 222: lcd_extinguwish_timer = 0;
  6095  0013  01C6               	clrf	_lcd_extinguwish_timer
  6096                           
  6097                           ;main.c: 223: if (lcd_state == 2) {
  6098  0014  0847               	movf	_lcd_state,w
  6099  0015  3A02               	xorlw	2
  6100  0016  1D03               	skipz
  6101  0017  281B               	goto	i1l4802
  6102                           
  6103                           ;main.c: 224: lcd_state = 8;
  6104  0018  3008               	movlw	8
  6105  0019  00C7               	movwf	_lcd_state
  6106                           
  6107                           ;main.c: 225: } else {
  6108  001A  281C               	goto	i1l4804
  6109  001B                     i1l4802:	
  6110                           
  6111                           ;main.c: 226: lcd_state--;
  6112  001B  03C7               	decf	_lcd_state,f
  6113  001C                     i1l4804:	
  6114                           
  6115                           ;main.c: 227: }
  6116                           ;main.c: 228: isNeedChange = 1;
  6117  001C  166C               	bsf	_isNeedChange/(0+8),_isNeedChange& (0+7)
  6118                           
  6119                           ;main.c: 229: } else {
  6120  001D  283C               	goto	i1l2588
  6121  001E                     i1l4806:	
  6122                           
  6123                           ;main.c: 231: setting_save_timer = 0;
  6124  001E  01CA               	clrf	_setting_save_timer
  6125                           
  6126                           ;main.c: 232: setting_no_save_timer = 0;
  6127  001F  01C9               	clrf	_setting_no_save_timer
  6128                           
  6129                           ;main.c: 234: switch (lcd_state) {
  6130  0020  282B               	goto	i1l4818
  6131  0021                     i1l2594:	
  6132                           ;main.c: 235: case 3:
  6133                           
  6134                           
  6135                           ;main.c: 236: if (is_second_setting) {
  6136  0021  1FEC               	btfss	_is_second_setting/(0+8),_is_second_setting& (0+7)
  6137  0022  283C               	goto	i1l2588
  6138                           
  6139                           ;main.c: 237: batteryType == 0 ? batteryType = 2 : batteryType--;
  6140  0023  08C4               	movf	_batteryType,f
  6141  0024  1D03               	skipz
  6142  0025  2829               	goto	i1l4812
  6143  0026  3002               	movlw	2
  6144  0027  00C4               	movwf	_batteryType
  6145  0028  281C               	goto	i1l4804
  6146  0029                     i1l4812:	
  6147  0029  03C4               	decf	_batteryType,f
  6148  002A  281C               	goto	i1l4804
  6149  002B                     i1l4818:	
  6150                           ;main.c: 239: }
  6151                           ;main.c: 240: break;
  6152                           
  6153  002B  0847               	movf	_lcd_state,w
  6154                           
  6155                           ; Switch size 1, requested type "space"
  6156                           ; Number of cases is 6, Range of values is 3 to 8
  6157                           ; switch strategies available:
  6158                           ; Name         Bytes Cycles
  6159                           ; simple_byte    19    10 (average)
  6160                           ; direct_byte    31    19 (fixed)
  6161                           ;	Chosen strategy is simple_byte
  6162  002C  3A03               	xorlw	3	; case 3
  6163  002D  1903               	skipnz
  6164  002E  2821               	goto	i1l2594
  6165  002F  3A07               	xorlw	7	; case 4
  6166  0030  1903               	skipnz
  6167  0031  283C               	goto	i1l2588
  6168  0032  3A01               	xorlw	1	; case 5
  6169  0033  1903               	skipnz
  6170  0034  283C               	goto	i1l2588
  6171  0035  3A03               	xorlw	3	; case 6
  6172  0036  1903               	skipnz
  6173  0037  283C               	goto	i1l2588
  6174  0038  3A01               	xorlw	1	; case 7
  6175  0039  1903               	skipnz
  6176  003A  283C               	goto	i1l2588
  6177  003B  3A0F               	xorlw	15	; case 8
  6178  003C                     i1l2588:	
  6179                           
  6180                           ;main.c: 250: }
  6181                           ;main.c: 251: }
  6182                           ;main.c: 254: IOCBF3 = 0;
  6183  003C  0027               	movlb	7	; select bank7
  6184  003D  1196               	bcf	22,3
  6185  003E                     i1l2587:	
  6186                           
  6187                           ;main.c: 255: }
  6188                           ;main.c: 257: if(IOCBF5 && lcd_state != 0 && lcd_state != 1)
  6189  003E  0027               	movlb	7	; select bank7
  6190  003F  1E96               	btfss	22,5
  6191  0040  2877               	goto	i1l2607
  6192  0041  0020               	movlb	0	; select bank0
  6193  0042  0847               	movf	_lcd_state,w
  6194  0043  1903               	btfsc	3,2
  6195  0044  2877               	goto	i1l2607
  6196  0045  0347               	decf	_lcd_state,w
  6197  0046  1903               	skipnz
  6198  0047  2877               	goto	i1l2607
  6199                           
  6200                           ;main.c: 258: {
  6201                           ;main.c: 259: if (RB5 == 0) {
  6202  0048  1A8D               	btfsc	13,5
  6203  0049  2875               	goto	i1l2608
  6204                           
  6205                           ;main.c: 260: if (!isSettingMode) {
  6206  004A  1B6C               	btfsc	_isSettingMode/(0+8),_isSettingMode& (0+7)
  6207  004B  2857               	goto	i1l4838
  6208                           
  6209                           ;main.c: 261: lcd_extinguwish_timer = 0;
  6210  004C  01C6               	clrf	_lcd_extinguwish_timer
  6211                           
  6212                           ;main.c: 262: if (lcd_state == 8) {
  6213  004D  0847               	movf	_lcd_state,w
  6214  004E  3A08               	xorlw	8
  6215  004F  1D03               	skipz
  6216  0050  2854               	goto	i1l4834
  6217                           
  6218                           ;main.c: 263: lcd_state = 2;
  6219  0051  3002               	movlw	2
  6220  0052  00C7               	movwf	_lcd_state
  6221                           
  6222                           ;main.c: 264: } else {
  6223  0053  2855               	goto	i1l4836
  6224  0054                     i1l4834:	
  6225                           
  6226                           ;main.c: 265: lcd_state++;
  6227  0054  0AC7               	incf	_lcd_state,f
  6228  0055                     i1l4836:	
  6229                           
  6230                           ;main.c: 266: }
  6231                           ;main.c: 267: isNeedChange = 1;
  6232  0055  166C               	bsf	_isNeedChange/(0+8),_isNeedChange& (0+7)
  6233                           
  6234                           ;main.c: 268: } else {
  6235  0056  2875               	goto	i1l2608
  6236  0057                     i1l4838:	
  6237                           
  6238                           ;main.c: 270: setting_save_timer = 0;
  6239  0057  01CA               	clrf	_setting_save_timer
  6240                           
  6241                           ;main.c: 271: setting_no_save_timer = 0;
  6242  0058  01C9               	clrf	_setting_no_save_timer
  6243                           
  6244                           ;main.c: 273: switch (lcd_state) {
  6245  0059  2864               	goto	i1l4850
  6246  005A                     i1l2614:	
  6247                           ;main.c: 274: case 3:
  6248                           
  6249                           
  6250                           ;main.c: 275: if (is_second_setting) {
  6251  005A  1FEC               	btfss	_is_second_setting/(0+8),_is_second_setting& (0+7)
  6252  005B  2875               	goto	i1l2608
  6253                           
  6254                           ;main.c: 276: batteryType == 2 ? batteryType = 0 : batteryType++;
  6255  005C  0844               	movf	_batteryType,w
  6256  005D  3A02               	xorlw	2
  6257  005E  1D03               	skipz
  6258  005F  2862               	goto	i1l4844
  6259  0060  01C4               	clrf	_batteryType
  6260  0061  2855               	goto	i1l4836
  6261  0062                     i1l4844:	
  6262  0062  0AC4               	incf	_batteryType,f
  6263  0063  2855               	goto	i1l4836
  6264  0064                     i1l4850:	
  6265                           ;main.c: 278: }
  6266                           ;main.c: 279: break;
  6267                           
  6268  0064  0847               	movf	_lcd_state,w
  6269                           
  6270                           ; Switch size 1, requested type "space"
  6271                           ; Number of cases is 6, Range of values is 3 to 8
  6272                           ; switch strategies available:
  6273                           ; Name         Bytes Cycles
  6274                           ; simple_byte    19    10 (average)
  6275                           ; direct_byte    31    19 (fixed)
  6276                           ;	Chosen strategy is simple_byte
  6277  0065  3A03               	xorlw	3	; case 3
  6278  0066  1903               	skipnz
  6279  0067  285A               	goto	i1l2614
  6280  0068  3A07               	xorlw	7	; case 4
  6281  0069  1903               	skipnz
  6282  006A  2875               	goto	i1l2608
  6283  006B  3A01               	xorlw	1	; case 5
  6284  006C  1903               	skipnz
  6285  006D  2875               	goto	i1l2608
  6286  006E  3A03               	xorlw	3	; case 6
  6287  006F  1903               	skipnz
  6288  0070  2875               	goto	i1l2608
  6289  0071  3A01               	xorlw	1	; case 7
  6290  0072  1903               	skipnz
  6291  0073  2875               	goto	i1l2608
  6292  0074  3A0F               	xorlw	15	; case 8
  6293  0075                     i1l2608:	
  6294                           
  6295                           ;main.c: 289: }
  6296                           ;main.c: 290: }
  6297                           ;main.c: 293: IOCBF5 = 0;
  6298  0075  0027               	movlb	7	; select bank7
  6299  0076  1296               	bcf	22,5
  6300  0077                     i1l2607:	
  6301                           
  6302                           ;main.c: 294: }
  6303                           ;main.c: 296: if(IOCBF4)
  6304  0077  0027               	movlb	7	; select bank7
  6305  0078  1E16               	btfss	22,4
  6306  0079  2898               	goto	i1l2627
  6307                           
  6308                           ;main.c: 297: {
  6309                           ;main.c: 301: if (RB4 == 0) {
  6310  007A  0020               	movlb	0	; select bank0
  6311  007B  1A0D               	btfsc	13,4
  6312  007C  2894               	goto	i1l4874
  6313                           
  6314                           ;main.c: 302: rb4_flag = 1;
  6315  007D  14ED               	bsf	_rb4_flag/(0+8),_rb4_flag& (0+7)
  6316                           
  6317                           ;main.c: 303: if (!isSettingMode) {
  6318  007E  1B6C               	btfsc	_isSettingMode/(0+8),_isSettingMode& (0+7)
  6319  007F  2884               	goto	i1l4860
  6320                           
  6321                           ;main.c: 304: lcd_extinguwish_timer = 0;
  6322  0080  01C6               	clrf	_lcd_extinguwish_timer
  6323                           
  6324                           ;main.c: 305: isNeedChange = 1;
  6325  0081  166C               	bsf	_isNeedChange/(0+8),_isNeedChange& (0+7)
  6326                           
  6327                           ;main.c: 306: enter_settings_timer = 0;
  6328  0082  01C5               	clrf	_enter_settings_timer
  6329                           
  6330                           ;main.c: 307: } else{
  6331  0083  2894               	goto	i1l4874
  6332  0084                     i1l4860:	
  6333                           
  6334                           ;main.c: 308: setting_save_timer = 0;
  6335  0084  01CA               	clrf	_setting_save_timer
  6336                           
  6337                           ;main.c: 309: setting_no_save_timer = 0;
  6338  0085  01C9               	clrf	_setting_no_save_timer
  6339                           
  6340                           ;main.c: 310: if (!is_second_setting) {
  6341  0086  1BEC               	btfsc	_is_second_setting/(0+8),_is_second_setting& (0+7)
  6342  0087  288A               	goto	i1l2631
  6343                           
  6344                           ;main.c: 311: is_second_setting = 1;
  6345  0088  17EC               	bsf	_is_second_setting/(0+8),_is_second_setting& (0+7)
  6346                           
  6347                           ;main.c: 312: } else {
  6348  0089  2893               	goto	i1l4872
  6349  008A                     i1l2631:	
  6350                           
  6351                           ;main.c: 313: is_second_setting = 0;
  6352  008A  13EC               	bcf	_is_second_setting/(0+8),_is_second_setting& (0+7)
  6353                           
  6354                           ;main.c: 314: if (lcd_state == 8) {
  6355  008B  0847               	movf	_lcd_state,w
  6356  008C  3A08               	xorlw	8
  6357  008D  1D03               	skipz
  6358  008E  2892               	goto	i1l4870
  6359                           
  6360                           ;main.c: 315: lcd_state = 3;
  6361  008F  3003               	movlw	3
  6362  0090  00C7               	movwf	_lcd_state
  6363                           
  6364                           ;main.c: 316: } else {
  6365  0091  2893               	goto	i1l4872
  6366  0092                     i1l4870:	
  6367                           
  6368                           ;main.c: 317: lcd_state ++;
  6369  0092  0AC7               	incf	_lcd_state,f
  6370  0093                     i1l4872:	
  6371                           
  6372                           ;main.c: 318: }
  6373                           ;main.c: 319: }
  6374                           ;main.c: 320: isNeedChange = 1;
  6375  0093  166C               	bsf	_isNeedChange/(0+8),_isNeedChange& (0+7)
  6376  0094                     i1l4874:	
  6377                           
  6378                           ;main.c: 321: }
  6379                           ;main.c: 322: }
  6380                           ;main.c: 325: if (RB4 == 1) {
  6381  0094  1A0D               	btfsc	13,4
  6382                           
  6383                           ;main.c: 326: rb4_flag = 0;
  6384  0095  10ED               	bcf	_rb4_flag/(0+8),_rb4_flag& (0+7)
  6385                           
  6386                           ;main.c: 327: }
  6387                           ;main.c: 329: IOCBF4 = 0;
  6388  0096  0027               	movlb	7	; select bank7
  6389  0097  1216               	bcf	22,4
  6390  0098                     i1l2627:	
  6391                           
  6392                           ;main.c: 330: }
  6393                           ;main.c: 333: if(TMR1IF)
  6394  0098  0020               	movlb	0	; select bank0
  6395  0099  1C11               	btfss	17,0
  6396  009A  290A               	goto	i1l4976
  6397                           
  6398                           ;main.c: 334: {
  6399                           ;main.c: 335: if (lcd_extinguwish_timer < 70 && !isSettingMode) {
  6400  009B  3046               	movlw	70
  6401  009C  0246               	subwf	_lcd_extinguwish_timer,w
  6402  009D  1C03               	btfss	3,0
  6403  009E  1B6C               	btfsc	_isSettingMode/(0+8),_isSettingMode& (0+7)
  6404  009F  28AE               	goto	i1l4898
  6405                           
  6406                           ;main.c: 336: lcd_extinguwish_timer++;
  6407  00A0  0AC6               	incf	_lcd_extinguwish_timer,f
  6408                           
  6409                           ;main.c: 337: if (rb4_flag) {
  6410  00A1  1CED               	btfss	_rb4_flag/(0+8),_rb4_flag& (0+7)
  6411  00A2  28AC               	goto	i1l4896
  6412                           
  6413                           ;main.c: 338: enter_settings_timer++;
  6414  00A3  0AC5               	incf	_enter_settings_timer,f
  6415                           
  6416                           ;main.c: 340: if (enter_settings_timer == 50) {
  6417  00A4  0845               	movf	_enter_settings_timer,w
  6418  00A5  3A32               	xorlw	50
  6419  00A6  1D03               	skipz
  6420  00A7  28D7               	goto	i1l4946
  6421                           
  6422                           ;main.c: 341: enter_settings_timer = 0;
  6423  00A8  01C5               	clrf	_enter_settings_timer
  6424                           
  6425                           ;main.c: 342: isSettingMode = 1;
  6426  00A9  176C               	bsf	_isSettingMode/(0+8),_isSettingMode& (0+7)
  6427                           
  6428                           ;main.c: 343: needInitSetting = 1;
  6429  00AA  146D               	bsf	_needInitSetting/(0+8),_needInitSetting& (0+7)
  6430  00AB  28D7               	goto	i1l4946
  6431  00AC                     i1l4896:	
  6432                           
  6433                           ;main.c: 346: enter_settings_timer = 0;
  6434  00AC  01C5               	clrf	_enter_settings_timer
  6435  00AD  28D7               	goto	i1l4946
  6436  00AE                     i1l4898:	
  6437  00AE  3032               	movlw	50
  6438  00AF  024A               	subwf	_setting_save_timer,w
  6439  00B0  1C03               	skipc
  6440  00B1  28B7               	goto	i1l2644
  6441  00B2  3064               	movlw	100
  6442  00B3  0249               	subwf	_setting_no_save_timer,w
  6443  00B4  1C03               	btfss	3,0
  6444  00B5  1F6C               	btfss	_isSettingMode/(0+8),_isSettingMode& (0+7)
  6445  00B6  28D7               	goto	i1l4946
  6446  00B7                     i1l2644:	
  6447                           
  6448                           ;main.c: 349: if (rb4_flag) {
  6449  00B7  1CED               	btfss	_rb4_flag/(0+8),_rb4_flag& (0+7)
  6450  00B8  28C2               	goto	i1l4912
  6451                           
  6452                           ;main.c: 350: setting_save_timer++;
  6453  00B9  0ACA               	incf	_setting_save_timer,f
  6454                           
  6455                           ;main.c: 351: setting_no_save_timer = 0;
  6456  00BA  01C9               	clrf	_setting_no_save_timer
  6457                           
  6458                           ;main.c: 352: if (setting_save_timer == 50) {
  6459  00BB  084A               	movf	_setting_save_timer,w
  6460  00BC  3A32               	xorlw	50
  6461  00BD  1D03               	skipz
  6462  00BE  28D7               	goto	i1l4946
  6463                           
  6464                           ;main.c: 353: isSettingMode = 0;
  6465  00BF  136C               	bcf	_isSettingMode/(0+8),_isSettingMode& (0+7)
  6466                           
  6467                           ;main.c: 354: isSaveSettings = 1;
  6468  00C0  16EC               	bsf	_isSaveSettings/(0+8),_isSaveSettings& (0+7)
  6469  00C1  28D7               	goto	i1l4946
  6470  00C2                     i1l4912:	
  6471                           
  6472                           ;main.c: 357: setting_save_timer = 0;
  6473  00C2  01CA               	clrf	_setting_save_timer
  6474                           
  6475                           ;main.c: 358: setting_no_save_timer++;
  6476  00C3  0AC9               	incf	_setting_no_save_timer,f
  6477                           
  6478                           ;main.c: 359: if (setting_no_save_timer == 100) {
  6479  00C4  0849               	movf	_setting_no_save_timer,w
  6480  00C5  3A64               	xorlw	100
  6481  00C6  1D03               	skipz
  6482  00C7  28D7               	goto	i1l4946
  6483                           
  6484                           ;main.c: 360: isSettingMode = 0;
  6485  00C8  136C               	bcf	_isSettingMode/(0+8),_isSettingMode& (0+7)
  6486                           
  6487                           ;main.c: 361: lcd_state = 2;
  6488  00C9  3002               	movlw	2
  6489  00CA  00C7               	movwf	_lcd_state
  6490                           
  6491                           ;main.c: 362: isNeedChange = 1;
  6492  00CB  166C               	bsf	_isNeedChange/(0+8),_isNeedChange& (0+7)
  6493  00CC  28D7               	goto	i1l4946
  6494  00CD                     i1l4924:	
  6495                           ;main.c: 363: }
  6496                           ;main.c: 364: }
  6497                           ;main.c: 367: }
  6498                           ;main.c: 371: switch(lcd_state) {
  6499                           
  6500                           
  6501                           ;main.c: 373: if (lcd_timer < 30) {
  6502  00CD  301E               	movlw	30
  6503  00CE  0248               	subwf	_lcd_timer,w
  6504  00CF  1803               	skipnc
  6505  00D0  28D3               	goto	i1l4928
  6506                           
  6507                           ;main.c: 374: lcd_timer++;
  6508  00D1  0AC8               	incf	_lcd_timer,f
  6509                           
  6510                           ;main.c: 375: } else {
  6511  00D2  28DE               	goto	i1l2653
  6512  00D3                     i1l4928:	
  6513                           
  6514                           ;main.c: 376: lcd_timer = 0;
  6515  00D3  01C8               	clrf	_lcd_timer
  6516                           
  6517                           ;main.c: 377: lcd_state++;
  6518  00D4  0AC7               	incf	_lcd_state,f
  6519                           
  6520                           ;main.c: 378: isNeedChange = 1;
  6521  00D5  166C               	bsf	_isNeedChange/(0+8),_isNeedChange& (0+7)
  6522  00D6  28DE               	goto	i1l2653
  6523  00D7                     i1l4946:	
  6524                           ;main.c: 382: if (lcd_timer < 30) {
  6525                           
  6526  00D7  0847               	movf	_lcd_state,w
  6527                           
  6528                           ; Switch size 1, requested type "space"
  6529                           ; Number of cases is 2, Range of values is 0 to 1
  6530                           ; switch strategies available:
  6531                           ; Name         Bytes Cycles
  6532                           ; simple_byte     7     4 (average)
  6533                           ; direct_byte    20    16 (fixed)
  6534                           ;	Chosen strategy is simple_byte
  6535  00D8  3A00               	xorlw	0	; case 0
  6536  00D9  1903               	skipnz
  6537  00DA  28CD               	goto	i1l4924
  6538  00DB  3A01               	xorlw	1	; case 1
  6539  00DC  1903               	skipnz
  6540  00DD  28CD               	goto	i1l4924
  6541  00DE                     i1l2653:	
  6542                           
  6543                           ;main.c: 393: TMR1IF = 0;
  6544  00DE  1011               	bcf	17,0
  6545                           
  6546                           ;main.c: 394: TMR1H = (65536 - (100000 / 4)) >> 8;
  6547  00DF  309E               	movlw	158
  6548  00E0  0097               	movwf	23	;volatile
  6549                           
  6550                           ;main.c: 395: TMR1L = (65536 - (100000 / 4)) & 0xFF;
  6551  00E1  3058               	movlw	88
  6552  00E2  0096               	movwf	22	;volatile
  6553                           
  6554                           ;main.c: 397: PWMChargeFlag = 1;
  6555  00E3  14EC               	bsf	_PWMChargeFlag/(0+8),_PWMChargeFlag& (0+7)
  6556                           
  6557                           ;main.c: 399: if(SystemModeType == 0X05)
  6558  00E4  086F               	movf	_SystemModeType,w
  6559  00E5  3A05               	xorlw	5
  6560  00E6  1D03               	skipz
  6561  00E7  28EC               	goto	i1l4954
  6562                           
  6563                           ;main.c: 400: {
  6564                           ;main.c: 401: TimeModeHour++;
  6565  00E8  0AB2               	incf	_TimeModeHour,f
  6566  00E9  1903               	skipnz
  6567  00EA  0AB3               	incf	_TimeModeHour+1,f
  6568                           
  6569                           ;main.c: 402: }
  6570  00EB  28EE               	goto	i1l4956
  6571  00EC                     i1l4954:	
  6572                           
  6573                           ;main.c: 403: else
  6574                           ;main.c: 404: {
  6575                           ;main.c: 405: TimeModeHour = 0;
  6576  00EC  01B2               	clrf	_TimeModeHour
  6577  00ED  01B3               	clrf	_TimeModeHour+1
  6578  00EE                     i1l4956:	
  6579                           
  6580                           ;main.c: 406: }
  6581                           ;main.c: 408: if(EnhanceChargeFlag)
  6582  00EE  1CEB               	btfss	_EnhanceChargeFlag/(0+8),_EnhanceChargeFlag& (0+7)
  6583  00EF  28F3               	goto	i1l4960
  6584                           
  6585                           ;main.c: 409: {
  6586                           ;main.c: 410: EnhanceCharge_Time++;
  6587  00F0  0AA6               	incf	_EnhanceCharge_Time,f
  6588  00F1  1903               	skipnz
  6589  00F2  0AA7               	incf	_EnhanceCharge_Time+1,f
  6590  00F3                     i1l4960:	
  6591                           
  6592                           ;main.c: 411: }
  6593                           ;main.c: 412: if(EqualizingChargeFlag)
  6594  00F3  1D6B               	btfss	_EqualizingChargeFlag/(0+8),_EqualizingChargeFlag& (0+7)
  6595  00F4  28F8               	goto	i1l4964
  6596                           
  6597                           ;main.c: 413: {
  6598                           ;main.c: 414: EqualizingCharge_Time++;
  6599  00F5  0AA8               	incf	_EqualizingCharge_Time,f
  6600  00F6  1903               	skipnz
  6601  00F7  0AA9               	incf	_EqualizingCharge_Time+1,f
  6602  00F8                     i1l4964:	
  6603                           
  6604                           ;main.c: 415: }
  6605                           ;main.c: 416: if(OverLoadTime != 0)
  6606  00F8  082B               	movf	_OverLoadTime+1,w
  6607  00F9  042A               	iorwf	_OverLoadTime,w
  6608  00FA  1903               	skipnz
  6609  00FB  28FF               	goto	i1l4968
  6610                           
  6611                           ;main.c: 417: {
  6612                           ;main.c: 418: OverLoadTime++;
  6613  00FC  0AAA               	incf	_OverLoadTime,f
  6614  00FD  1903               	skipnz
  6615  00FE  0AAB               	incf	_OverLoadTime+1,f
  6616  00FF                     i1l4968:	
  6617                           
  6618                           ;main.c: 419: }
  6619                           ;main.c: 420: if(SystemErrorCount)
  6620  00FF  0831               	movf	_SystemErrorCount+1,w
  6621  0100  0430               	iorwf	_SystemErrorCount,w
  6622  0101  1903               	skipnz
  6623  0102  2906               	goto	i1l2663
  6624                           
  6625                           ;main.c: 421: {
  6626                           ;main.c: 422: SystemErrorCount++;
  6627  0103  0AB0               	incf	_SystemErrorCount,f
  6628  0104  1903               	skipnz
  6629  0105  0AB1               	incf	_SystemErrorCount+1,f
  6630  0106                     i1l2663:	
  6631                           
  6632                           ;main.c: 423: }
  6633                           ;main.c: 424: PVCount++;
  6634  0106  0AC2               	incf	_PVCount,f
  6635                           
  6636                           ;main.c: 426: if(LPVCount)
  6637  0107  0840               	movf	_LPVCount,w
  6638  0108  1D03               	skipz
  6639                           
  6640                           ;main.c: 427: {
  6641                           ;main.c: 428: LPVCount++;
  6642  0109  0AC0               	incf	_LPVCount,f
  6643  010A                     i1l4976:	
  6644                           
  6645                           ;main.c: 429: }
  6646                           ;main.c: 430: }
  6647                           ;main.c: 431: if(TMR2IF)
  6648  010A  1C91               	btfss	17,1
  6649  010B  2917               	goto	i1l2665
  6650                           
  6651                           ;main.c: 432: {
  6652                           ;main.c: 433: TMR2IF = 0;
  6653  010C  1091               	bcf	17,1
  6654                           
  6655                           ;main.c: 434: if(PWMFlag == 1)
  6656  010D  1D6C               	btfss	_PWMFlag/(0+8),_PWMFlag& (0+7)
  6657  010E  2917               	goto	i1l2665
  6658                           
  6659                           ;main.c: 435: {
  6660                           ;main.c: 436: PwmCount++;
  6661  010F  0AC3               	incf	_PwmCount,f
  6662                           
  6663                           ;main.c: 438: if(PwmCount >= DutyRatio)
  6664  0110  083F               	movf	_DutyRatio,w
  6665  0111  0243               	subwf	_PwmCount,w
  6666  0112  1C03               	skipc
  6667  0113  2916               	goto	i1l2667
  6668                           
  6669                           ;main.c: 439: (PORTA |= (1 << 0));
  6670  0114  140C               	bsf	12,0	;volatile
  6671  0115  2917               	goto	i1l2665
  6672  0116                     i1l2667:	
  6673                           
  6674                           ;main.c: 440: else
  6675                           ;main.c: 441: (PORTA &= ~(1 << 0));
  6676  0116  100C               	bcf	12,0	;volatile
  6677  0117                     i1l2665:	
  6678                           
  6679                           ;main.c: 442: }
  6680                           ;main.c: 443: }
  6681                           ;main.c: 444: if(TMR4IF)
  6682  0117  1C93               	btfss	19,1
  6683  0118  291C               	goto	i1l4990
  6684                           
  6685                           ;main.c: 445: {
  6686                           ;main.c: 446: TMR4IF = 0;
  6687  0119  1093               	bcf	19,1
  6688                           
  6689                           ;main.c: 447: RE2 = ~RE2;
  6690  011A  3004               	movlw	4
  6691  011B  0690               	xorwf	16,f
  6692  011C                     i1l4990:	
  6693                           
  6694                           ;main.c: 448: }
  6695                           ;main.c: 449: if(TMR6IF)
  6696  011C  1993               	btfsc	19,3
  6697                           
  6698                           ;main.c: 450: {
  6699                           ;main.c: 451: TMR6IF = 0;
  6700  011D  1193               	bcf	19,3
  6701  011E  0009               	retfie
  6702  011F                     __end_of_ISR_Timer:	
  6703                           
  6704 ;; =============== function _ISR_Timer ends ============
  6705  007E                     btemp	set	126	;btemp
  6706  007E                     wtemp0	set	126


HI-TECH Software PICC Macro Assembler V9.80 build 6738 
Symbol Table                                                                                   Wed Nov 04 17:35:37 2015

                                 _RD 0CA8         PWMCharge@ChangeBatteryVoltag 005C  
                ___wmul@multiplicand 0072                       ?_lcd_move_char 0070  
                     _isSaveSettings 0365                           ReadEE@addr 0070  
                                _GIE 005F                                  _RC1 0071  
                                _RB3 006B                                  _RC2 0072  
                                _RB4 006C                                  _RC3 0073  
                                _RB5 006D                                  _RB6 006E  
                                _RE2 0082                                  _PR2 001B  
                                _PR4 0416                 ??_SwitchBatteryState 005C  
                                wreg 0009                         _PVChargeFlag 035F  
                       ___ftdiv@cntr 0060                         ___ftdiv@sign 0065  
                               l2241 0E05                                 l2305 0FFA  
                               l2250 0000                                 l2331 0A81  
                               l2244 0E0D                                 l2500 0000  
                               l2229 0000                                 l2317 0FF2  
                               l2334 0ABC                                 l2350 0320  
                               l2342 0328                                 l2406 0C1A  
                               l2247 0000                                 l2503 0000  
                               l2511 0986                                 l2327 0A5D  
                               l2423 0000                                 l5000 0AED  
                               l2256 0818                                 l2272 0000  
                               l2344 02F0                                 l2521 0000  
                               l5002 0000                                 l5010 0000  
                               l2346 0305                                 l2291 0CCB  
                               l2259 0000                                 l2515 0000  
                               l2275 0000                                 l5004 0000  
                               l5020 0F39                                 l5012 0000  
                               l5100 0000                                 l2284 0000  
                               l2454 0CDC                                 l5022 0F3E  
                               l5014 0F31                                 l5110 0000  
                               l5102 0000                                 l2278 0000  
                               l2455 0CE1                                 l2527 0000  
                               l2296 0CD3                                 l2456 0CE6  
                               l5032 0000                                 l5024 0F47  
                               l5040 0F6C                                 l5112 0000  
                               l5104 0000                                 l5120 0000  
                               l2289 0CCD                                 l2385 0BAC  
                               l2377 0B48                                 l5034 0000  
                               l5026 0F4C                                 l5018 0F35  
                               l5050 0000                                 l5042 0F71  
                               l5114 0000                                 l5106 0000  
                               l5122 0000                                 l5202 0000  
                               l5210 0000                                 l5036 0000  
                               l5028 0F50                                 l5060 0000  
                               l5052 0000                                 l5044 0000  
                               l5116 0000                                 l5108 0000  
                               l5132 0000                                 l5124 0000  
                               l5140 0000                                 l5220 0DD9  
                               l5212 0000                                 l5300 0000  
                               l5070 0000                                 l5062 0F94  
                               l5046 0000                                 l5038 0000  
                               l5118 0000                                 l5134 0000  
                               l5126 0000                                 l5142 0000  
                               l5150 0000                                 l2494 0000  
                               l5214 0000                                 l5206 0000  
                               l5230 0000                                 l5310 0000  
                               l2903 0000                                 l5072 0FAF  
                               l5048 0000                                 l5080 0000  
                               l5128 0000                                 l5144 0000  
                               l5152 0000                                 l5216 0000  
                               l5208 0DA5                                 l5224 0DE0  
                               l5240 0000                                 l5304 0000  
                               l5320 0000                                 l5400 0000  
                               l2497 0000                                 l5058 0F8D  
                               l5090 0000                                 l5082 0000  
                               l5146 0000                                 l5138 0000  
                               l5154 0000                                 l5170 0000  
                               l2770 0EE9                                 l5226 0DFF  
                               l5218 0000                                 l5250 0000  
                               l5306 0000                                 l5330 0000  
                               l5322 0000                                 l5410 0000  
                               l5402 0000                                 l2683 0000  
                               l5068 0FA1                                 l5092 0000  
                               l5084 0000                                 l5076 0000  
                               l5156 0000                                 l5148 0000  
                               l5180 0000                                 l5172 0000  
                               l5164 0ED8                                 l5236 0D3C  
                               l5260 0000                                 l5340 0000  
                               l5332 0000                                 l5412 0000  
                               l5404 0A68                                 l5500 0000  
                               l4710 0000                                 l4702 0000  
                               l5094 0000                                 l5086 0000  
                               l5078 0000                                 l5182 0000  
                               l5174 0000                                 l5158 0000  
                               l5254 0000                                 l5238 0000  
                               l5262 0000                                 l5270 0000  
                               l5350 0FE3                                 l5342 0000  
                               l5318 0000                                 l5430 0000  
                               l5422 0A83                                 l5414 0000  
                               l5510 0B34                                 l5502 0000  
                               l4640 09C5                                 l4704 0CC6  
                               l4720 0000                                 l5096 0000  
                               l5088 0000                                 l5192 0000  
                               l5184 0000                                 l5176 0000  
                               l5248 0D5F                                 l5280 098D  
                               l5272 0000                                 l5360 0000  
                               l5344 0000                                 l5336 0FD1  
                               l5328 0000                                 l5432 0AA3  
                               l5416 0000                                 l5408 0000  
                               l5600 0000                                 l5520 0000  
                               l5504 0000                                 l4642 09C9  
                               l4706 0CC9                                 l4722 0000  
                               l5098 0000                                 l5194 0F12  
                               l5186 0000                                 l5178 0000  
                               l5266 0000                                 l5258 0000  
                               l5274 0000                                 l5282 0000  
                               l5290 0000                                 l5362 0000  
                               l5354 0000                                 l5346 0FDC  
                               l5338 0000                                 l5442 0000  
                               l5426 0000                                 l5418 0A78  
                               l5450 0000                                 l5602 0000  
                               l5530 0000                                 l5514 0000  
                               l5522 0B3C                                 l5506 0B2A  
                               l4660 0B01                                 l4724 0000  
                               l5196 0000                                 l5188 0EFC  
                               l5268 0973                                 l5292 0000  
                               l5364 0000                                 l5444 0000  
                               l5428 0000                                 l5372 0000  
                               l5460 0000                                 l5612 0000  
                               l5620 0BD5                                 l5604 0BC7  
                               l5540 0000                                 l5516 0000  
                               l2797 0F98                                 l4654 0000  
                               l4662 0B05                                 l5198 0000  
                               l5278 0000                                 l5286 0000  
                               l5294 0000                                 l5390 0000  
                               l5382 0000                                 l5374 0000  
                               l5366 0000                                 l5614 0000  
                               l5550 0000                                 l5534 0000  
                               l5526 0000                                 l5518 0000  
                               l4680 0000                                 l5288 09B2  
                               l5392 0000                                 l5376 0000  
                               l5480 032F                                 l5456 0000  
                               l5448 0000                                 l5712 0000  
                               l5720 0C12                                 l5640 0000  
                               l5632 0000                                 l5624 0000  
                               l5616 0000                                 l5608 0BCC  
                               l5552 0000                                 l5536 0000  
                               l5544 0B62                                 l5528 0000  
                               l5800 0000                                 l4674 0000  
                               l5298 0000                                 l5386 0000  
                               l5378 0A4A                                 l5482 0000  
                               l5466 030A                                 l5714 0000  
                               l5642 0000                                 l5634 0BE0  
                               l5626 0000                                 l5618 0000  
                               l5562 0000                                 l5570 0B91  
                               l5554 0000                                 l5538 0000  
                               l5490 0000                                 l5810 0000  
                               l5802 0000                                 l4684 0000  
                               l5396 0000                                 l5388 0000  
                               l5484 0000                                 l5476 0325  
                               l5468 030C                                 l5740 0000  
                               l5724 0000                                 l5716 0000  
                               l5708 0C09                                 l5636 0000  
                               l5628 0000                                 l5564 0000  
                               l5556 0B81                                 l5548 0000  
                               l5492 0000                                 l5900 0906  
                               l5820 0000                                 l5812 0000  
                               l5804 0000                                 l4686 0000  
                               l4694 0000                                 l5398 0000  
                               l5750 0000                                 l5742 0000  
                               l5734 0C1C                                 l5726 0000  
                               l5718 0000                                 l5662 0000  
                               l5670 0BEF                                 l5590 0000  
                               l5582 0000                                 l5574 0000  
                               l5566 0000                                 l5558 0B88  
                               l5494 0000                                 l5486 0000  
                               l5902 0000                                 l5822 0875  
                               l5814 0000                                 l5806 0862  
                               l4688 0000                                 l4776 0000  
                               l5752 0000                                 l5744 0000  
                               l5728 0000                                 l5664 0000  
                               l5592 0000                                 l5584 0B9C  
                               l5576 0000                                 l5568 0000  
                               l5496 0000                                 l5488 0B1A  
                               l5920 0000                                 l5912 091C  
                               l5904 0000                                 l5840 0000  
                               l5832 087F                                 l5816 0000  
                               l5808 0000                                 l4698 0000  
                               l5754 0000                                 l5746 0000  
                               l5738 0000                                 l5690 0000  
                               l5682 0000                                 l5674 0000  
                               l5666 0000                                 l5658 0BE6  
                               l5594 0000                                 l5586 0000  
                               l5578 0000                                 l5498 0000  
                               l5762 0C3B                                 l5770 09EC  
                               l5914 0920                                 l5906 0000  
                               l5850 0000                                 l5842 0898  
                               l5834 0000                                 l5930 093A  
                               l5826 0000                                 l5748 0000  
                               l5756 0C2E                                 l5692 0000  
                               l5684 0BFA                                 l5676 0000  
                               l5668 0000                                 l5596 0BB8  
                               l5780 0A28                                 l5764 0000  
                               l5916 0000                                 l5860 0000  
                               l5844 0000                                 l5836 0889  
                               l5932 0953                                 l5828 087B  
                               _ADGO 04E9                                 l5758 0000  
                               l5686 0000                                 l5678 0000  
                               l5766 0000                                 l5942 0000  
                               l5926 0936                                 l5918 0000  
                               l5870 08CC                                 l5862 0000  
                               l5846 0000                                 l5838 0000  
                               l5790 0000                                 l5784 0000  
                               l5776 09FC                                 l5952 0000  
                               l5944 0000                                 l5936 0000  
                               l5872 08D0                                 l5864 0000  
                               l5856 08B2                                 l5848 0000  
                               l5792 0000                                 l4994 0000  
                               l5954 0000                                 l5946 0962  
                               l5938 095B                                 l5890 0000  
                               l5874 0000                                 l5858 08B6  
                               l5794 0000                                 l5786 0000  
                               l4996 0AE7                                 l5892 0000  
                               l5884 08E8                                 l5876 0000  
                               l5796 0000                                 l5788 0000  
                               l5886 08EC                                 l5878 0000  
                               l5798 0000                                 l5888 0000  
                               l5898 0902                                 _CFGS 0CAE  
                               _LATB 010D                                 _LATC 010E  
                               u3115 0AE0                                 u3065 0A9D  
                               u3155 02F7                                 u3325 0BA7  
                               u3185 0312                                 u3425 0C06  
                               u3265 0B59                                 u3515 0A1D  
                               u3285 0B7F                                 u2815 0D4D  
                               u2680 0000                                 u2825 0D59  
                               _PEIE 005E                                 u2685 0F74  
                               u2765 0821                                 u2795 0F09  
                  _is_second_setting 0367               __end_of_lcd_write_data 0CA9  
                               _main 0843           __size_of_system_state_init 0048  
                       ___ftpack@arg 0070                         ___ftpack@exp 0073  
                               fsr0h 0005                                 fsr1h 0007  
                               fsr0l 0004                                 indf0 0000  
                               indf1 0001                                 fsr1l 0006  
                               btemp 007E                                 start 011F  
                  _load_system_state 0D83                   ?_load_system_state 0070  
                       ___fttol@exp1 0053                         ___fttol@lval 004F  
                         _LedDisplay 0CD8                    _GetBatteryVoltage 0C53  
                ??_load_system_state 007E                        _isSettingMode 0366  
                              ?_main 0070                      __end_of___ftdiv 0F29  
                              _EEPGD 0CAF                                _T1CON 0018  
                    __end_of___fttol 0FB8                                _T2CON 001C  
                              _T4CON 0417                                _IOCBN 0395  
                              _IOCBP 0394                   ?_GetBatteryVoltage 005A  
                              _TMR1H 0017                                _TMR1L 0016  
                              _PORTA 000C                                _PORTB 000D  
                              _PORTD 000F                                _PORTE 0010  
                              _TRISA 008C                                _TRISB 008D  
                              _TRISC 008E                                _TRISD 008F  
                              _TRISE 0090                   __size_of_ISR_Timer 011B  
                              _Delay 0B01                                _KaiJi 09DD  
               _enter_settings_timer 0045                                _delay 09C5  
                ??_GetBatteryVoltage 007D                        ___ftpack@sign 0074  
                        _Battery_12V 00A3                          _Battery_24V 00B9  
                 __size_of_PWMCharge 0050                      ?_lcd_write_data 0070  
          __end_of_load_system_state 0DA0                                status 0003  
                              wtemp0 007E                     ?_lcd_print_line1 0077  
                   ?_lcd_print_line2 0077           __size_of_lcd_write_command 000B  
                        _systemType1 00DB                   _setting_save_timer 004A  
                       __end_of_main 096B            __end_of_GetBatteryVoltage 0C5A  
                    ??_lcd_move_char 0077                   readFromEEPROM@type 006A  
                 _gSolarPanelVoltage 003A          __size_of_BatteryStateSwitch 0044  
                             ??_main 007E                        ___fttol@sign1 004E  
                             ?_Delay 0070                               ?_KaiJi 0070  
                             ?_delay 0070                               _ADCON0 009D  
                             _ADCON1 009E                               _ADRESH 009C  
                             _ADRESL 009B                               _EEADRL 0191  
                             _EEDATL 0193                               _ADBase 0020  
                             _ANSELA 018C                               _ANSELB 018D  
                             _ANSELE 0190                     __end_of___ftpack 0F63  
                             _IOCBF3 1CB3                               _IOCBF4 1CB4  
                             _IOCBF5 1CB5                               i1l2614 005A  
                             i1l2631 008A                               i1l2607 0077  
                             i1l2608 0075                               i1l2627 0098  
                             i1l2644 00B7                               i1l2653 00DE  
                             i1l2663 0106                               i1l2665 0117  
                             i1l2594 0021                               i1l2667 0116  
                             i1l2587 003E                               i1l2588 003C  
                             Delay@a 0072                               Delay@b 0074  
                             i1l4802 001B                               i1l4812 0029  
                             i1l4804 001C                               i1l4830 0000  
                             i1l4822 0000                               i1l4806 001E  
                             i1l4920 0000                               i1l4912 00C2  
                             i1l4930 0000                               i1l4922 0000  
                             i1l4914 0000                               i1l4906 0000  
                             i1l4850 0064                               i1l4834 0054  
                             i1l4818 002B                               i1l4932 0000  
                             i1l4924 00CD                               i1l4916 0000  
                             i1l4908 0000                               i1l4860 0084  
                             i1l4844 0062                               i1l4836 0055  
                             i1l4950 0000                               i1l4870 0092  
                             i1l4862 0000                               i1l4838 0057  
                             i1l4790 0000                               i1l4960 00F3  
                             i1l4928 00D3                               i1l4872 0093  
                             i1l4954 00EC                               i1l4946 00D7  
                             i1l4866 0000                               i1l4858 0000  
                             i1l4874 0094                               i1l4786 0000  
                             i1l4972 0000                               i1l4964 00F8  
                             i1l4956 00EE                               i1l4948 0000  
                             i1l4892 0000                               i1l4884 0000  
                             Delay@x 0070                               i1l4990 011C  
                             i1l4982 0000                               i1l4974 0000  
                             i1l4894 0000                               i1l4798 0000  
                             i1l4968 00FF                               i1l4888 0000  
                             i1l4896 00AC                               i1l4976 010A  
                             i1l4898 00AE                           _SelectMode 0CA9  
                             i1l4988 0000                               _FVRCON 0117  
                             _T2Flag 0363                     __end_of___lwtoft 0E21  
                             _OSCCON 0099                               _TMR0IE 005D  
                             _TMR1IE 0488                               _TMR1IF 0088  
                      getADValue@max 0052                               _TMR2IE 0489  
                             _TMR2IF 0089                        getADValue@min 0054  
                             _TMR4IE 0499                               _TMR4IF 0099  
                             _TMR6IF 009B                               _WDTCON 0097  
                         _gFbVoltage 0038                               _ReadEE 0E04  
                  __end_of_ISR_Timer 011F                  _batteryStatePointer 00A0  
             lcd_print_line1@postion 0079                     __end_of_lcd_init 0843  
             lcd_print_line2@postion 0079                               ___wmul 0AE5  
                          ??___ftdiv 005D                            ??___fttol 004B  
                        ?_LedDisplay 0070         __end_of_GetSolarPanelVoltage 0B01  
                    _needInitSetting 0368                   _SolarPanelDealWith 0A33  
                             delay@a 0072                               delay@b 0074  
                             delay@x 0070                    __end_of_PWMCharge 0334  
                             clrloop 03A3                  ?_SolarPanelDealWith 0070  
                       _BatteryState 003E           __size_of_load_system_state 001D  
                       _ClampVoltage 0024                           ___ftdiv@f1 005A  
                         ___ftdiv@f2 0057                           ___ftdiv@f3 0061  
               ??_SolarPanelDealWith 005C                        __end_of_Delay 0B19  
                      __end_of_KaiJi 0A33                           ___fttol@f1 0078  
                     __pcstackCOMMON 0070                         __pidataBANK0 0000  
                       __pidataBANK1 0339           __size_of_GetBatteryVoltage 0007  
                      __end_of_delay 09DD                         __pbitnvBANK0 0370  
              _GetLoadCurrentVoltage 0E21  SolarPanelDealWith@SolarPanelVoltage 0062  
             getADValue@AD_OneResult 0058         __size_of_LoadCurrentDealWith 0041  
                         ___lwtoft@c 0054              __size_of_readFromEEPROM 0064  
               lcd_print_line1@clear 007A                              ??_Delay 0072  
                            ??_KaiJi 005C                              ??_delay 0072  
                         _getADValue 0D34                           __pbssBANK0 0020  
                        ?_SelectMode 0070                  __size_of_LedDisplay 0014  
                            ?_ReadEE 0070                    _getADValueOneTime 080A  
   BatteryStateSwitch@BatteryVoltage 0070                           __pmaintext 0843  
               lcd_move_char@postion 0077                   ?_getADValueOneTime 0076  
                            ?___wmul 0070                           __pintentry 0004  
                     lcd_move_char@i 0078                            ?___ftpack 0070  
                            _DAYTIME 0358                  ??_getADValueOneTime 0078  
                          ?___lwtoft 0054          __size_of_SwitchBatteryState 013A  
                            _LPVFlag 035C                     ??_lcd_write_data 0076  
                          ?_lcd_init 0070                              _PWMFlag 0362  
                         __stringtab 0200                              _PVCount 0042  
                 lcd_write_data@data 0076                              _PVState 0360  
               _GetSolarPanelVoltage 0AFA            __end_of_getADValueOneTime 0834  
                    __size_of_ReadEE 000D                              ___ftdiv 0EC7  
                    __size_of___wmul 0015                              ___fttol 0F63  
             ?_GetLoadCurrentVoltage 005A             BatteryStateSwitch@adjust 0076  
                         ??___ftpack 0075                  __size_of_SelectMode 002F  
                         ??___lwtoft 007C                    _EnhanceChargeFlag 0359  
                          _ADVoltage 0022                         _isNeedChange 0364  
                            _welcome 00E6                          ?_getADValue 004B  
                         ??_lcd_init 0077                 end_of_initialization 039F  
              ?_GetSolarPanelVoltage 005A                              init_ram 03A8  
                            initloop 03A9                   _FloatingChargeFlag 035B  
         __end_of_BatteryStateSwitch 0C9E                         ??_LedDisplay 0070  
                          _ISR_Timer 0004             __size_of_lcd_print_line1 0024  
           __size_of_lcd_print_line2 001A                __end_of_lcd_move_char 097C  
               _EqualizingChargeFlag 035A                       _readFromEEPROM 0DA0  
                   _SDBatteryVoltage 002C                            _PWMCharge 02E4  
           lcd_write_command@command 0076                   __end_of_LedDisplay 0CEC  
                _LoadCurrentDealWith 0FBF                          ___ftdiv@exp 0064  
         __size_of_getADValueOneTime 002A                       __end_of_ReadEE 0E11  
           getADValueOneTime@channel 007A                  getADValue@AD_Result 0050  
                         ?_ISR_Timer 0070               __end_of_readFromEEPROM 0E04  
                __size_of_getADValue 004F                       __end_of___wmul 0AFA  
               ?_LoadCurrentDealWith 0070                      _gBatteryVoltage 0036  
                      __pbitbssBANK0 0358                  start_initialization 0387  
                         ?_PWMCharge 0070                            _LoadShort 035E  
                          _LoadState 0371                            _LightTime 0041  
             ??_GetSolarPanelVoltage 007D                            _DutyRatio 003F  
               readFromEEPROM@h_byte 0067                 readFromEEPROM@l_byte 0066  
                       ??_SelectMode 0070                _lcd_extinguwish_timer 0046  
                           ??_ReadEE 0070          __size_of_SolarPanelDealWith 00B2  
         lcd_print_line1@charPointer 0077                             ??___wmul 0074  
                    ?_readFromEEPROM 007C                          __pdataBANK0 006F  
                        __pdataBANK1 00A0                ??_LoadCurrentDealWith 007E  
                 __end_of_SelectMode 0CD8                          _charPointer 0034  
                  __size_of___ftpack 003A                    ??_lcd_print_line1 007B  
                  ??_lcd_print_line2 007A                    __size_of___lwtoft 0010  
                      __pcstackBANK0 004B                     _BatteryLastState 003C  
            readFromEEPROM@read_data 0068                    __size_of_lcd_init 000F  
                        _batteryType 0044              ??_GetLoadCurrentVoltage 007D  
         lcd_print_line2@charPointer 0077                  _SDSolarPanelVoltage 002E  
                          __ptext600 0E11                            __ptext601 0EC7  
                          __ptext610 0C5A                            __ptext602 09A0  
                          __ptext611 0CA9                            __ptext603 0C9E  
                          __ptext612 0E04                            __ptext604 080A  
                          __ptext613 0B01                            __ptext605 0CEC  
                          __ptext614 09C5                            __ptext606 0F63  
                          __ptext607 0F29                            __ptext608 0AE5  
                          __ptext609 0CD8                            __ptext590 0E21  
                          __ptext591 0AFA                            __ptext592 0C53  
                          __ptext593 0D83                            __ptext585 09DD  
                          __ptext594 09AB                            __ptext586 0B19  
                          __ptext595 097C                            __ptext587 02E4  
                          __ptext596 0834                            __ptext588 0A33  
                          __ptext597 096B                            __ptext589 0FBF  
                          __ptext598 0D34                            __ptext599 0DA0  
                           ?___ftdiv 0057                          ??_ISR_Timer 0070  
                           ?___fttol 0078           getADValueOneTime@AD_Result 007B  
                          __pstrings 0200                            _lcd_timer 0048  
                          _lcd_state 0047           __end_of_SwitchBatteryState 0C53  
                     __size_of_Delay 0018                       __size_of_KaiJi 0056  
                        ??_PWMCharge 007E                       __size_of_delay 0018  
                       ??_getADValue 004D                       ___wmul@product 0074  
                     _SystemModeType 006F                             _LPVCount 0040  
                 __end_of_getADValue 0D83                    ___wmul@multiplier 0070  
                 _BatteryStateSwitch 0C5A                             _LoadFlag 0370  
                           _LoadOpen 035D                  ?_BatteryStateSwitch 0070  
                       _TimeModeHour 0032              __size_of_lcd_write_data 000B  
                        getADValue@i 0056                             _PwmCount 0043  
                   __size_of___ftdiv 0062                     __size_of___fttol 0055  
               ??_BatteryStateSwitch 0072                             ___ftpack 0F29  
                           ___lwtoft 0E11                         _OverLoadTime 002A  
                           _rb4_flag 0369                             _checking 00CF  
                           _lcd_init 0834                      _BatteryStandard 003D  
                      __size_of_main 0128               __size_of_lcd_move_char 0011  
                 _EnhanceCharge_Time 0026                    _system_state_init 0CEC  
                           clear_ram 03A2                     ??_readFromEEPROM 007E  
                 ?_system_state_init 0070                      _lcd_print_line1 097C  
                    _lcd_print_line2 09AB                             _state1_1 0256  
                           _state1_2 0266                             _state2_1 02B4  
                           _state2_2 02CE                             _state2_3 02DA  
                           _state2_4 02C1                             _state3_1 0201  
                           _state3_2 0212                             _state4_1 0223  
                           _state5_1 0234                             _state5_2 0276  
                           _state6_1 0286                             _state6_2 0296  
                           _state7_1 02A5                             _state7_2 0245  
                   _SystemErrorCount 0030                  ??_system_state_init 0076  
                           intlevel1 0000        __size_of_GetSolarPanelVoltage 0007  
          __end_of_system_state_init 0D34           __end_of_SolarPanelDealWith 0AE5  
        __end_of_LoadCurrentDealWith 1000       __size_of_GetLoadCurrentVoltage 0007  
      __end_of_GetLoadCurrentVoltage 0E28                    _lcd_write_command 09A0  
                  getADValue@channel 004F                   ?_lcd_write_command 0070  
                      _lcd_move_char 096B                _setting_no_save_timer 0049  
                ??_lcd_write_command 0076                        _PWMChargeFlag 0361  
              _EqualizingCharge_Time 0028                   _SwitchBatteryState 0B19  
            __end_of_lcd_print_line1 09A0              __end_of_lcd_print_line2 09C5  
                     _lcd_write_data 0C9E                  ?_SwitchBatteryState 0070  
          __end_of_lcd_write_command 09AB  
